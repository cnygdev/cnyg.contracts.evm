{"id":"f97042a8e282943313c34eb07b0b9a95","_format":"hh-sol-build-info-1","solcVersion":"0.8.8","solcLongVersion":"0.8.8+commit.dddeac2f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/ERC20CNYG.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract ERC20CNYG is\n    Initializable,\n    ERC20Upgradeable,\n    ERC20BurnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable\n{\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n    bytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\");\n\n    /// config item\n    uint256 public feeStartAmount; // 100 * 1e6;\n    uint256 public feeMaxAmount; // 50 * 1e6;\n    uint256 public feeRate; // 0.05%\n    address public feeCollector; // fee account address\n\n    // whitelist account address => bool\n    mapping(address => bool) public whitelists;\n    // blacklist account address => bool\n    mapping(address => bool) public blacklists;\n\n    /// event\n    event FeeStartAmount(uint256 amount);\n    event FeeMaxAmount(uint256 amount);\n    event FeeRate(uint256 amount);\n    event FeeCollector(address account);\n\n    event AddWhitelist(address account);\n    event RemoveWhitelist(address account);\n    event AddBlacklist(address account);\n    event RemoveBlacklist(address account);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(uint256 _feeStartAmount, uint256 _feeMaxAmount, uint256 _feeRate, address _feeCollector) public initializer {\n        __ERC20_init(\"CNYG Token\", \"CNYG\");\n        __ERC20Burnable_init();\n        __Pausable_init();\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(PAUSER_ROLE, msg.sender);\n        _grantRole(OPERATOR_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n        _grantRole(UPGRADER_ROLE, msg.sender);\n\n        feeStartAmount = _feeStartAmount;\n        feeMaxAmount = _feeMaxAmount;\n\n        require(_feeRate >= 0 && _feeRate < 100, \"invalid amount\");\n        feeRate = _feeRate;\n\n        require(_feeCollector != address(0), \"invalid fee collector\");\n        feeCollector = _feeCollector;\n    }\n\n    // only operator: set minimum amount of transfer\n    function setMinAmount(uint256 _amount) external onlyRole(OPERATOR_ROLE) {\n        require(_amount > 0, \"invalid amount\");\n        feeStartAmount = _amount;\n        emit FeeStartAmount(_amount);\n    }\n\n    // only operator: set maximum amount of transfer fee\n    function setFeeMaxAmount(uint256 _amount) external onlyRole(OPERATOR_ROLE) {\n        require(_amount > 0, \"invalid amount\");\n        feeMaxAmount = _amount;\n        emit FeeMaxAmount(_amount);\n    }\n\n    // only operator: set transfer fee rate\n    function setFeeRate(uint256 _amount) external onlyRole(OPERATOR_ROLE) {\n        require(_amount >= 0 && _amount < 100, \"invalid amount\");\n        feeRate = _amount;\n        emit FeeRate(_amount);\n    }\n\n    // only operator: set fee collector account\n    function setFeeCollector(address _account) external onlyRole(OPERATOR_ROLE) {\n        require(_account != address(0), \"invalid account\");\n        feeCollector = _account;\n        emit FeeCollector(_account);\n    }\n\n    // only operator: account add whitelists\n    // transfer zero fee\n    function addWhitelist(address _account) external onlyRole(OPERATOR_ROLE) {\n        require(_account != address(0), \"invalid account\");\n        require(!whitelists[_account], \"account is whitelist\");\n        whitelists[_account] = true;\n        emit AddWhitelist(_account);\n    }\n\n    // only operator: account remove whitelists\n    function removeWhitelist(address _account) external onlyRole(OPERATOR_ROLE) {\n        require(_account != address(0), \"invalid account\");\n        require(whitelists[_account], \"account is not whitelist\");\n        whitelists[_account] = false;\n        emit RemoveWhitelist(_account);\n    }\n\n    // only operator: account add blacklists\n    // no transfer\n    function addBlacklist(address _account) external onlyRole(OPERATOR_ROLE) {\n        require(_account != address(0), \"invalid account\");\n        require(!blacklists[_account], \"account is blacklist\");\n        blacklists[_account] = true;\n        emit AddBlacklist(_account);\n    }\n\n    // account remove blacklists\n    function removeBlacklist(address _account) external onlyRole(OPERATOR_ROLE) {\n        require(_account != address(0), \"invalid account\");\n        require(blacklists[_account], \"account is not blacklist\");\n        blacklists[_account] = false;\n        emit RemoveBlacklist(_account);\n    }\n\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n        // check account is cannot transfer\n        require(!blacklists[from], \"blacklisted account cannot transfer token\");\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n\n    // calculate transfer fee\n    function _calcFee(address _account, uint256 _amount) private view returns (uint256) {\n        uint256 _fee;\n        if (whitelists[_account]) {\n            return 0;\n        }\n        if (_amount >= feeStartAmount) {\n            _fee = (_amount * feeRate) / 10000;\n            _fee = _fee > feeMaxAmount ? feeMaxAmount : _fee;\n        }\n        return _fee;\n    }\n\n    // account transfer\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        address owner = _msgSender();\n\n        uint256 _fee = _calcFee(owner, amount);\n        if (_fee == 0) {\n            _transfer(owner, to, amount);\n        } else {\n            _transfer(owner, to, amount - _fee);\n            _transfer(owner, feeCollector, _fee);\n        }\n\n        return true;\n    }\n\n    // account transfer\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n\n        uint256 _fee = _calcFee(from, amount);\n        if (_fee == 0) {\n            _transfer(from, to, amount);\n        } else {\n            _transfer(from, to, amount - _fee);\n            _transfer(from, feeCollector, _fee);\n        }\n\n        return true;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2299],"ContextUpgradeable":[2341],"ERC165Upgradeable":[2620],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[2632],"Initializable":[973],"MathUpgradeable":[3497],"StringsUpgradeable":[2576]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":409,"src":"133:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2342,"src":"175:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2577,"src":"217:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2621,"src":"259:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":974,"src":"314:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"1939:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"1939:13:0"},{"baseName":{"id":10,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2341,"src":"1954:18:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"1954:18:0"},{"baseName":{"id":12,"name":"IAccessControlUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":408,"src":"1974:25:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"1974:25:0"},{"baseName":{"id":14,"name":"ERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2620,"src":"2001:17:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"2001:17:0"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"358:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":335,"linearizedBaseContracts":[335,2620,2632,408,2341,973],"name":"AccessControlUpgradeable","nameLocation":"1911:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":20,"nodeType":"Block","src":"2083:7:0","statements":[]},"id":21,"implemented":true,"kind":"function","modifiers":[{"id":18,"kind":"modifierInvocation","modifierName":{"id":17,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"2066:16:0"},"nodeType":"ModifierInvocation","src":"2066:16:0"}],"name":"__AccessControl_init","nameLocation":"2034:20:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2054:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"2083:0:0"},"scope":335,"src":"2025:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"2164:7:0","statements":[]},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":24,"kind":"modifierInvocation","modifierName":{"id":23,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"2147:16:0"},"nodeType":"ModifierInvocation","src":"2147:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2105:30:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"2135:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"2164:0:0"},"scope":335,"src":"2096:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":34,"members":[{"constant":false,"id":31,"mutability":"mutable","name":"members","nameLocation":"2227:7:0","nodeType":"VariableDeclaration","scope":34,"src":"2202:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":30,"keyType":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2202:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2221:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"adminRole","nameLocation":"2252:9:0","nodeType":"VariableDeclaration","scope":34,"src":"2244:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2244:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2183:8:0","nodeType":"StructDefinition","scope":335,"src":"2176:92:0","visibility":"public"},{"constant":false,"id":39,"mutability":"mutable","name":"_roles","nameLocation":"2311:6:0","nodeType":"VariableDeclaration","scope":335,"src":"2274:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":38,"keyType":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2282:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2274:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"RoleData","nodeType":"IdentifierPath","referencedDeclaration":34,"src":"2293:8:0"},"referencedDeclaration":34,"src":"2293:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":42,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2348:18:0","nodeType":"VariableDeclaration","scope":335,"src":"2324:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":52,"nodeType":"Block","src":"2792:44:0","statements":[{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2813:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":47,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":107,"src":"2802:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2802:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2802:16:0"},{"id":51,"nodeType":"PlaceholderStatement","src":"2828:1:0"}]},"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"2380:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":53,"name":"onlyRole","nameLocation":"2769:8:0","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"role","nameLocation":"2786:4:0","nodeType":"VariableDeclaration","scope":53,"src":"2778:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2777:14:0"},"src":"2760:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[2614],"body":{"id":74,"nodeType":"Block","src":"2994:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3011:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":64,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3031:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":63,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3026:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3026:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408","typeString":"type(contract IAccessControlUpgradeable)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"3026:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3011:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":70,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3097:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":68,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3073:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$335_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"3073:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3073:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3011:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":61,"id":73,"nodeType":"Return","src":"3004:105:0"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"2842:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":75,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2912:17:0","nodeType":"FunctionDefinition","overrides":{"id":58,"nodeType":"OverrideSpecifier","overrides":[],"src":"2970:8:0"},"parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"interfaceId","nameLocation":"2937:11:0","nodeType":"VariableDeclaration","scope":75,"src":"2930:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":55,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2930:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2929:20:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":75,"src":"2988:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"2988:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2987:6:0"},"scope":335,"src":"2903:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[375],"body":{"id":93,"nodeType":"Block","src":"3295:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":86,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"3312:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":88,"indexExpression":{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"3319:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":89,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3312:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":91,"indexExpression":{"id":90,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3333:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":85,"id":92,"nodeType":"Return","src":"3305:36:0"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"3122:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":94,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3212:7:0","nodeType":"FunctionDefinition","overrides":{"id":82,"nodeType":"OverrideSpecifier","overrides":[],"src":"3271:8:0"},"parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"3228:4:0","nodeType":"VariableDeclaration","scope":94,"src":"3220:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3220:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"3242:7:0","nodeType":"VariableDeclaration","scope":94,"src":"3234:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3219:31:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"3289:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":83,"name":"bool","nodeType":"ElementaryTypeName","src":"3289:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3288:6:0"},"scope":335,"src":"3203:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"3698:47:0","statements":[{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3719:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":102,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"3725:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3725:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":146,"src":"3708:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3708:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"3708:30:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3354:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":107,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3651:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"role","nameLocation":"3670:4:0","nodeType":"VariableDeclaration","scope":107,"src":"3662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3661:14:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3698:0:0"},"scope":335,"src":"3642:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"4099:428:0","statements":[{"condition":{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4113:23:0","subExpression":{"arguments":[{"id":116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4122:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":117,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4128:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":115,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4114:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4114:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"4109:412:0","trueBody":{"id":143,"nodeType":"Block","src":"4138:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4246:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":128,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4328:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":126,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"4297:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2576_$","typeString":"type(library StringsUpgradeable)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2575,"src":"4297:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4297:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4362:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":135,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4446:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4438:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4438:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4453:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":131,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"4407:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2576_$","typeString":"type(library StringsUpgradeable)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2555,"src":"4407:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4407:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4204:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4204:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4176:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":121,"name":"string","nodeType":"ElementaryTypeName","src":"4176:6:0","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4176:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":120,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4152:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4152:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4152:358:0"}]}}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3751:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4035:10:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"4054:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4046:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4046:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"4068:7:0","nodeType":"VariableDeclaration","scope":146,"src":"4060:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"4060:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4045:31:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"4099:0:0"},"scope":335,"src":"4026:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[383],"body":{"id":160,"nodeType":"Block","src":"4791:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":155,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"4808:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":157,"indexExpression":{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4815:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"4808:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":154,"id":159,"nodeType":"Return","src":"4801:29:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4533:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":161,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4717:12:0","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4764:8:0"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4738:4:0","nodeType":"VariableDeclaration","scope":161,"src":"4730:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4730:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4729:14:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"4782:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4782:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4781:9:0"},"scope":335,"src":"4708:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[391],"body":{"id":180,"nodeType":"Block","src":"5236:42:0","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5257:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5263:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":175,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"5246:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5246:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"5246:25:0"}]},"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"4843:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":181,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":171,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5229:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5216:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5216:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":173,"kind":"modifierInvocation","modifierName":{"id":169,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5207:8:0"},"nodeType":"ModifierInvocation","src":"5207:28:0"}],"name":"grantRole","nameLocation":"5142:9:0","nodeType":"FunctionDefinition","overrides":{"id":168,"nodeType":"OverrideSpecifier","overrides":[],"src":"5198:8:0"},"parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"role","nameLocation":"5160:4:0","nodeType":"VariableDeclaration","scope":181,"src":"5152:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5152:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"account","nameLocation":"5174:7:0","nodeType":"VariableDeclaration","scope":181,"src":"5166:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"5166:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5151:31:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"5236:0:0"},"scope":335,"src":"5133:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[399],"body":{"id":200,"nodeType":"Block","src":"5662:43:0","statements":[{"expression":{"arguments":[{"id":196,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5684:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5690:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":195,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5672:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5672:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"5672:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"5284:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":191,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5655:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":190,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5642:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5642:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":193,"kind":"modifierInvocation","modifierName":{"id":189,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5633:8:0"},"nodeType":"ModifierInvocation","src":"5633:28:0"}],"name":"revokeRole","nameLocation":"5567:10:0","nodeType":"FunctionDefinition","overrides":{"id":188,"nodeType":"OverrideSpecifier","overrides":[],"src":"5624:8:0"},"parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"role","nameLocation":"5586:4:0","nodeType":"VariableDeclaration","scope":201,"src":"5578:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5578:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"account","nameLocation":"5600:7:0","nodeType":"VariableDeclaration","scope":201,"src":"5592:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"5592:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5577:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5662:0:0"},"scope":335,"src":"5558:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[407],"body":{"id":223,"nodeType":"Block","src":"6319:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":212,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"6348:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6348:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6337:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6362:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6329:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6329:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"6329:83:0"},{"expression":{"arguments":[{"id":219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6435:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6441:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6423:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6423:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"6423:26:0"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"5711:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6251:12:0","nodeType":"FunctionDefinition","overrides":{"id":208,"nodeType":"OverrideSpecifier","overrides":[],"src":"6310:8:0"},"parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"role","nameLocation":"6272:4:0","nodeType":"VariableDeclaration","scope":224,"src":"6264:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6264:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"account","nameLocation":"6286:7:0","nodeType":"VariableDeclaration","scope":224,"src":"6278:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"6278:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6263:31:0"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"6319:0:0"},"scope":335,"src":"6242:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":237,"nodeType":"Block","src":"7209:42:0","statements":[{"expression":{"arguments":[{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7230:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7236:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":232,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7219:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7219:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"7219:25:0"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"6462:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7150:10:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"role","nameLocation":"7169:4:0","nodeType":"VariableDeclaration","scope":238,"src":"7161:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7161:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"account","nameLocation":"7183:7:0","nodeType":"VariableDeclaration","scope":238,"src":"7175:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"7175:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7160:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"7209:0:0"},"scope":335,"src":"7141:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"7449:174:0","statements":[{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7467:17:0","nodeType":"VariableDeclaration","scope":265,"src":"7459:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7459:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7500:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"7487:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7487:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7459:46:0"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":252,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7515:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":254,"indexExpression":{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7522:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7515:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"7515:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7540:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7515:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"7515:34:0"},{"eventCall":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7581:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7587:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7606:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7564:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7564:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":264,"nodeType":"EmitStatement","src":"7559:57:0"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"7257:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7385:13:0","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"7407:4:0","nodeType":"VariableDeclaration","scope":266,"src":"7399:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7399:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"adminRole","nameLocation":"7421:9:0","nodeType":"VariableDeclaration","scope":266,"src":"7413:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7413:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7398:33:0"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"7449:0:0"},"scope":335,"src":"7376:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":297,"nodeType":"Block","src":"7859:165:0","statements":[{"condition":{"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7873:23:0","subExpression":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7882:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7888:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"7874:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7874:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"7869:149:0","trueBody":{"id":295,"nodeType":"Block","src":"7898:120:0","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":279,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7912:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":281,"indexExpression":{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7919:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7912:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7912:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":284,"indexExpression":{"id":283,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7912:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7944:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7912:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"ExpressionStatement","src":"7912:36:0"},{"eventCall":{"arguments":[{"id":289,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7979:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7985:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"7994:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7994:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":288,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"7967:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7967:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"EmitStatement","src":"7962:45:0"}]}}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"7629:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":298,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7800:10:0","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"role","nameLocation":"7819:4:0","nodeType":"VariableDeclaration","scope":298,"src":"7811:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7811:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"7833:7:0","nodeType":"VariableDeclaration","scope":298,"src":"7825:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"7825:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7810:31:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[],"src":"7859:0:0"},"scope":335,"src":"7791:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"8264:165:0","statements":[{"condition":{"arguments":[{"id":307,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8286:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":308,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8292:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8278:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8278:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"nodeType":"IfStatement","src":"8274:149:0","trueBody":{"id":326,"nodeType":"Block","src":"8302:121:0","statements":[{"expression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":310,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8316:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":312,"indexExpression":{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8323:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8316:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8316:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":315,"indexExpression":{"id":314,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8316:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8348:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8316:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"ExpressionStatement","src":"8316:37:0"},{"eventCall":{"arguments":[{"id":320,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8384:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8390:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"8399:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8399:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"8372:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8372:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"8367:45:0"}]}}]},"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"8030:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8204:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"8224:4:0","nodeType":"VariableDeclaration","scope":329,"src":"8216:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8216:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"account","nameLocation":"8238:7:0","nodeType":"VariableDeclaration","scope":329,"src":"8230:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"8230:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8215:31:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"8264:0:0"},"scope":335,"src":"8195:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"8435:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":334,"mutability":"mutable","name":"__gap","nameLocation":"8714:5:0","nodeType":"VariableDeclaration","scope":335,"src":"8694:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":333,"length":{"hexValue":"3439","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8702:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8694:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":336,"src":"1893:6829:0","usedErrors":[]}],"src":"108:8615:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":408,"linearizedBaseContracts":[408],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"id":347,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":347,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":347,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":347,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"id":356,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":356,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":356,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":356,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"id":365,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":365,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":365,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":365,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":375,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":372,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":408,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":383,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":408,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":391,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":391,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":408,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":399,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":399,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":408,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":407,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":407,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":408,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":409,"src":"209:2721:1","usedErrors":[]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[429]},"id":430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"132:131:2","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.9._"},"fullyImplemented":true,"id":429,"linearizedBaseContracts":[429],"name":"IERC1967Upgradeable","nameLocation":"274:19:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"300:68:2","text":" @dev Emitted when the implementation is upgraded."},"id":416,"name":"Upgraded","nameLocation":"379:8:2","nodeType":"EventDefinition","parameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"404:14:2","nodeType":"VariableDeclaration","scope":416,"src":"388:30:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"387:32:2"},"src":"373:47:2"},{"anonymous":false,"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"426:67:2","text":" @dev Emitted when the admin account has changed."},"id":423,"name":"AdminChanged","nameLocation":"504:12:2","nodeType":"EventDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"525:13:2","nodeType":"VariableDeclaration","scope":423,"src":"517:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":418,"name":"address","nodeType":"ElementaryTypeName","src":"517:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":421,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"548:8:2","nodeType":"VariableDeclaration","scope":423,"src":"540:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"540:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"516:41:2"},"src":"498:60:2"},{"anonymous":false,"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"564:59:2","text":" @dev Emitted when the beacon is changed."},"id":428,"name":"BeaconUpgraded","nameLocation":"634:14:2","nodeType":"EventDefinition","parameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"665:6:2","nodeType":"VariableDeclaration","scope":428,"src":"649:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":425,"name":"address","nodeType":"ElementaryTypeName","src":"649:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"648:24:2"},"src":"628:45:2"}],"scope":430,"src":"264:411:2","usedErrors":[]}],"src":"107:569:2"},"id":2},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[439]},"id":440,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":431,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"138:203:3","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":439,"linearizedBaseContracts":[439],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"387:438:3","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":438,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:3","nodeType":"FunctionDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[],"src":"852:2:3"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"878:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:3"},"scope":439,"src":"830:57:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":440,"src":"342:547:3","usedErrors":[]}],"src":"113:777:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"ERC1967UpgradeUpgradeable":[794],"IBeaconUpgradeable":[804],"IERC1822ProxiableUpgradeable":[439],"IERC1967Upgradeable":[429],"Initializable":[973],"StorageSlotUpgradeable":[2401]},"id":795,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":441,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":442,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":795,"sourceUnit":805,"src":"141:42:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":795,"sourceUnit":430,"src":"184:50:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":795,"sourceUnit":440,"src":"235:56:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":795,"sourceUnit":2300,"src":"292:44:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":795,"sourceUnit":2402,"src":"337:48:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":795,"sourceUnit":974,"src":"386:36:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":449,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"708:13:4"},"id":450,"nodeType":"InheritanceSpecifier","src":"708:13:4"},{"baseName":{"id":451,"name":"IERC1967Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":429,"src":"723:19:4"},"id":452,"nodeType":"InheritanceSpecifier","src":"723:19:4"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"424:236:4","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"id":794,"linearizedBaseContracts":[794,429,973],"name":"ERC1967UpgradeUpgradeable","nameLocation":"679:25:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":457,"nodeType":"Block","src":"808:7:4","statements":[]},"id":458,"implemented":true,"kind":"function","modifiers":[{"id":455,"kind":"modifierInvocation","modifierName":{"id":454,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"791:16:4"},"nodeType":"ModifierInvocation","src":"791:16:4"}],"name":"__ERC1967Upgrade_init","nameLocation":"758:21:4","nodeType":"FunctionDefinition","parameters":{"id":453,"nodeType":"ParameterList","parameters":[],"src":"779:2:4"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[],"src":"808:0:4"},"scope":794,"src":"749:66:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":463,"nodeType":"Block","src":"890:7:4","statements":[]},"id":464,"implemented":true,"kind":"function","modifiers":[{"id":461,"kind":"modifierInvocation","modifierName":{"id":460,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"873:16:4"},"nodeType":"ModifierInvocation","src":"873:16:4"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"830:31:4","nodeType":"FunctionDefinition","parameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"861:2:4"},"returnParameters":{"id":462,"nodeType":"ParameterList","parameters":[],"src":"890:0:4"},"scope":794,"src":"821:76:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":467,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"1006:14:4","nodeType":"VariableDeclaration","scope":794,"src":"981:108:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1023:66:4","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":468,"nodeType":"StructuredDocumentation","src":"1096:214:4","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":471,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1341:20:4","nodeType":"VariableDeclaration","scope":794,"src":"1315:115:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1315:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1364:66:4","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":483,"nodeType":"Block","src":"1571:89:4","statements":[{"expression":{"expression":{"arguments":[{"id":479,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"1626:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":477,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"1588:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2401_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"1588:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2347_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1588:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":481,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2346,"src":"1588:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":476,"id":482,"nodeType":"Return","src":"1581:72:4"}]},"documentation":{"id":472,"nodeType":"StructuredDocumentation","src":"1437:67:4","text":" @dev Returns the current implementation address."},"id":484,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1518:18:4","nodeType":"FunctionDefinition","parameters":{"id":473,"nodeType":"ParameterList","parameters":[],"src":"1536:2:4"},"returnParameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":484,"src":"1562:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"1562:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1561:9:4"},"scope":794,"src":"1509:151:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":507,"nodeType":"Block","src":"1814:218:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":493,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1862:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":491,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"1832:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2299_$","typeString":"type(library AddressUpgradeable)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2033,"src":"1832:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1832:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1882:47:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":490,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1824:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1824:106:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":497,"nodeType":"ExpressionStatement","src":"1824:106:4"},{"expression":{"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":501,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"1978:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":498,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"1940:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2401_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"1940:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2347_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1940:59:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":503,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2346,"src":"1940:65:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":504,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"2008:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1940:85:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":506,"nodeType":"ExpressionStatement","src":"1940:85:4"}]},"documentation":{"id":485,"nodeType":"StructuredDocumentation","src":"1666:80:4","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":508,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1760:18:4","nodeType":"FunctionDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":487,"mutability":"mutable","name":"newImplementation","nameLocation":"1787:17:4","nodeType":"VariableDeclaration","scope":508,"src":"1779:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":486,"name":"address","nodeType":"ElementaryTypeName","src":"1779:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1778:27:4"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[],"src":"1814:0:4"},"scope":794,"src":"1751:281:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":522,"nodeType":"Block","src":"2194:96:4","statements":[{"expression":{"arguments":[{"id":515,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"2223:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":514,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"2204:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":517,"nodeType":"ExpressionStatement","src":"2204:37:4"},{"eventCall":{"arguments":[{"id":519,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"2265:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":518,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"2256:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2256:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":521,"nodeType":"EmitStatement","src":"2251:32:4"}]},"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"2038:95:4","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":523,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2147:10:4","nodeType":"FunctionDefinition","parameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"newImplementation","nameLocation":"2166:17:4","nodeType":"VariableDeclaration","scope":523,"src":"2158:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"2158:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2157:27:4"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"2194:0:4"},"scope":794,"src":"2138:152:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":550,"nodeType":"Block","src":"2552:160:4","statements":[{"expression":{"arguments":[{"id":534,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2573:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":533,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"2562:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2562:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":536,"nodeType":"ExpressionStatement","src":"2562:29:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":537,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"2605:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2605:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2619:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2605:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":541,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2624:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2605:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":549,"nodeType":"IfStatement","src":"2601:105:4","trueBody":{"id":548,"nodeType":"Block","src":"2635:71:4","statements":[{"expression":{"arguments":[{"id":544,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2671:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":545,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"2690:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":543,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"2649:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2649:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":547,"nodeType":"ExpressionStatement","src":"2649:46:4"}]}}]},"documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"2296:123:4","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":551,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2433:17:4","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"mutability":"mutable","name":"newImplementation","nameLocation":"2468:17:4","nodeType":"VariableDeclaration","scope":551,"src":"2460:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"2460:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"data","nameLocation":"2508:4:4","nodeType":"VariableDeclaration","scope":551,"src":"2495:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":527,"name":"bytes","nodeType":"ElementaryTypeName","src":"2495:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"forceCall","nameLocation":"2527:9:4","nodeType":"VariableDeclaration","scope":551,"src":"2522:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":529,"name":"bool","nodeType":"ElementaryTypeName","src":"2522:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2450:92:4"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[],"src":"2552:0:4"},"scope":794,"src":"2424:288:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":603,"nodeType":"Block","src":"3016:842:4","statements":[{"condition":{"expression":{"arguments":[{"id":563,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"3368:14:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":561,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"3330:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2401_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":2378,"src":"3330:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2350_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3330:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2350_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":565,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2349,"src":"3330:59:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":601,"nodeType":"Block","src":"3459:393:4","statements":[{"clauses":[{"block":{"id":586,"nodeType":"Block","src":"3564:115:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":580,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"3590:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":581,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"3598:20:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3590:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3620:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":579,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3582:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3582:82:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":585,"nodeType":"ExpressionStatement","src":"3582:82:4"}]},"errorName":"","id":587,"nodeType":"TryCatchClause","parameters":{"id":578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"slot","nameLocation":"3558:4:4","nodeType":"VariableDeclaration","scope":587,"src":"3550:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3550:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3549:14:4"},"src":"3541:138:4"},{"block":{"id":592,"nodeType":"Block","src":"3686:89:4","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3711:48:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":588,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3704:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3704:56:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":591,"nodeType":"ExpressionStatement","src":"3704:56:4"}]},"errorName":"","id":593,"nodeType":"TryCatchClause","src":"3680:95:4"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":572,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3506:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":571,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3477:28:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$439_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3477:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$439","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":438,"src":"3477:61:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3477:63:4","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":594,"nodeType":"TryStatement","src":"3473:302:4"},{"expression":{"arguments":[{"id":596,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3806:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":597,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"3825:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":598,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"3831:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":595,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"3788:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3788:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":600,"nodeType":"ExpressionStatement","src":"3788:53:4"}]},"id":602,"nodeType":"IfStatement","src":"3326:526:4","trueBody":{"id":570,"nodeType":"Block","src":"3391:62:4","statements":[{"expression":{"arguments":[{"id":567,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"3424:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":566,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3405:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3405:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":569,"nodeType":"ExpressionStatement","src":"3405:37:4"}]}}]},"documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"2718:161:4","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":604,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2893:21:4","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"newImplementation","nameLocation":"2932:17:4","nodeType":"VariableDeclaration","scope":604,"src":"2924:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"2924:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"data","nameLocation":"2972:4:4","nodeType":"VariableDeclaration","scope":604,"src":"2959:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":555,"name":"bytes","nodeType":"ElementaryTypeName","src":"2959:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"forceCall","nameLocation":"2991:9:4","nodeType":"VariableDeclaration","scope":604,"src":"2986:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":557,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2914:92:4"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"3016:0:4"},"scope":794,"src":"2884:974:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":605,"nodeType":"StructuredDocumentation","src":"3864:189:4","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":608,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4084:11:4","nodeType":"VariableDeclaration","scope":794,"src":"4058:106:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4058:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4098:66:4","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":620,"nodeType":"Block","src":"4279:80:4","statements":[{"expression":{"expression":{"arguments":[{"id":616,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"4334:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":614,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"4296:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2401_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"4296:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2347_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4296:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":618,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2346,"src":"4296:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":613,"id":619,"nodeType":"Return","src":"4289:63:4"}]},"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"4171:50:4","text":" @dev Returns the current admin."},"id":621,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4235:9:4","nodeType":"FunctionDefinition","parameters":{"id":610,"nodeType":"ParameterList","parameters":[],"src":"4244:2:4"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":621,"src":"4270:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":611,"name":"address","nodeType":"ElementaryTypeName","src":"4270:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4269:9:4"},"scope":794,"src":"4226:133:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":646,"nodeType":"Block","src":"4486:167:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":628,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"4504:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4524:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4516:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":629,"name":"address","nodeType":"ElementaryTypeName","src":"4516:7:4","typeDescriptions":{}}},"id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4516:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4504:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4528:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":627,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4496:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4496:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":636,"nodeType":"ExpressionStatement","src":"4496:73:4"},{"expression":{"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":640,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"4617:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":637,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"4579:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2401_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"4579:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2347_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4579:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":642,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2346,"src":"4579:56:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":643,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"4638:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4579:67:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":645,"nodeType":"ExpressionStatement","src":"4579:67:4"}]},"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"4365:71:4","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":647,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4450:9:4","nodeType":"FunctionDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"newAdmin","nameLocation":"4468:8:4","nodeType":"VariableDeclaration","scope":647,"src":"4460:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"4460:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4459:18:4"},"returnParameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"4486:0:4"},"scope":794,"src":"4441:212:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":663,"nodeType":"Block","src":"4813:86:4","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":654,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"4841:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4841:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":656,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"4854:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":653,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"4828:12:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4828:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":658,"nodeType":"EmitStatement","src":"4823:40:4"},{"expression":{"arguments":[{"id":660,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"4883:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":659,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"4873:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4873:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":662,"nodeType":"ExpressionStatement","src":"4873:19:4"}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"4659:100:4","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":664,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4773:12:4","nodeType":"FunctionDefinition","parameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"mutability":"mutable","name":"newAdmin","nameLocation":"4794:8:4","nodeType":"VariableDeclaration","scope":664,"src":"4786:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":649,"name":"address","nodeType":"ElementaryTypeName","src":"4786:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4785:18:4"},"returnParameters":{"id":652,"nodeType":"ParameterList","parameters":[],"src":"4813:0:4"},"scope":794,"src":"4764:135:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":665,"nodeType":"StructuredDocumentation","src":"4905:232:4","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":668,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5168:12:4","nodeType":"VariableDeclaration","scope":794,"src":"5142:107:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":666,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5142:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5183:66:4","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":680,"nodeType":"Block","src":"5366:81:4","statements":[{"expression":{"expression":{"arguments":[{"id":676,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"5421:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":674,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"5383:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2401_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"5383:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2347_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5383:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2346,"src":"5383:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":673,"id":679,"nodeType":"Return","src":"5376:64:4"}]},"documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"5256:51:4","text":" @dev Returns the current beacon."},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5321:10:4","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[],"src":"5331:2:4"},"returnParameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":681,"src":"5357:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"5357:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5356:9:4"},"scope":794,"src":"5312:135:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":716,"nodeType":"Block","src":"5576:368:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":690,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5624:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":688,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"5594:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2299_$","typeString":"type(library AddressUpgradeable)"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2033,"src":"5594:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5594:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5636:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":687,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5586:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5586:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":694,"nodeType":"ExpressionStatement","src":"5586:90:4"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":699,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5756:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":698,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"5737:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$804_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5737:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$804","typeString":"contract IBeaconUpgradeable"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":803,"src":"5737:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5737:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":696,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"5707:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2299_$","typeString":"type(library AddressUpgradeable)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2033,"src":"5707:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5707:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5798:50:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":695,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5686:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5686:172:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":706,"nodeType":"ExpressionStatement","src":"5686:172:4"},{"expression":{"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":710,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"5906:12:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":707,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"5868:22:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$2401_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"5868:37:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2347_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5868:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2346,"src":"5868:57:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":713,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5928:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5868:69:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":715,"nodeType":"ExpressionStatement","src":"5868:69:4"}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"5453:71:4","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":717,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5538:10:4","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"newBeacon","nameLocation":"5557:9:4","nodeType":"VariableDeclaration","scope":717,"src":"5549:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"5549:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5548:19:4"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[],"src":"5576:0:4"},"scope":794,"src":"5529:415:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":752,"nodeType":"Block","src":"6373:221:4","statements":[{"expression":{"arguments":[{"id":728,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6394:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":727,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"6383:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6383:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":730,"nodeType":"ExpressionStatement","src":"6383:21:4"},{"eventCall":{"arguments":[{"id":732,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6434:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":731,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"6419:14:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6419:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":734,"nodeType":"EmitStatement","src":"6414:30:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":735,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"6458:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6458:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6472:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6458:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":739,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"6477:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6458:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":751,"nodeType":"IfStatement","src":"6454:134:4","trueBody":{"id":750,"nodeType":"Block","src":"6488:100:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":743,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6543:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":742,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"6524:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$804_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6524:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$804","typeString":"contract IBeaconUpgradeable"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":803,"src":"6524:44:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6524:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":747,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"6572:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":741,"name":"_functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"6502:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6502:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":749,"nodeType":"ExpressionStatement","src":"6502:75:4"}]}}]},"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"5950:292:4","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":753,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6256:23:4","nodeType":"FunctionDefinition","parameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"newBeacon","nameLocation":"6297:9:4","nodeType":"VariableDeclaration","scope":753,"src":"6289:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"6289:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"data","nameLocation":"6329:4:4","nodeType":"VariableDeclaration","scope":753,"src":"6316:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":721,"name":"bytes","nodeType":"ElementaryTypeName","src":"6316:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":724,"mutability":"mutable","name":"forceCall","nameLocation":"6348:9:4","nodeType":"VariableDeclaration","scope":753,"src":"6343:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"6343:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6279:84:4"},"returnParameters":{"id":726,"nodeType":"ParameterList","parameters":[],"src":"6373:0:4"},"scope":794,"src":"6247:347:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"6877:358:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":766,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"6925:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":764,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"6895:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2299_$","typeString":"type(library AddressUpgradeable)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2033,"src":"6895:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6895:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6934:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":763,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6887:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6887:88:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":770,"nodeType":"ExpressionStatement","src":"6887:88:4"},{"assignments":[772,774],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"success","nameLocation":"7051:7:4","nodeType":"VariableDeclaration","scope":787,"src":"7046:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":771,"name":"bool","nodeType":"ElementaryTypeName","src":"7046:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"returndata","nameLocation":"7073:10:4","nodeType":"VariableDeclaration","scope":787,"src":"7060:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":773,"name":"bytes","nodeType":"ElementaryTypeName","src":"7060:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":779,"initialValue":{"arguments":[{"id":777,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"7107:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":775,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"7087:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7087:19:4","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7087:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7045:67:4"},{"expression":{"arguments":[{"id":782,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"7165:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":783,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"7174:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7186:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"expression":{"id":780,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"7129:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2299_$","typeString":"type(library AddressUpgradeable)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"verifyCallResult","nodeType":"MemberAccess","referencedDeclaration":2278,"src":"7129:35:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7129:99:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":762,"id":786,"nodeType":"Return","src":"7122:106:4"}]},"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"6600:175:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"_functionDelegateCall","nameLocation":"6789:21:4","nodeType":"FunctionDefinition","parameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":756,"mutability":"mutable","name":"target","nameLocation":"6819:6:4","nodeType":"VariableDeclaration","scope":788,"src":"6811:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"6811:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":758,"mutability":"mutable","name":"data","nameLocation":"6840:4:4","nodeType":"VariableDeclaration","scope":788,"src":"6827:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":757,"name":"bytes","nodeType":"ElementaryTypeName","src":"6827:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6810:35:4"},"returnParameters":{"id":762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":788,"src":"6863:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":760,"name":"bytes","nodeType":"ElementaryTypeName","src":"6863:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6862:14:4"},"scope":794,"src":"6780:455:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"7241:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":793,"mutability":"mutable","name":"__gap","nameLocation":"7520:5:4","nodeType":"VariableDeclaration","scope":794,"src":"7500:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"7500:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":792,"length":{"hexValue":"3530","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7508:2:4","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"7500:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":795,"src":"661:6867:4","usedErrors":[]}],"src":"116:7413:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[804]},"id":805,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":796,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":797,"nodeType":"StructuredDocumentation","src":"118:79:5","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":804,"linearizedBaseContracts":[804],"name":"IBeaconUpgradeable","nameLocation":"208:18:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":798,"nodeType":"StructuredDocumentation","src":"233:162:5","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":803,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:5","nodeType":"FunctionDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[],"src":"423:2:5"},"returnParameters":{"id":802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":803,"src":"449:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:5"},"scope":804,"src":"400:58:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":805,"src":"198:262:5","usedErrors":[]}],"src":"93:368:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"Initializable":[973]},"id":974,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":806,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":807,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":974,"sourceUnit":2300,"src":"138:44:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"184:2198:6","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":973,"linearizedBaseContracts":[973],"name":"Initializable","nameLocation":"2401:13:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"2421:109:6","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":811,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:6","nodeType":"VariableDeclaration","scope":973,"src":"2535:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":810,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"2568:91:6","text":" @dev Indicates that the contract is in the process of being initialized."},"id":814,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:6","nodeType":"VariableDeclaration","scope":973,"src":"2664:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":813,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"2697:90:6","text":" @dev Triggered when the contract has been initialized or reinitialized."},"id":819,"name":"Initialized","nameLocation":"2798:11:6","nodeType":"EventDefinition","parameters":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":817,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:6","nodeType":"VariableDeclaration","scope":819,"src":"2810:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":816,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:6"},"src":"2792:33:6"},{"body":{"id":874,"nodeType":"Block","src":"3258:483:6","statements":[{"assignments":[823],"declarations":[{"constant":false,"id":823,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:6","nodeType":"VariableDeclaration","scope":874,"src":"3268:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":822,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":826,"initialValue":{"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:6","subExpression":{"id":824,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"3291:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":828,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"3336:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":829,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"3354:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":833,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:6","subExpression":{"arguments":[{"arguments":[{"id":838,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$973","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$973","typeString":"contract Initializable"}],"id":837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:6","typeDescriptions":{}}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3407:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":834,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"3377:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2299_$","typeString":"type(library AddressUpgradeable)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2033,"src":"3377:29:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3377:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":842,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"3425:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":827,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3314:201:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":850,"nodeType":"ExpressionStatement","src":"3314:201:6"},{"expression":{"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":851,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"3525:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":854,"nodeType":"ExpressionStatement","src":"3525:16:6"},{"condition":{"id":855,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"3555:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":861,"nodeType":"IfStatement","src":"3551:65:6","trueBody":{"id":860,"nodeType":"Block","src":"3571:45:6","statements":[{"expression":{"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":856,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"3585:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":859,"nodeType":"ExpressionStatement","src":"3585:20:6"}]}},{"id":862,"nodeType":"PlaceholderStatement","src":"3625:1:6"},{"condition":{"id":863,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"3640:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":873,"nodeType":"IfStatement","src":"3636:99:6","trueBody":{"id":872,"nodeType":"Block","src":"3656:79:6","statements":[{"expression":{"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":864,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"3670:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":867,"nodeType":"ExpressionStatement","src":"3670:21:6"},{"eventCall":{"arguments":[{"hexValue":"31","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":868,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"3710:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3710:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":871,"nodeType":"EmitStatement","src":"3705:19:6"}]}}]},"documentation":{"id":820,"nodeType":"StructuredDocumentation","src":"2831:399:6","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":875,"name":"initializer","nameLocation":"3244:11:6","nodeType":"ModifierDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[],"src":"3255:2:6"},"src":"3235:506:6","virtual":false,"visibility":"internal"},{"body":{"id":907,"nodeType":"Block","src":"4852:255:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:6","subExpression":{"id":881,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"4871:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":883,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"4888:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":884,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"4903:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":880,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4862:99:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":889,"nodeType":"ExpressionStatement","src":"4862:99:6"},{"expression":{"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":890,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"4971:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":891,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"4986:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":893,"nodeType":"ExpressionStatement","src":"4971:22:6"},{"expression":{"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":894,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"5003:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":897,"nodeType":"ExpressionStatement","src":"5003:20:6"},{"id":898,"nodeType":"PlaceholderStatement","src":"5033:1:6"},{"expression":{"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":899,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"5044:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":902,"nodeType":"ExpressionStatement","src":"5044:21:6"},{"eventCall":{"arguments":[{"id":904,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"5092:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":903,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"5080:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5080:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":906,"nodeType":"EmitStatement","src":"5075:25:6"}]},"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"3747:1062:6","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":908,"name":"reinitializer","nameLocation":"4823:13:6","nodeType":"ModifierDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"version","nameLocation":"4843:7:6","nodeType":"VariableDeclaration","scope":908,"src":"4837:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":877,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:6"},"src":"4814:293:6","virtual":false,"visibility":"internal"},{"body":{"id":917,"nodeType":"Block","src":"5345:97:6","statements":[{"expression":{"arguments":[{"id":912,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"5363:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":911,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5355:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":915,"nodeType":"ExpressionStatement","src":"5355:69:6"},{"id":916,"nodeType":"PlaceholderStatement","src":"5434:1:6"}]},"documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"5113:199:6","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":918,"name":"onlyInitializing","nameLocation":"5326:16:6","nodeType":"ModifierDefinition","parameters":{"id":910,"nodeType":"ParameterList","parameters":[],"src":"5342:2:6"},"src":"5317:125:6","virtual":false,"visibility":"internal"},{"body":{"id":953,"nodeType":"Block","src":"5977:230:6","statements":[{"expression":{"arguments":[{"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:6","subExpression":{"id":923,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"5996:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":922,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5987:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":927,"nodeType":"ExpressionStatement","src":"5987:66:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":928,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"6067:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":930,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":929,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6082:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6082:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":952,"nodeType":"IfStatement","src":"6063:138:6","trueBody":{"id":951,"nodeType":"Block","src":"6099:102:6","statements":[{"expression":{"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":935,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"6113:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":937,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":936,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6128:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6128:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":942,"nodeType":"ExpressionStatement","src":"6113:30:6"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":945,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":944,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6174:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":943,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"6162:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6162:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":950,"nodeType":"EmitStatement","src":"6157:33:6"}]}}]},"documentation":{"id":919,"nodeType":"StructuredDocumentation","src":"5448:475:6","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":954,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:6","nodeType":"FunctionDefinition","parameters":{"id":920,"nodeType":"ParameterList","parameters":[],"src":"5957:2:6"},"returnParameters":{"id":921,"nodeType":"ParameterList","parameters":[],"src":"5977:0:6"},"scope":973,"src":"5928:279:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":962,"nodeType":"Block","src":"6381:36:6","statements":[{"expression":{"id":960,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"6398:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":959,"id":961,"nodeType":"Return","src":"6391:19:6"}]},"documentation":{"id":955,"nodeType":"StructuredDocumentation","src":"6213:99:6","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":963,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:6","nodeType":"FunctionDefinition","parameters":{"id":956,"nodeType":"ParameterList","parameters":[],"src":"6348:2:6"},"returnParameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":963,"src":"6374:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":957,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:6"},"scope":973,"src":"6317:100:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":971,"nodeType":"Block","src":"6589:37:6","statements":[{"expression":{"id":969,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"6606:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":968,"id":970,"nodeType":"Return","src":"6599:20:6"}]},"documentation":{"id":964,"nodeType":"StructuredDocumentation","src":"6423:105:6","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":972,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:6","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[],"src":"6557:2:6"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":972,"src":"6583:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":966,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:6"},"scope":973,"src":"6533:93:6","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":974,"src":"2383:4245:6","usedErrors":[]}],"src":"113:6516:6"},"id":6},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"ERC1967UpgradeUpgradeable":[794],"IBeaconUpgradeable":[804],"IERC1822ProxiableUpgradeable":[439],"IERC1967Upgradeable":[429],"Initializable":[973],"StorageSlotUpgradeable":[2401],"UUPSUpgradeable":[1109]},"id":1110,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":975,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":976,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1110,"sourceUnit":440,"src":"140:56:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":977,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1110,"sourceUnit":795,"src":"197:50:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":978,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1110,"sourceUnit":974,"src":"248:29:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":980,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"965:13:7"},"id":981,"nodeType":"InheritanceSpecifier","src":"965:13:7"},{"baseName":{"id":982,"name":"IERC1822ProxiableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":439,"src":"980:28:7"},"id":983,"nodeType":"InheritanceSpecifier","src":"980:28:7"},{"baseName":{"id":984,"name":"ERC1967UpgradeUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":794,"src":"1010:25:7"},"id":985,"nodeType":"InheritanceSpecifier","src":"1010:25:7"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"279:648:7","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1109,"linearizedBaseContracts":[1109,794,429,439,973],"name":"UUPSUpgradeable","nameLocation":"946:15:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":990,"nodeType":"Block","src":"1102:7:7","statements":[]},"id":991,"implemented":true,"kind":"function","modifiers":[{"id":988,"kind":"modifierInvocation","modifierName":{"id":987,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"1085:16:7"},"nodeType":"ModifierInvocation","src":"1085:16:7"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:7","nodeType":"FunctionDefinition","parameters":{"id":986,"nodeType":"ParameterList","parameters":[],"src":"1073:2:7"},"returnParameters":{"id":989,"nodeType":"ParameterList","parameters":[],"src":"1102:0:7"},"scope":1109,"src":"1042:67:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":996,"nodeType":"Block","src":"1185:7:7","statements":[]},"id":997,"implemented":true,"kind":"function","modifiers":[{"id":994,"kind":"modifierInvocation","modifierName":{"id":993,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"1168:16:7"},"nodeType":"ModifierInvocation","src":"1168:16:7"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:7","nodeType":"FunctionDefinition","parameters":{"id":992,"nodeType":"ParameterList","parameters":[],"src":"1156:2:7"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[],"src":"1185:0:7"},"scope":1109,"src":"1115:77:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"1197:87:7","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":1004,"mutability":"immutable","name":"__self","nameLocation":"1315:6:7","nodeType":"VariableDeclaration","scope":1109,"src":"1289:48:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":1002,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1109","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1109","typeString":"contract UUPSUpgradeable"}],"id":1001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:7","typeDescriptions":{}}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1324:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1026,"nodeType":"Block","src":"1863:205:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1010,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1109","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1109","typeString":"contract UUPSUpgradeable"}],"id":1009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1008,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:7","typeDescriptions":{}}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1881:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1012,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"1898:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":1007,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1873:80:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1016,"nodeType":"ExpressionStatement","src":"1873:80:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1018,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"1971:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1971:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1020,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"1995:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":1017,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1963:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1024,"nodeType":"ExpressionStatement","src":"1963:87:7"},{"id":1025,"nodeType":"PlaceholderStatement","src":"2060:1:7"}]},"documentation":{"id":1005,"nodeType":"StructuredDocumentation","src":"1344:493:7","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":1027,"name":"onlyProxy","nameLocation":"1851:9:7","nodeType":"ModifierDefinition","parameters":{"id":1006,"nodeType":"ParameterList","parameters":[],"src":"1860:2:7"},"src":"1842:226:7","virtual":false,"visibility":"internal"},{"body":{"id":1041,"nodeType":"Block","src":"2298:120:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1033,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1109","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$1109","typeString":"contract UUPSUpgradeable"}],"id":1032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1031,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:7","typeDescriptions":{}}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2316:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1035,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"2333:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":1030,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2308:92:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1039,"nodeType":"ExpressionStatement","src":"2308:92:7"},{"id":1040,"nodeType":"PlaceholderStatement","src":"2410:1:7"}]},"documentation":{"id":1028,"nodeType":"StructuredDocumentation","src":"2074:195:7","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":1042,"name":"notDelegated","nameLocation":"2283:12:7","nodeType":"ModifierDefinition","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[],"src":"2295:2:7"},"src":"2274:144:7","virtual":false,"visibility":"internal"},{"baseFunctions":[438],"body":{"id":1053,"nodeType":"Block","src":"3093:44:7","statements":[{"expression":{"id":1051,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"3110:20:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1050,"id":1052,"nodeType":"Return","src":"3103:27:7"}]},"documentation":{"id":1043,"nodeType":"StructuredDocumentation","src":"2424:577:7","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":1054,"implemented":true,"kind":"function","modifiers":[{"id":1047,"kind":"modifierInvocation","modifierName":{"id":1046,"name":"notDelegated","nodeType":"IdentifierPath","referencedDeclaration":1042,"src":"3062:12:7"},"nodeType":"ModifierInvocation","src":"3062:12:7"}],"name":"proxiableUUID","nameLocation":"3015:13:7","nodeType":"FunctionDefinition","overrides":{"id":1045,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:7"},"parameters":{"id":1044,"nodeType":"ParameterList","parameters":[],"src":"3028:2:7"},"returnParameters":{"id":1050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1054,"src":"3084:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:7"},"scope":1109,"src":"3006:131:7","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":1075,"nodeType":"Block","src":"3390:124:7","statements":[{"expression":{"arguments":[{"id":1063,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"3418:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1062,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"3400:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3400:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1065,"nodeType":"ExpressionStatement","src":"3400:36:7"},{"expression":{"arguments":[{"id":1067,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"3468:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3497:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3487:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1068,"name":"bytes","nodeType":"ElementaryTypeName","src":"3491:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3487:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3501:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1066,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"3446:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3446:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1074,"nodeType":"ExpressionStatement","src":"3446:61:7"}]},"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"3143:169:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"3659cfe6","id":1076,"implemented":true,"kind":"function","modifiers":[{"id":1060,"kind":"modifierInvocation","modifierName":{"id":1059,"name":"onlyProxy","nodeType":"IdentifierPath","referencedDeclaration":1027,"src":"3380:9:7"},"nodeType":"ModifierInvocation","src":"3380:9:7"}],"name":"upgradeTo","nameLocation":"3326:9:7","nodeType":"FunctionDefinition","parameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"mutability":"mutable","name":"newImplementation","nameLocation":"3344:17:7","nodeType":"VariableDeclaration","scope":1076,"src":"3336:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"3336:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3335:27:7"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"3390:0:7"},"scope":1109,"src":"3317:197:7","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":1096,"nodeType":"Block","src":"3870:115:7","statements":[{"expression":{"arguments":[{"id":1087,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"3898:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1086,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"3880:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3880:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1089,"nodeType":"ExpressionStatement","src":"3880:36:7"},{"expression":{"arguments":[{"id":1091,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"3948:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1092,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"3967:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3973:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1090,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"3926:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3926:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1095,"nodeType":"ExpressionStatement","src":"3926:52:7"}]},"documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"3520:238:7","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"4f1ef286","id":1097,"implemented":true,"kind":"function","modifiers":[{"id":1084,"kind":"modifierInvocation","modifierName":{"id":1083,"name":"onlyProxy","nodeType":"IdentifierPath","referencedDeclaration":1027,"src":"3860:9:7"},"nodeType":"ModifierInvocation","src":"3860:9:7"}],"name":"upgradeToAndCall","nameLocation":"3772:16:7","nodeType":"FunctionDefinition","parameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"newImplementation","nameLocation":"3797:17:7","nodeType":"VariableDeclaration","scope":1097,"src":"3789:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1078,"name":"address","nodeType":"ElementaryTypeName","src":"3789:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1081,"mutability":"mutable","name":"data","nameLocation":"3829:4:7","nodeType":"VariableDeclaration","scope":1097,"src":"3816:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1080,"name":"bytes","nodeType":"ElementaryTypeName","src":"3816:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3788:46:7"},"returnParameters":{"id":1085,"nodeType":"ParameterList","parameters":[],"src":"3870:0:7"},"scope":1109,"src":"3763:222:7","stateMutability":"payable","virtual":true,"visibility":"external"},{"documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"3991:397:7","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1103,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4402:17:7","nodeType":"FunctionDefinition","parameters":{"id":1101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"newImplementation","nameLocation":"4428:17:7","nodeType":"VariableDeclaration","scope":1103,"src":"4420:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1099,"name":"address","nodeType":"ElementaryTypeName","src":"4420:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:27:7"},"returnParameters":{"id":1102,"nodeType":"ParameterList","parameters":[],"src":"4463:0:7"},"scope":1109,"src":"4393:71:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1104,"nodeType":"StructuredDocumentation","src":"4470:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1108,"mutability":"mutable","name":"__gap","nameLocation":"4749:5:7","nodeType":"VariableDeclaration","scope":1109,"src":"4729:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"4729:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1107,"length":{"hexValue":"3530","id":1106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4729:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1110,"src":"928:3829:7","usedErrors":[]}],"src":"115:4643:7"},"id":7},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"ContextUpgradeable":[2341],"Initializable":[973],"PausableUpgradeable":[1236]},"id":1237,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1111,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":1112,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1237,"sourceUnit":2342,"src":"130:41:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1113,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1237,"sourceUnit":974,"src":"172:42:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1115,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"697:13:8"},"id":1116,"nodeType":"InheritanceSpecifier","src":"697:13:8"},{"baseName":{"id":1117,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2341,"src":"712:18:8"},"id":1118,"nodeType":"InheritanceSpecifier","src":"712:18:8"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1114,"nodeType":"StructuredDocumentation","src":"216:439:8","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":1236,"linearizedBaseContracts":[1236,2341,973],"name":"PausableUpgradeable","nameLocation":"674:19:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"737:73:8","text":" @dev Emitted when the pause is triggered by `account`."},"id":1123,"name":"Paused","nameLocation":"821:6:8","nodeType":"EventDefinition","parameters":{"id":1122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:8","nodeType":"VariableDeclaration","scope":1123,"src":"828:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:8"},"src":"815:30:8"},{"anonymous":false,"documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"851:70:8","text":" @dev Emitted when the pause is lifted by `account`."},"id":1128,"name":"Unpaused","nameLocation":"932:8:8","nodeType":"EventDefinition","parameters":{"id":1127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:8","nodeType":"VariableDeclaration","scope":1128,"src":"941:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1125,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:8"},"src":"926:32:8"},{"constant":false,"id":1130,"mutability":"mutable","name":"_paused","nameLocation":"977:7:8","nodeType":"VariableDeclaration","scope":1236,"src":"964:20:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1129,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":1139,"nodeType":"Block","src":"1116:44:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1136,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"1126:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1126:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1138,"nodeType":"ExpressionStatement","src":"1126:27:8"}]},"documentation":{"id":1131,"nodeType":"StructuredDocumentation","src":"991:67:8","text":" @dev Initializes the contract in unpaused state."},"id":1140,"implemented":true,"kind":"function","modifiers":[{"id":1134,"kind":"modifierInvocation","modifierName":{"id":1133,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"1099:16:8"},"nodeType":"ModifierInvocation","src":"1099:16:8"}],"name":"__Pausable_init","nameLocation":"1072:15:8","nodeType":"FunctionDefinition","parameters":{"id":1132,"nodeType":"ParameterList","parameters":[],"src":"1087:2:8"},"returnParameters":{"id":1135,"nodeType":"ParameterList","parameters":[],"src":"1116:0:8"},"scope":1236,"src":"1063:97:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1149,"nodeType":"Block","src":"1229:32:8","statements":[{"expression":{"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1145,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1239:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1148,"nodeType":"ExpressionStatement","src":"1239:15:8"}]},"id":1150,"implemented":true,"kind":"function","modifiers":[{"id":1143,"kind":"modifierInvocation","modifierName":{"id":1142,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"1212:16:8"},"nodeType":"ModifierInvocation","src":"1212:16:8"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:8","nodeType":"FunctionDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[],"src":"1200:2:8"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[],"src":"1229:0:8"},"scope":1236,"src":"1166:95:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1157,"nodeType":"Block","src":"1472:47:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1153,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"1482:17:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1482:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1155,"nodeType":"ExpressionStatement","src":"1482:19:8"},{"id":1156,"nodeType":"PlaceholderStatement","src":"1511:1:8"}]},"documentation":{"id":1151,"nodeType":"StructuredDocumentation","src":"1267:175:8","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":1158,"name":"whenNotPaused","nameLocation":"1456:13:8","nodeType":"ModifierDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[],"src":"1469:2:8"},"src":"1447:72:8","virtual":false,"visibility":"internal"},{"body":{"id":1165,"nodeType":"Block","src":"1719:44:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1161,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"1729:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1729:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1163,"nodeType":"ExpressionStatement","src":"1729:16:8"},{"id":1164,"nodeType":"PlaceholderStatement","src":"1755:1:8"}]},"documentation":{"id":1159,"nodeType":"StructuredDocumentation","src":"1525:167:8","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":1166,"name":"whenPaused","nameLocation":"1706:10:8","nodeType":"ModifierDefinition","parameters":{"id":1160,"nodeType":"ParameterList","parameters":[],"src":"1716:2:8"},"src":"1697:66:8","virtual":false,"visibility":"internal"},{"body":{"id":1174,"nodeType":"Block","src":"1911:31:8","statements":[{"expression":{"id":1172,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1928:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1171,"id":1173,"nodeType":"Return","src":"1921:14:8"}]},"documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"1769:84:8","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":1175,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:8","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[],"src":"1873:2:8"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"1905:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1169,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:8"},"scope":1236,"src":"1858:84:8","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1186,"nodeType":"Block","src":"2061:55:8","statements":[{"expression":{"arguments":[{"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:8","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1180,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"2080:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2080:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":1179,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2071:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1185,"nodeType":"ExpressionStatement","src":"2071:38:8"}]},"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"1948:57:8","text":" @dev Throws if the contract is paused."},"id":1187,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:8","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[],"src":"2036:2:8"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[],"src":"2061:0:8"},"scope":1236,"src":"2010:106:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1197,"nodeType":"Block","src":"2236:58:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1192,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"2254:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2254:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":1191,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2246:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1196,"nodeType":"ExpressionStatement","src":"2246:41:8"}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"2122:61:8","text":" @dev Throws if the contract is not paused."},"id":1198,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:8","nodeType":"FunctionDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[],"src":"2211:2:8"},"returnParameters":{"id":1190,"nodeType":"ParameterList","parameters":[],"src":"2236:0:8"},"scope":1236,"src":"2188:106:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1213,"nodeType":"Block","src":"2478:66:8","statements":[{"expression":{"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1204,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"2488:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1207,"nodeType":"ExpressionStatement","src":"2488:14:8"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1209,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"2524:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2524:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1208,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"2517:6:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1212,"nodeType":"EmitStatement","src":"2512:25:8"}]},"documentation":{"id":1199,"nodeType":"StructuredDocumentation","src":"2300:124:8","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":1214,"implemented":true,"kind":"function","modifiers":[{"id":1202,"kind":"modifierInvocation","modifierName":{"id":1201,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1158,"src":"2464:13:8"},"nodeType":"ModifierInvocation","src":"2464:13:8"}],"name":"_pause","nameLocation":"2438:6:8","nodeType":"FunctionDefinition","parameters":{"id":1200,"nodeType":"ParameterList","parameters":[],"src":"2444:2:8"},"returnParameters":{"id":1203,"nodeType":"ParameterList","parameters":[],"src":"2478:0:8"},"scope":1236,"src":"2429:115:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1229,"nodeType":"Block","src":"2724:69:8","statements":[{"expression":{"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1220,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"2734:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1223,"nodeType":"ExpressionStatement","src":"2734:15:8"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1225,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"2773:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2773:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1224,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"2764:8:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2764:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1228,"nodeType":"EmitStatement","src":"2759:27:8"}]},"documentation":{"id":1215,"nodeType":"StructuredDocumentation","src":"2550:121:8","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":1230,"implemented":true,"kind":"function","modifiers":[{"id":1218,"kind":"modifierInvocation","modifierName":{"id":1217,"name":"whenPaused","nodeType":"IdentifierPath","referencedDeclaration":1166,"src":"2713:10:8"},"nodeType":"ModifierInvocation","src":"2713:10:8"}],"name":"_unpause","nameLocation":"2685:8:8","nodeType":"FunctionDefinition","parameters":{"id":1216,"nodeType":"ParameterList","parameters":[],"src":"2693:2:8"},"returnParameters":{"id":1219,"nodeType":"ParameterList","parameters":[],"src":"2724:0:8"},"scope":1236,"src":"2676:117:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1231,"nodeType":"StructuredDocumentation","src":"2799:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1235,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:8","nodeType":"VariableDeclaration","scope":1236,"src":"3058:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1232,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1234,"length":{"hexValue":"3439","id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:8","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1237,"src":"656:2430:8","usedErrors":[]}],"src":"105:2982:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"ContextUpgradeable":[2341],"ERC20Upgradeable":[1848],"IERC20MetadataUpgradeable":[2015],"IERC20Upgradeable":[1926],"Initializable":[973]},"id":1849,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1238,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"./IERC20Upgradeable.sol","id":1239,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1849,"sourceUnit":1927,"src":"130:33:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","file":"./extensions/IERC20MetadataUpgradeable.sol","id":1240,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1849,"sourceUnit":2016,"src":"164:52:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":1241,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1849,"sourceUnit":2342,"src":"217:44:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1242,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1849,"sourceUnit":974,"src":"262:45:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1244,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"1509:13:9"},"id":1245,"nodeType":"InheritanceSpecifier","src":"1509:13:9"},{"baseName":{"id":1246,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2341,"src":"1524:18:9"},"id":1247,"nodeType":"InheritanceSpecifier","src":"1524:18:9"},{"baseName":{"id":1248,"name":"IERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1926,"src":"1544:17:9"},"id":1249,"nodeType":"InheritanceSpecifier","src":"1544:17:9"},{"baseName":{"id":1250,"name":"IERC20MetadataUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2015,"src":"1563:25:9"},"id":1251,"nodeType":"InheritanceSpecifier","src":"1563:25:9"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1243,"nodeType":"StructuredDocumentation","src":"309:1170:9","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":1848,"linearizedBaseContracts":[1848,2015,1926,2341,973],"name":"ERC20Upgradeable","nameLocation":"1489:16:9","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1255,"mutability":"mutable","name":"_balances","nameLocation":"1631:9:9","nodeType":"VariableDeclaration","scope":1848,"src":"1595:45:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1254,"keyType":{"id":1252,"name":"address","nodeType":"ElementaryTypeName","src":"1603:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1595:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1253,"name":"uint256","nodeType":"ElementaryTypeName","src":"1614:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1261,"mutability":"mutable","name":"_allowances","nameLocation":"1703:11:9","nodeType":"VariableDeclaration","scope":1848,"src":"1647:67:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":1260,"keyType":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"1655:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1647:47:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":1259,"keyType":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"1674:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1666:27:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"1685:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":1263,"mutability":"mutable","name":"_totalSupply","nameLocation":"1737:12:9","nodeType":"VariableDeclaration","scope":1848,"src":"1721:28:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1262,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1265,"mutability":"mutable","name":"_name","nameLocation":"1771:5:9","nodeType":"VariableDeclaration","scope":1848,"src":"1756:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1264,"name":"string","nodeType":"ElementaryTypeName","src":"1756:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1267,"mutability":"mutable","name":"_symbol","nameLocation":"1797:7:9","nodeType":"VariableDeclaration","scope":1848,"src":"1782:22:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1266,"name":"string","nodeType":"ElementaryTypeName","src":"1782:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":1282,"nodeType":"Block","src":"2206:55:9","statements":[{"expression":{"arguments":[{"id":1278,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"2239:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1279,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"2246:7:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1277,"name":"__ERC20_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"2216:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2216:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1281,"nodeType":"ExpressionStatement","src":"2216:38:9"}]},"documentation":{"id":1268,"nodeType":"StructuredDocumentation","src":"1811:298:9","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":1283,"implemented":true,"kind":"function","modifiers":[{"id":1275,"kind":"modifierInvocation","modifierName":{"id":1274,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"2189:16:9"},"nodeType":"ModifierInvocation","src":"2189:16:9"}],"name":"__ERC20_init","nameLocation":"2123:12:9","nodeType":"FunctionDefinition","parameters":{"id":1273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"name_","nameLocation":"2150:5:9","nodeType":"VariableDeclaration","scope":1283,"src":"2136:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1269,"name":"string","nodeType":"ElementaryTypeName","src":"2136:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1272,"mutability":"mutable","name":"symbol_","nameLocation":"2171:7:9","nodeType":"VariableDeclaration","scope":1283,"src":"2157:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1271,"name":"string","nodeType":"ElementaryTypeName","src":"2157:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2135:44:9"},"returnParameters":{"id":1276,"nodeType":"ParameterList","parameters":[],"src":"2206:0:9"},"scope":1848,"src":"2114:147:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1300,"nodeType":"Block","src":"2369:57:9","statements":[{"expression":{"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1292,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"2379:5:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1293,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"2387:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2379:13:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1295,"nodeType":"ExpressionStatement","src":"2379:13:9"},{"expression":{"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1296,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"2402:7:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1297,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"2412:7:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2402:17:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1299,"nodeType":"ExpressionStatement","src":"2402:17:9"}]},"id":1301,"implemented":true,"kind":"function","modifiers":[{"id":1290,"kind":"modifierInvocation","modifierName":{"id":1289,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"2352:16:9"},"nodeType":"ModifierInvocation","src":"2352:16:9"}],"name":"__ERC20_init_unchained","nameLocation":"2276:22:9","nodeType":"FunctionDefinition","parameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"name_","nameLocation":"2313:5:9","nodeType":"VariableDeclaration","scope":1301,"src":"2299:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1284,"name":"string","nodeType":"ElementaryTypeName","src":"2299:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"symbol_","nameLocation":"2334:7:9","nodeType":"VariableDeclaration","scope":1301,"src":"2320:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1286,"name":"string","nodeType":"ElementaryTypeName","src":"2320:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2298:44:9"},"returnParameters":{"id":1291,"nodeType":"ParameterList","parameters":[],"src":"2369:0:9"},"scope":1848,"src":"2267:159:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2002],"body":{"id":1310,"nodeType":"Block","src":"2560:29:9","statements":[{"expression":{"id":1308,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"2577:5:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1307,"id":1309,"nodeType":"Return","src":"2570:12:9"}]},"documentation":{"id":1302,"nodeType":"StructuredDocumentation","src":"2432:54:9","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1311,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2500:4:9","nodeType":"FunctionDefinition","overrides":{"id":1304,"nodeType":"OverrideSpecifier","overrides":[],"src":"2527:8:9"},"parameters":{"id":1303,"nodeType":"ParameterList","parameters":[],"src":"2504:2:9"},"returnParameters":{"id":1307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1311,"src":"2545:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1305,"name":"string","nodeType":"ElementaryTypeName","src":"2545:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2544:15:9"},"scope":1848,"src":"2491:98:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2008],"body":{"id":1320,"nodeType":"Block","src":"2773:31:9","statements":[{"expression":{"id":1318,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"2790:7:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1317,"id":1319,"nodeType":"Return","src":"2783:14:9"}]},"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"2595:102:9","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":1321,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2711:6:9","nodeType":"FunctionDefinition","overrides":{"id":1314,"nodeType":"OverrideSpecifier","overrides":[],"src":"2740:8:9"},"parameters":{"id":1313,"nodeType":"ParameterList","parameters":[],"src":"2717:2:9"},"returnParameters":{"id":1317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1321,"src":"2758:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1315,"name":"string","nodeType":"ElementaryTypeName","src":"2758:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2757:15:9"},"scope":1848,"src":"2702:102:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2014],"body":{"id":1330,"nodeType":"Block","src":"3493:26:9","statements":[{"expression":{"hexValue":"3138","id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3510:2:9","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":1327,"id":1329,"nodeType":"Return","src":"3503:9:9"}]},"documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"2810:613:9","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":1331,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3437:8:9","nodeType":"FunctionDefinition","overrides":{"id":1324,"nodeType":"OverrideSpecifier","overrides":[],"src":"3468:8:9"},"parameters":{"id":1323,"nodeType":"ParameterList","parameters":[],"src":"3445:2:9"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1331,"src":"3486:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1325,"name":"uint8","nodeType":"ElementaryTypeName","src":"3486:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3485:7:9"},"scope":1848,"src":"3428:91:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1875],"body":{"id":1340,"nodeType":"Block","src":"3649:36:9","statements":[{"expression":{"id":1338,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"3666:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1337,"id":1339,"nodeType":"Return","src":"3659:19:9"}]},"documentation":{"id":1332,"nodeType":"StructuredDocumentation","src":"3525:49:9","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":1341,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3588:11:9","nodeType":"FunctionDefinition","overrides":{"id":1334,"nodeType":"OverrideSpecifier","overrides":[],"src":"3622:8:9"},"parameters":{"id":1333,"nodeType":"ParameterList","parameters":[],"src":"3599:2:9"},"returnParameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1341,"src":"3640:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3639:9:9"},"scope":1848,"src":"3579:106:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1883],"body":{"id":1354,"nodeType":"Block","src":"3826:42:9","statements":[{"expression":{"baseExpression":{"id":1350,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"3843:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1352,"indexExpression":{"id":1351,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"3853:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3843:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1349,"id":1353,"nodeType":"Return","src":"3836:25:9"}]},"documentation":{"id":1342,"nodeType":"StructuredDocumentation","src":"3691:47:9","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":1355,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3752:9:9","nodeType":"FunctionDefinition","overrides":{"id":1346,"nodeType":"OverrideSpecifier","overrides":[],"src":"3799:8:9"},"parameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"account","nameLocation":"3770:7:9","nodeType":"VariableDeclaration","scope":1355,"src":"3762:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1343,"name":"address","nodeType":"ElementaryTypeName","src":"3762:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3761:17:9"},"returnParameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1355,"src":"3817:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"3817:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3816:9:9"},"scope":1848,"src":"3743:125:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1893],"body":{"id":1379,"nodeType":"Block","src":"4149:104:9","statements":[{"assignments":[1367],"declarations":[{"constant":false,"id":1367,"mutability":"mutable","name":"owner","nameLocation":"4167:5:9","nodeType":"VariableDeclaration","scope":1379,"src":"4159:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1366,"name":"address","nodeType":"ElementaryTypeName","src":"4159:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1370,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1368,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"4175:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4175:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4159:28:9"},{"expression":{"arguments":[{"id":1372,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"4207:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1373,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"4214:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1374,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"4218:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1371,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"4197:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4197:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1376,"nodeType":"ExpressionStatement","src":"4197:28:9"},{"expression":{"hexValue":"74727565","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4242:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1365,"id":1378,"nodeType":"Return","src":"4235:11:9"}]},"documentation":{"id":1356,"nodeType":"StructuredDocumentation","src":"3874:185:9","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":1380,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4073:8:9","nodeType":"FunctionDefinition","overrides":{"id":1362,"nodeType":"OverrideSpecifier","overrides":[],"src":"4125:8:9"},"parameters":{"id":1361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1358,"mutability":"mutable","name":"to","nameLocation":"4090:2:9","nodeType":"VariableDeclaration","scope":1380,"src":"4082:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1357,"name":"address","nodeType":"ElementaryTypeName","src":"4082:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1360,"mutability":"mutable","name":"amount","nameLocation":"4102:6:9","nodeType":"VariableDeclaration","scope":1380,"src":"4094:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1359,"name":"uint256","nodeType":"ElementaryTypeName","src":"4094:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4081:28:9"},"returnParameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1380,"src":"4143:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1363,"name":"bool","nodeType":"ElementaryTypeName","src":"4143:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4142:6:9"},"scope":1848,"src":"4064:189:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1903],"body":{"id":1397,"nodeType":"Block","src":"4409:51:9","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1391,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"4426:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1393,"indexExpression":{"id":1392,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"4438:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:18:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1395,"indexExpression":{"id":1394,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"4445:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1390,"id":1396,"nodeType":"Return","src":"4419:34:9"}]},"documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"4259:47:9","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":1398,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"4320:9:9","nodeType":"FunctionDefinition","overrides":{"id":1387,"nodeType":"OverrideSpecifier","overrides":[],"src":"4382:8:9"},"parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"mutability":"mutable","name":"owner","nameLocation":"4338:5:9","nodeType":"VariableDeclaration","scope":1398,"src":"4330:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"4330:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"spender","nameLocation":"4353:7:9","nodeType":"VariableDeclaration","scope":1398,"src":"4345:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"4345:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4329:32:9"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"4400:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4400:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4399:9:9"},"scope":1848,"src":"4311:149:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1913],"body":{"id":1422,"nodeType":"Block","src":"4857:108:9","statements":[{"assignments":[1410],"declarations":[{"constant":false,"id":1410,"mutability":"mutable","name":"owner","nameLocation":"4875:5:9","nodeType":"VariableDeclaration","scope":1422,"src":"4867:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1409,"name":"address","nodeType":"ElementaryTypeName","src":"4867:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1413,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1411,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"4883:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4883:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4867:28:9"},{"expression":{"arguments":[{"id":1415,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"4914:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1416,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"4921:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1417,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"4930:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1414,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"4905:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4905:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1419,"nodeType":"ExpressionStatement","src":"4905:32:9"},{"expression":{"hexValue":"74727565","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4954:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1408,"id":1421,"nodeType":"Return","src":"4947:11:9"}]},"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"4466:297:9","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":1423,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4777:7:9","nodeType":"FunctionDefinition","overrides":{"id":1405,"nodeType":"OverrideSpecifier","overrides":[],"src":"4833:8:9"},"parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"spender","nameLocation":"4793:7:9","nodeType":"VariableDeclaration","scope":1423,"src":"4785:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1400,"name":"address","nodeType":"ElementaryTypeName","src":"4785:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"amount","nameLocation":"4810:6:9","nodeType":"VariableDeclaration","scope":1423,"src":"4802:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1402,"name":"uint256","nodeType":"ElementaryTypeName","src":"4802:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4784:33:9"},"returnParameters":{"id":1408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1423,"src":"4851:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1406,"name":"bool","nodeType":"ElementaryTypeName","src":"4851:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4850:6:9"},"scope":1848,"src":"4768:197:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1925],"body":{"id":1455,"nodeType":"Block","src":"5660:153:9","statements":[{"assignments":[1437],"declarations":[{"constant":false,"id":1437,"mutability":"mutable","name":"spender","nameLocation":"5678:7:9","nodeType":"VariableDeclaration","scope":1455,"src":"5670:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1436,"name":"address","nodeType":"ElementaryTypeName","src":"5670:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1440,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1438,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"5688:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5688:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5670:30:9"},{"expression":{"arguments":[{"id":1442,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"5726:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1443,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"5732:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1444,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"5741:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1441,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"5710:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5710:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1446,"nodeType":"ExpressionStatement","src":"5710:38:9"},{"expression":{"arguments":[{"id":1448,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"5768:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1449,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"5774:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1450,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"5778:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1447,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"5758:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5758:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1452,"nodeType":"ExpressionStatement","src":"5758:27:9"},{"expression":{"hexValue":"74727565","id":1453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5802:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1435,"id":1454,"nodeType":"Return","src":"5795:11:9"}]},"documentation":{"id":1424,"nodeType":"StructuredDocumentation","src":"4971:551:9","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":1456,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5536:12:9","nodeType":"FunctionDefinition","overrides":{"id":1432,"nodeType":"OverrideSpecifier","overrides":[],"src":"5636:8:9"},"parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1426,"mutability":"mutable","name":"from","nameLocation":"5566:4:9","nodeType":"VariableDeclaration","scope":1456,"src":"5558:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1425,"name":"address","nodeType":"ElementaryTypeName","src":"5558:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"to","nameLocation":"5588:2:9","nodeType":"VariableDeclaration","scope":1456,"src":"5580:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1427,"name":"address","nodeType":"ElementaryTypeName","src":"5580:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"amount","nameLocation":"5608:6:9","nodeType":"VariableDeclaration","scope":1456,"src":"5600:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1429,"name":"uint256","nodeType":"ElementaryTypeName","src":"5600:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5548:72:9"},"returnParameters":{"id":1435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1456,"src":"5654:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1433,"name":"bool","nodeType":"ElementaryTypeName","src":"5654:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5653:6:9"},"scope":1848,"src":"5527:286:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1484,"nodeType":"Block","src":"6302:140:9","statements":[{"assignments":[1467],"declarations":[{"constant":false,"id":1467,"mutability":"mutable","name":"owner","nameLocation":"6320:5:9","nodeType":"VariableDeclaration","scope":1484,"src":"6312:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1466,"name":"address","nodeType":"ElementaryTypeName","src":"6312:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1470,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1468,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"6328:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6328:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6312:28:9"},{"expression":{"arguments":[{"id":1472,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"6359:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1473,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"6366:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1475,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"6385:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1476,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"6392:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1474,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"6375:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6375:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1478,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"6403:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6375:38:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1471,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"6350:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6350:64:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1481,"nodeType":"ExpressionStatement","src":"6350:64:9"},{"expression":{"hexValue":"74727565","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1465,"id":1483,"nodeType":"Return","src":"6424:11:9"}]},"documentation":{"id":1457,"nodeType":"StructuredDocumentation","src":"5819:384:9","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":1485,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6217:17:9","nodeType":"FunctionDefinition","parameters":{"id":1462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1459,"mutability":"mutable","name":"spender","nameLocation":"6243:7:9","nodeType":"VariableDeclaration","scope":1485,"src":"6235:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1458,"name":"address","nodeType":"ElementaryTypeName","src":"6235:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1461,"mutability":"mutable","name":"addedValue","nameLocation":"6260:10:9","nodeType":"VariableDeclaration","scope":1485,"src":"6252:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"6252:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6234:37:9"},"returnParameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1485,"src":"6296:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1463,"name":"bool","nodeType":"ElementaryTypeName","src":"6296:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6295:6:9"},"scope":1848,"src":"6208:234:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1525,"nodeType":"Block","src":"7028:328:9","statements":[{"assignments":[1496],"declarations":[{"constant":false,"id":1496,"mutability":"mutable","name":"owner","nameLocation":"7046:5:9","nodeType":"VariableDeclaration","scope":1525,"src":"7038:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"7038:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1499,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1497,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"7054:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7054:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7038:28:9"},{"assignments":[1501],"declarations":[{"constant":false,"id":1501,"mutability":"mutable","name":"currentAllowance","nameLocation":"7084:16:9","nodeType":"VariableDeclaration","scope":1525,"src":"7076:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"7076:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1506,"initialValue":{"arguments":[{"id":1503,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"7113:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1504,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"7120:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1502,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"7103:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7103:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7076:52:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1508,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"7146:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1509,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"7166:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7146:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7183:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":1507,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7138:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7138:85:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1513,"nodeType":"ExpressionStatement","src":"7138:85:9"},{"id":1522,"nodeType":"UncheckedBlock","src":"7233:95:9","statements":[{"expression":{"arguments":[{"id":1515,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"7266:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1516,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"7273:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1517,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"7282:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1518,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"7301:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7282:34:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1514,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"7257:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7257:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"ExpressionStatement","src":"7257:60:9"}]},{"expression":{"hexValue":"74727565","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7345:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1494,"id":1524,"nodeType":"Return","src":"7338:11:9"}]},"documentation":{"id":1486,"nodeType":"StructuredDocumentation","src":"6448:476:9","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":1526,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6938:17:9","nodeType":"FunctionDefinition","parameters":{"id":1491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1488,"mutability":"mutable","name":"spender","nameLocation":"6964:7:9","nodeType":"VariableDeclaration","scope":1526,"src":"6956:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1487,"name":"address","nodeType":"ElementaryTypeName","src":"6956:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1490,"mutability":"mutable","name":"subtractedValue","nameLocation":"6981:15:9","nodeType":"VariableDeclaration","scope":1526,"src":"6973:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1489,"name":"uint256","nodeType":"ElementaryTypeName","src":"6973:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6955:42:9"},"returnParameters":{"id":1494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1526,"src":"7022:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1492,"name":"bool","nodeType":"ElementaryTypeName","src":"7022:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7021:6:9"},"scope":1848,"src":"6929:427:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1602,"nodeType":"Block","src":"7918:710:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1537,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"7936:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7952:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7944:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1538,"name":"address","nodeType":"ElementaryTypeName","src":"7944:7:9","typeDescriptions":{}}},"id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7944:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7936:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7956:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":1536,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7928:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7928:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1545,"nodeType":"ExpressionStatement","src":"7928:68:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1547,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"8014:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8028:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8020:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1548,"name":"address","nodeType":"ElementaryTypeName","src":"8020:7:9","typeDescriptions":{}}},"id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8020:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8014:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":1553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8032:37:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":1546,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8006:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8006:64:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1555,"nodeType":"ExpressionStatement","src":"8006:64:9"},{"expression":{"arguments":[{"id":1557,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"8102:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1558,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"8108:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1559,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"8112:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1556,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"8081:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8081:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1561,"nodeType":"ExpressionStatement","src":"8081:38:9"},{"assignments":[1563],"declarations":[{"constant":false,"id":1563,"mutability":"mutable","name":"fromBalance","nameLocation":"8138:11:9","nodeType":"VariableDeclaration","scope":1602,"src":"8130:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1562,"name":"uint256","nodeType":"ElementaryTypeName","src":"8130:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1567,"initialValue":{"baseExpression":{"id":1564,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8152:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1566,"indexExpression":{"id":1565,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"8162:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8152:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8130:37:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1569,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"8185:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1570,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"8200:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8185:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8208:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":1568,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8177:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8177:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1574,"nodeType":"ExpressionStatement","src":"8177:72:9"},{"id":1589,"nodeType":"UncheckedBlock","src":"8259:273:9","statements":[{"expression":{"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1575,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8283:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1577,"indexExpression":{"id":1576,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"8293:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8283:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1578,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"8301:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1579,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"8315:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8301:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8283:38:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1582,"nodeType":"ExpressionStatement","src":"8283:38:9"},{"expression":{"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1583,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8498:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1585,"indexExpression":{"id":1584,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"8508:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8498:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1586,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"8515:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8498:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1588,"nodeType":"ExpressionStatement","src":"8498:23:9"}]},{"eventCall":{"arguments":[{"id":1591,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"8556:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1592,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"8562:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1593,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"8566:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1590,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"8547:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8547:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1595,"nodeType":"EmitStatement","src":"8542:31:9"},{"expression":{"arguments":[{"id":1597,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"8604:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1598,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"8610:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1599,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"8614:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1596,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"8584:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1601,"nodeType":"ExpressionStatement","src":"8584:37:9"}]},"documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"7362:443:9","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":1603,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7819:9:9","nodeType":"FunctionDefinition","parameters":{"id":1534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"from","nameLocation":"7846:4:9","nodeType":"VariableDeclaration","scope":1603,"src":"7838:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1528,"name":"address","nodeType":"ElementaryTypeName","src":"7838:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"to","nameLocation":"7868:2:9","nodeType":"VariableDeclaration","scope":1603,"src":"7860:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1530,"name":"address","nodeType":"ElementaryTypeName","src":"7860:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1533,"mutability":"mutable","name":"amount","nameLocation":"7888:6:9","nodeType":"VariableDeclaration","scope":1603,"src":"7880:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1532,"name":"uint256","nodeType":"ElementaryTypeName","src":"7880:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7828:72:9"},"returnParameters":{"id":1535,"nodeType":"ParameterList","parameters":[],"src":"7918:0:9"},"scope":1848,"src":"7810:818:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1659,"nodeType":"Block","src":"8969:470:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1612,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"8987:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8998:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1613,"name":"address","nodeType":"ElementaryTypeName","src":"8998:7:9","typeDescriptions":{}}},"id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8998:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8987:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9010:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":1611,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8979:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8979:65:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1620,"nodeType":"ExpressionStatement","src":"8979:65:9"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9084:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9076:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1622,"name":"address","nodeType":"ElementaryTypeName","src":"9076:7:9","typeDescriptions":{}}},"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9076:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1626,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"9088:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1627,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"9097:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1621,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"9055:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9055:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1629,"nodeType":"ExpressionStatement","src":"9055:49:9"},{"expression":{"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1630,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"9115:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1631,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"9131:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9115:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1633,"nodeType":"ExpressionStatement","src":"9115:22:9"},{"id":1640,"nodeType":"UncheckedBlock","src":"9147:175:9","statements":[{"expression":{"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1634,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"9283:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1636,"indexExpression":{"id":1635,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"9293:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9283:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1637,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"9305:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9283:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1639,"nodeType":"ExpressionStatement","src":"9283:28:9"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9353:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9345:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1642,"name":"address","nodeType":"ElementaryTypeName","src":"9345:7:9","typeDescriptions":{}}},"id":1645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9345:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1646,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"9357:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1647,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"9366:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1641,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"9336:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9336:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1649,"nodeType":"EmitStatement","src":"9331:42:9"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9404:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1651,"name":"address","nodeType":"ElementaryTypeName","src":"9404:7:9","typeDescriptions":{}}},"id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9404:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1655,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"9416:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1656,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"9425:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1650,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"9384:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9384:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1658,"nodeType":"ExpressionStatement","src":"9384:48:9"}]},"documentation":{"id":1604,"nodeType":"StructuredDocumentation","src":"8634:265:9","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":1660,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8913:5:9","nodeType":"FunctionDefinition","parameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1606,"mutability":"mutable","name":"account","nameLocation":"8927:7:9","nodeType":"VariableDeclaration","scope":1660,"src":"8919:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1605,"name":"address","nodeType":"ElementaryTypeName","src":"8919:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1608,"mutability":"mutable","name":"amount","nameLocation":"8944:6:9","nodeType":"VariableDeclaration","scope":1660,"src":"8936:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1607,"name":"uint256","nodeType":"ElementaryTypeName","src":"8936:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8918:33:9"},"returnParameters":{"id":1610,"nodeType":"ParameterList","parameters":[],"src":"8969:0:9"},"scope":1848,"src":"8904:535:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1731,"nodeType":"Block","src":"9824:594:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1669,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"9842:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9861:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9853:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"9853:7:9","typeDescriptions":{}}},"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9853:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9842:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9865:35:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":1668,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9834:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9834:67:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1677,"nodeType":"ExpressionStatement","src":"9834:67:9"},{"expression":{"arguments":[{"id":1679,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"9933:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9950:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9942:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1680,"name":"address","nodeType":"ElementaryTypeName","src":"9942:7:9","typeDescriptions":{}}},"id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9942:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1684,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"9954:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1678,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"9912:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9912:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1686,"nodeType":"ExpressionStatement","src":"9912:49:9"},{"assignments":[1688],"declarations":[{"constant":false,"id":1688,"mutability":"mutable","name":"accountBalance","nameLocation":"9980:14:9","nodeType":"VariableDeclaration","scope":1731,"src":"9972:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1692,"initialValue":{"baseExpression":{"id":1689,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"9997:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1691,"indexExpression":{"id":1690,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"10007:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9997:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9972:43:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1694,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"10033:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1695,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"10051:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10033:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10059:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":1693,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10025:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10025:71:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1699,"nodeType":"ExpressionStatement","src":"10025:71:9"},{"id":1712,"nodeType":"UncheckedBlock","src":"10106:194:9","statements":[{"expression":{"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1700,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10130:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1702,"indexExpression":{"id":1701,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"10140:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10130:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1703,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"10151:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1704,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"10168:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10151:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10130:44:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1707,"nodeType":"ExpressionStatement","src":"10130:44:9"},{"expression":{"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1708,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"10267:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1709,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"10283:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10267:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1711,"nodeType":"ExpressionStatement","src":"10267:22:9"}]},{"eventCall":{"arguments":[{"id":1714,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"10324:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10341:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10333:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1715,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:9","typeDescriptions":{}}},"id":1718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10333:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1719,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"10345:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1713,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"10315:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10315:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1721,"nodeType":"EmitStatement","src":"10310:42:9"},{"expression":{"arguments":[{"id":1723,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"10383:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10392:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1724,"name":"address","nodeType":"ElementaryTypeName","src":"10392:7:9","typeDescriptions":{}}},"id":1727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10392:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1728,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"10404:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1722,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"10363:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10363:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1730,"nodeType":"ExpressionStatement","src":"10363:48:9"}]},"documentation":{"id":1661,"nodeType":"StructuredDocumentation","src":"9445:309:9","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1732,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9768:5:9","nodeType":"FunctionDefinition","parameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"account","nameLocation":"9782:7:9","nodeType":"VariableDeclaration","scope":1732,"src":"9774:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1662,"name":"address","nodeType":"ElementaryTypeName","src":"9774:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"amount","nameLocation":"9799:6:9","nodeType":"VariableDeclaration","scope":1732,"src":"9791:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"9791:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9773:33:9"},"returnParameters":{"id":1667,"nodeType":"ParameterList","parameters":[],"src":"9824:0:9"},"scope":1848,"src":"9759:659:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1776,"nodeType":"Block","src":"10954:257:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1743,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"10972:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10989:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10981:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"10981:7:9","typeDescriptions":{}}},"id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10981:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10972:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10993:38:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1742,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10964:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10964:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1751,"nodeType":"ExpressionStatement","src":"10964:68:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1753,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"11050:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11069:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11061:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1754,"name":"address","nodeType":"ElementaryTypeName","src":"11061:7:9","typeDescriptions":{}}},"id":1757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11061:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11050:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11073:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1752,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11042:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1761,"nodeType":"ExpressionStatement","src":"11042:68:9"},{"expression":{"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1762,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"11121:11:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1765,"indexExpression":{"id":1763,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"11133:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11121:18:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1766,"indexExpression":{"id":1764,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"11140:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11121:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1767,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"11151:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11121:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1769,"nodeType":"ExpressionStatement","src":"11121:36:9"},{"eventCall":{"arguments":[{"id":1771,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"11181:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1772,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"11188:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1773,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"11197:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1770,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"11172:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11172:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1775,"nodeType":"EmitStatement","src":"11167:37:9"}]},"documentation":{"id":1733,"nodeType":"StructuredDocumentation","src":"10424:412:9","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":1777,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10850:8:9","nodeType":"FunctionDefinition","parameters":{"id":1740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1735,"mutability":"mutable","name":"owner","nameLocation":"10876:5:9","nodeType":"VariableDeclaration","scope":1777,"src":"10868:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1734,"name":"address","nodeType":"ElementaryTypeName","src":"10868:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1737,"mutability":"mutable","name":"spender","nameLocation":"10899:7:9","nodeType":"VariableDeclaration","scope":1777,"src":"10891:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1736,"name":"address","nodeType":"ElementaryTypeName","src":"10891:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1739,"mutability":"mutable","name":"amount","nameLocation":"10924:6:9","nodeType":"VariableDeclaration","scope":1777,"src":"10916:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1738,"name":"uint256","nodeType":"ElementaryTypeName","src":"10916:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10858:78:9"},"returnParameters":{"id":1741,"nodeType":"ParameterList","parameters":[],"src":"10954:0:9"},"scope":1848,"src":"10841:370:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1819,"nodeType":"Block","src":"11612:321:9","statements":[{"assignments":[1788],"declarations":[{"constant":false,"id":1788,"mutability":"mutable","name":"currentAllowance","nameLocation":"11630:16:9","nodeType":"VariableDeclaration","scope":1819,"src":"11622:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"11622:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1793,"initialValue":{"arguments":[{"id":1790,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"11659:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1791,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"11666:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1789,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"11649:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11649:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11622:52:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1794,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"11688:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11713:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1796,"name":"uint256","nodeType":"ElementaryTypeName","src":"11713:7:9","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1795,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11708:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11708:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"11708:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11688:37:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1818,"nodeType":"IfStatement","src":"11684:243:9","trueBody":{"id":1817,"nodeType":"Block","src":"11727:200:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1802,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"11749:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1803,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"11769:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11749:26:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11777:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":1801,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11741:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11741:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1807,"nodeType":"ExpressionStatement","src":"11741:68:9"},{"id":1816,"nodeType":"UncheckedBlock","src":"11823:94:9","statements":[{"expression":{"arguments":[{"id":1809,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"11860:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1810,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"11867:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1811,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"11876:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1812,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"11895:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11876:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1808,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"11851:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:51:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1815,"nodeType":"ExpressionStatement","src":"11851:51:9"}]}]}}]},"documentation":{"id":1778,"nodeType":"StructuredDocumentation","src":"11217:270:9","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11501:15:9","nodeType":"FunctionDefinition","parameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1780,"mutability":"mutable","name":"owner","nameLocation":"11534:5:9","nodeType":"VariableDeclaration","scope":1820,"src":"11526:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1779,"name":"address","nodeType":"ElementaryTypeName","src":"11526:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1782,"mutability":"mutable","name":"spender","nameLocation":"11557:7:9","nodeType":"VariableDeclaration","scope":1820,"src":"11549:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"11549:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1784,"mutability":"mutable","name":"amount","nameLocation":"11582:6:9","nodeType":"VariableDeclaration","scope":1820,"src":"11574:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1783,"name":"uint256","nodeType":"ElementaryTypeName","src":"11574:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11516:78:9"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[],"src":"11612:0:9"},"scope":1848,"src":"11492:441:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1830,"nodeType":"Block","src":"12636:2:9","statements":[]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"11939:573:9","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1831,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12526:20:9","nodeType":"FunctionDefinition","parameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"from","nameLocation":"12564:4:9","nodeType":"VariableDeclaration","scope":1831,"src":"12556:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"12556:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"to","nameLocation":"12586:2:9","nodeType":"VariableDeclaration","scope":1831,"src":"12578:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1824,"name":"address","nodeType":"ElementaryTypeName","src":"12578:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"amount","nameLocation":"12606:6:9","nodeType":"VariableDeclaration","scope":1831,"src":"12598:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1826,"name":"uint256","nodeType":"ElementaryTypeName","src":"12598:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12546:72:9"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[],"src":"12636:0:9"},"scope":1848,"src":"12517:121:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1841,"nodeType":"Block","src":"13344:2:9","statements":[]},"documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"12644:577:9","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1842,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"13235:19:9","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"from","nameLocation":"13272:4:9","nodeType":"VariableDeclaration","scope":1842,"src":"13264:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1833,"name":"address","nodeType":"ElementaryTypeName","src":"13264:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1836,"mutability":"mutable","name":"to","nameLocation":"13294:2:9","nodeType":"VariableDeclaration","scope":1842,"src":"13286:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"13286:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"amount","nameLocation":"13314:6:9","nodeType":"VariableDeclaration","scope":1842,"src":"13306:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1837,"name":"uint256","nodeType":"ElementaryTypeName","src":"13306:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13254:72:9"},"returnParameters":{"id":1840,"nodeType":"ParameterList","parameters":[],"src":"13344:0:9"},"scope":1848,"src":"13226:120:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1843,"nodeType":"StructuredDocumentation","src":"13352:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1847,"mutability":"mutable","name":"__gap","nameLocation":"13631:5:9","nodeType":"VariableDeclaration","scope":1848,"src":"13611:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage","typeString":"uint256[45]"},"typeName":{"baseType":{"id":1844,"name":"uint256","nodeType":"ElementaryTypeName","src":"13611:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1846,"length":{"hexValue":"3435","id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13619:2:9","typeDescriptions":{"typeIdentifier":"t_rational_45_by_1","typeString":"int_const 45"},"value":"45"},"nodeType":"ArrayTypeName","src":"13611:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage_ptr","typeString":"uint256[45]"}},"visibility":"private"}],"scope":1849,"src":"1480:12159:9","usedErrors":[]}],"src":"105:13535:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[1926]},"id":1927,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1850,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:10"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1851,"nodeType":"StructuredDocumentation","src":"131:70:10","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1926,"linearizedBaseContracts":[1926],"name":"IERC20Upgradeable","nameLocation":"212:17:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"236:158:10","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":1860,"name":"Transfer","nameLocation":"405:8:10","nodeType":"EventDefinition","parameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:10","nodeType":"VariableDeclaration","scope":1860,"src":"414:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1853,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1856,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:10","nodeType":"VariableDeclaration","scope":1860,"src":"436:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1855,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1858,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:10","nodeType":"VariableDeclaration","scope":1860,"src":"456:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:10"},"src":"399:72:10"},{"anonymous":false,"documentation":{"id":1861,"nodeType":"StructuredDocumentation","src":"477:148:10","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":1869,"name":"Approval","nameLocation":"636:8:10","nodeType":"EventDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:10","nodeType":"VariableDeclaration","scope":1869,"src":"645:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1862,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1865,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:10","nodeType":"VariableDeclaration","scope":1869,"src":"668:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1867,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:10","nodeType":"VariableDeclaration","scope":1869,"src":"693:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1866,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:10"},"src":"630:78:10"},{"documentation":{"id":1870,"nodeType":"StructuredDocumentation","src":"714:66:10","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1875,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:10","nodeType":"FunctionDefinition","parameters":{"id":1871,"nodeType":"ParameterList","parameters":[],"src":"805:2:10"},"returnParameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1875,"src":"831:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1872,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:10"},"scope":1926,"src":"785:55:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1876,"nodeType":"StructuredDocumentation","src":"846:72:10","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1883,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:10","nodeType":"FunctionDefinition","parameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1878,"mutability":"mutable","name":"account","nameLocation":"950:7:10","nodeType":"VariableDeclaration","scope":1883,"src":"942:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1877,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:10"},"returnParameters":{"id":1882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1883,"src":"982:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1880,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:10"},"scope":1926,"src":"923:68:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1884,"nodeType":"StructuredDocumentation","src":"997:202:10","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1893,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:10","nodeType":"FunctionDefinition","parameters":{"id":1889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"to","nameLocation":"1230:2:10","nodeType":"VariableDeclaration","scope":1893,"src":"1222:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"amount","nameLocation":"1242:6:10","nodeType":"VariableDeclaration","scope":1893,"src":"1234:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:10"},"returnParameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1893,"src":"1268:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1890,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:10"},"scope":1926,"src":"1204:70:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1894,"nodeType":"StructuredDocumentation","src":"1280:264:10","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1903,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:10","nodeType":"FunctionDefinition","parameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"owner","nameLocation":"1576:5:10","nodeType":"VariableDeclaration","scope":1903,"src":"1568:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1895,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"spender","nameLocation":"1591:7:10","nodeType":"VariableDeclaration","scope":1903,"src":"1583:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1897,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:10"},"returnParameters":{"id":1902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1903,"src":"1623:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:10"},"scope":1926,"src":"1549:83:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1904,"nodeType":"StructuredDocumentation","src":"1638:642:10","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1913,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:10","nodeType":"FunctionDefinition","parameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"spender","nameLocation":"2310:7:10","nodeType":"VariableDeclaration","scope":1913,"src":"2302:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1905,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1908,"mutability":"mutable","name":"amount","nameLocation":"2327:6:10","nodeType":"VariableDeclaration","scope":1913,"src":"2319:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1907,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:10"},"returnParameters":{"id":1912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1913,"src":"2353:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1910,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:10"},"scope":1926,"src":"2285:74:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1914,"nodeType":"StructuredDocumentation","src":"2365:287:10","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1925,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:10","nodeType":"FunctionDefinition","parameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"from","nameLocation":"2696:4:10","nodeType":"VariableDeclaration","scope":1925,"src":"2688:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1915,"name":"address","nodeType":"ElementaryTypeName","src":"2688:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"to","nameLocation":"2718:2:10","nodeType":"VariableDeclaration","scope":1925,"src":"2710:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1917,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"amount","nameLocation":"2738:6:10","nodeType":"VariableDeclaration","scope":1925,"src":"2730:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1919,"name":"uint256","nodeType":"ElementaryTypeName","src":"2730:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:72:10"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1925,"src":"2769:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1922,"name":"bool","nodeType":"ElementaryTypeName","src":"2769:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2768:6:10"},"scope":1926,"src":"2657:118:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1927,"src":"202:2575:10","usedErrors":[]}],"src":"106:2672:10"},"id":10},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"ContextUpgradeable":[2341],"ERC20BurnableUpgradeable":[1990],"ERC20Upgradeable":[1848],"IERC20MetadataUpgradeable":[2015],"IERC20Upgradeable":[1926],"Initializable":[973]},"id":1991,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1928,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"124:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"../ERC20Upgradeable.sol","id":1929,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":1849,"src":"149:33:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../../utils/ContextUpgradeable.sol","id":1930,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":2342,"src":"183:47:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":1931,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":974,"src":"231:48:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1933,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"536:13:11"},"id":1934,"nodeType":"InheritanceSpecifier","src":"536:13:11"},{"baseName":{"id":1935,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":2341,"src":"551:18:11"},"id":1936,"nodeType":"InheritanceSpecifier","src":"551:18:11"},{"baseName":{"id":1937,"name":"ERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"571:16:11"},"id":1938,"nodeType":"InheritanceSpecifier","src":"571:16:11"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1932,"nodeType":"StructuredDocumentation","src":"281:208:11","text":" @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."},"fullyImplemented":true,"id":1990,"linearizedBaseContracts":[1990,1848,2015,1926,2341,973],"name":"ERC20BurnableUpgradeable","nameLocation":"508:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1943,"nodeType":"Block","src":"652:7:11","statements":[]},"id":1944,"implemented":true,"kind":"function","modifiers":[{"id":1941,"kind":"modifierInvocation","modifierName":{"id":1940,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"635:16:11"},"nodeType":"ModifierInvocation","src":"635:16:11"}],"name":"__ERC20Burnable_init","nameLocation":"603:20:11","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[],"src":"623:2:11"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[],"src":"652:0:11"},"scope":1990,"src":"594:65:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1949,"nodeType":"Block","src":"733:7:11","statements":[]},"id":1950,"implemented":true,"kind":"function","modifiers":[{"id":1947,"kind":"modifierInvocation","modifierName":{"id":1946,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"716:16:11"},"nodeType":"ModifierInvocation","src":"716:16:11"}],"name":"__ERC20Burnable_init_unchained","nameLocation":"674:30:11","nodeType":"FunctionDefinition","parameters":{"id":1945,"nodeType":"ParameterList","parameters":[],"src":"704:2:11"},"returnParameters":{"id":1948,"nodeType":"ParameterList","parameters":[],"src":"733:0:11"},"scope":1990,"src":"665:75:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1962,"nodeType":"Block","src":"893:44:11","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1957,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"909:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"909:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1959,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"923:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1956,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"903:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"903:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1961,"nodeType":"ExpressionStatement","src":"903:27:11"}]},"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"745:98:11","text":" @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."},"functionSelector":"42966c68","id":1963,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"857:4:11","nodeType":"FunctionDefinition","parameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"amount","nameLocation":"870:6:11","nodeType":"VariableDeclaration","scope":1963,"src":"862:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1952,"name":"uint256","nodeType":"ElementaryTypeName","src":"862:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"861:16:11"},"returnParameters":{"id":1955,"nodeType":"ParameterList","parameters":[],"src":"893:0:11"},"scope":1990,"src":"848:89:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1983,"nodeType":"Block","src":"1309:95:11","statements":[{"expression":{"arguments":[{"id":1972,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"1335:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1973,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"1344:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1344:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1975,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"1358:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1971,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"1319:15:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1319:46:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1977,"nodeType":"ExpressionStatement","src":"1319:46:11"},{"expression":{"arguments":[{"id":1979,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"1381:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1980,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"1390:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1978,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"1375:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1375:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1982,"nodeType":"ExpressionStatement","src":"1375:22:11"}]},"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"943:295:11","text":" @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."},"functionSelector":"79cc6790","id":1984,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1252:8:11","nodeType":"FunctionDefinition","parameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"account","nameLocation":"1269:7:11","nodeType":"VariableDeclaration","scope":1984,"src":"1261:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1965,"name":"address","nodeType":"ElementaryTypeName","src":"1261:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1968,"mutability":"mutable","name":"amount","nameLocation":"1286:6:11","nodeType":"VariableDeclaration","scope":1984,"src":"1278:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1260:33:11"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[],"src":"1309:0:11"},"scope":1990,"src":"1243:161:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1985,"nodeType":"StructuredDocumentation","src":"1410:254:11","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1989,"mutability":"mutable","name":"__gap","nameLocation":"1689:5:11","nodeType":"VariableDeclaration","scope":1990,"src":"1669:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1986,"name":"uint256","nodeType":"ElementaryTypeName","src":"1669:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1988,"length":{"hexValue":"3530","id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:2:11","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1669:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1991,"src":"490:1207:11","usedErrors":[]}],"src":"124:1574:11"},"id":11},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","exportedSymbols":{"IERC20MetadataUpgradeable":[2015],"IERC20Upgradeable":[1926]},"id":2016,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1992,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":1993,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2016,"sourceUnit":1927,"src":"135:34:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1995,"name":"IERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1926,"src":"327:17:12"},"id":1996,"nodeType":"InheritanceSpecifier","src":"327:17:12"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1994,"nodeType":"StructuredDocumentation","src":"171:116:12","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":2015,"linearizedBaseContracts":[2015,1926],"name":"IERC20MetadataUpgradeable","nameLocation":"298:25:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1997,"nodeType":"StructuredDocumentation","src":"351:54:12","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2002,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"419:4:12","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[],"src":"423:2:12"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2002,"src":"449:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1999,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"448:15:12"},"scope":2015,"src":"410:54:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2003,"nodeType":"StructuredDocumentation","src":"470:56:12","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":2008,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"540:6:12","nodeType":"FunctionDefinition","parameters":{"id":2004,"nodeType":"ParameterList","parameters":[],"src":"546:2:12"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2008,"src":"572:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2005,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"571:15:12"},"scope":2015,"src":"531:56:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2009,"nodeType":"StructuredDocumentation","src":"593:65:12","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":2014,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"672:8:12","nodeType":"FunctionDefinition","parameters":{"id":2010,"nodeType":"ParameterList","parameters":[],"src":"680:2:12"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2014,"src":"706:5:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2011,"name":"uint8","nodeType":"ElementaryTypeName","src":"706:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"705:7:12"},"scope":2015,"src":"663:50:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2016,"src":"288:427:12","usedErrors":[]}],"src":"110:606:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299]},"id":2300,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2017,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:13"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2018,"nodeType":"StructuredDocumentation","src":"126:67:13","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2299,"linearizedBaseContracts":[2299],"name":"AddressUpgradeable","nameLocation":"202:18:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":2032,"nodeType":"Block","src":"1252:254:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2026,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"1476:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1476:12:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1476:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2025,"id":2031,"nodeType":"Return","src":"1469:30:13"}]},"documentation":{"id":2019,"nodeType":"StructuredDocumentation","src":"227:954:13","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2033,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:13","nodeType":"FunctionDefinition","parameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"account","nameLocation":"1214:7:13","nodeType":"VariableDeclaration","scope":2033,"src":"1206:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2020,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:13"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2033,"src":"1246:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2023,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:13"},"scope":2299,"src":"1186:320:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2066,"nodeType":"Block","src":"2494:241:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2044,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2299","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2299","typeString":"library AddressUpgradeable"}],"id":2043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2042,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:13","typeDescriptions":{}}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2512:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2512:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2047,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"2537:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2041,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2504:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2051,"nodeType":"ExpressionStatement","src":"2504:73:13"},{"assignments":[2053,null],"declarations":[{"constant":false,"id":2053,"mutability":"mutable","name":"success","nameLocation":"2594:7:13","nodeType":"VariableDeclaration","scope":2066,"src":"2589:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2052,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2060,"initialValue":{"arguments":[{"hexValue":"","id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2054,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"2607:9:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2607:14:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2056,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"2629:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2607:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:13"},{"expression":{"arguments":[{"id":2062,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"2658:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2061,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2650:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2065,"nodeType":"ExpressionStatement","src":"2650:78:13"}]},"documentation":{"id":2034,"nodeType":"StructuredDocumentation","src":"1512:906:13","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2067,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:13","nodeType":"FunctionDefinition","parameters":{"id":2039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2036,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:13","nodeType":"VariableDeclaration","scope":2067,"src":"2442:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2035,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2038,"mutability":"mutable","name":"amount","nameLocation":"2477:6:13","nodeType":"VariableDeclaration","scope":2067,"src":"2469:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2037,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:13"},"returnParameters":{"id":2040,"nodeType":"ParameterList","parameters":[],"src":"2494:0:13"},"scope":2299,"src":"2423:312:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2084,"nodeType":"Block","src":"3566:96:13","statements":[{"expression":{"arguments":[{"id":2078,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2070,"src":"3605:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2079,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"3613:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2077,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2125,2169],"referencedDeclaration":2169,"src":"3583:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3583:72:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2076,"id":2083,"nodeType":"Return","src":"3576:79:13"}]},"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"2741:731:13","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2085,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:13","nodeType":"FunctionDefinition","parameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"target","nameLocation":"3507:6:13","nodeType":"VariableDeclaration","scope":2085,"src":"3499:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2069,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2072,"mutability":"mutable","name":"data","nameLocation":"3528:4:13","nodeType":"VariableDeclaration","scope":2085,"src":"3515:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2071,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:13"},"returnParameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2085,"src":"3552:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2074,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:13"},"scope":2299,"src":"3477:185:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2104,"nodeType":"Block","src":"4031:76:13","statements":[{"expression":{"arguments":[{"id":2098,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"4070:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2099,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"4078:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2101,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"4087:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2097,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2125,2169],"referencedDeclaration":2169,"src":"4048:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4048:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2096,"id":2103,"nodeType":"Return","src":"4041:59:13"}]},"documentation":{"id":2086,"nodeType":"StructuredDocumentation","src":"3668:211:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2105,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:13","nodeType":"FunctionDefinition","parameters":{"id":2093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"target","nameLocation":"3923:6:13","nodeType":"VariableDeclaration","scope":2105,"src":"3915:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2087,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2090,"mutability":"mutable","name":"data","nameLocation":"3952:4:13","nodeType":"VariableDeclaration","scope":2105,"src":"3939:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2089,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2092,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:13","nodeType":"VariableDeclaration","scope":2105,"src":"3966:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2091,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:13"},"returnParameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2105,"src":"4017:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2094,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:13"},"scope":2299,"src":"3884:223:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2124,"nodeType":"Block","src":"4612:111:13","statements":[{"expression":{"arguments":[{"id":2118,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"4651:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2119,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"4659:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"4665:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2117,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2125,2169],"referencedDeclaration":2169,"src":"4629:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4629:87:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2116,"id":2123,"nodeType":"Return","src":"4622:94:13"}]},"documentation":{"id":2106,"nodeType":"StructuredDocumentation","src":"4113:351:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2125,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:13","nodeType":"FunctionDefinition","parameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"target","nameLocation":"4517:6:13","nodeType":"VariableDeclaration","scope":2125,"src":"4509:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2107,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2110,"mutability":"mutable","name":"data","nameLocation":"4546:4:13","nodeType":"VariableDeclaration","scope":2125,"src":"4533:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2109,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"value","nameLocation":"4568:5:13","nodeType":"VariableDeclaration","scope":2125,"src":"4560:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2111,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:13"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2125,"src":"4598:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2114,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:13"},"scope":2299,"src":"4469:254:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2168,"nodeType":"Block","src":"5150:267:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2142,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2299","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2299","typeString":"library AddressUpgradeable"}],"id":2141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:13","typeDescriptions":{}}},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5168:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5168:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"5193:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2139,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5160:81:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2149,"nodeType":"ExpressionStatement","src":"5160:81:13"},{"assignments":[2151,2153],"declarations":[{"constant":false,"id":2151,"mutability":"mutable","name":"success","nameLocation":"5257:7:13","nodeType":"VariableDeclaration","scope":2168,"src":"5252:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2150,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2153,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:13","nodeType":"VariableDeclaration","scope":2168,"src":"5266:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2152,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2160,"initialValue":{"arguments":[{"id":2158,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"5319:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2154,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"5293:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5293:11:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2156,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"5312:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5293:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:13"},{"expression":{"arguments":[{"id":2162,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"5368:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2163,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"5376:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2164,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"5385:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2165,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5397:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2161,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"5341:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5341:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2138,"id":2167,"nodeType":"Return","src":"5334:76:13"}]},"documentation":{"id":2126,"nodeType":"StructuredDocumentation","src":"4729:237:13","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2169,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:13","nodeType":"FunctionDefinition","parameters":{"id":2135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2128,"mutability":"mutable","name":"target","nameLocation":"5019:6:13","nodeType":"VariableDeclaration","scope":2169,"src":"5011:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2127,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2130,"mutability":"mutable","name":"data","nameLocation":"5048:4:13","nodeType":"VariableDeclaration","scope":2169,"src":"5035:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2129,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2132,"mutability":"mutable","name":"value","nameLocation":"5070:5:13","nodeType":"VariableDeclaration","scope":2169,"src":"5062:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2131,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2134,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:13","nodeType":"VariableDeclaration","scope":2169,"src":"5085:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2133,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:13"},"returnParameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2169,"src":"5136:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2136,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:13"},"scope":2299,"src":"4971:446:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2185,"nodeType":"Block","src":"5694:97:13","statements":[{"expression":{"arguments":[{"id":2180,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"5730:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2181,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"5738:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2179,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2186,2215],"referencedDeclaration":2215,"src":"5711:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5711:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2178,"id":2184,"nodeType":"Return","src":"5704:80:13"}]},"documentation":{"id":2170,"nodeType":"StructuredDocumentation","src":"5423:166:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2186,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:13","nodeType":"FunctionDefinition","parameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"target","nameLocation":"5630:6:13","nodeType":"VariableDeclaration","scope":2186,"src":"5622:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2171,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2174,"mutability":"mutable","name":"data","nameLocation":"5651:4:13","nodeType":"VariableDeclaration","scope":2186,"src":"5638:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2173,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:13"},"returnParameters":{"id":2178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2186,"src":"5680:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2176,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:13"},"scope":2299,"src":"5594:197:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2214,"nodeType":"Block","src":"6133:168:13","statements":[{"assignments":[2199,2201],"declarations":[{"constant":false,"id":2199,"mutability":"mutable","name":"success","nameLocation":"6149:7:13","nodeType":"VariableDeclaration","scope":2214,"src":"6144:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2198,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2201,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:13","nodeType":"VariableDeclaration","scope":2214,"src":"6158:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2200,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2206,"initialValue":{"arguments":[{"id":2204,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"6203:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2202,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"6185:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:13","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6185:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:13"},{"expression":{"arguments":[{"id":2208,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"6252:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2209,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"6260:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2210,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"6269:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2211,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"6281:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2207,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"6225:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6225:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2197,"id":2213,"nodeType":"Return","src":"6218:76:13"}]},"documentation":{"id":2187,"nodeType":"StructuredDocumentation","src":"5797:173:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2215,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:13","nodeType":"FunctionDefinition","parameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2189,"mutability":"mutable","name":"target","nameLocation":"6020:6:13","nodeType":"VariableDeclaration","scope":2215,"src":"6012:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2188,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2191,"mutability":"mutable","name":"data","nameLocation":"6049:4:13","nodeType":"VariableDeclaration","scope":2215,"src":"6036:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2190,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2193,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:13","nodeType":"VariableDeclaration","scope":2215,"src":"6063:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2192,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:13"},"returnParameters":{"id":2197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2215,"src":"6119:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2195,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:13"},"scope":2299,"src":"5975:326:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2253,"nodeType":"Block","src":"6783:434:13","statements":[{"condition":{"id":2229,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"6797:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2251,"nodeType":"Block","src":"7153:58:13","statements":[{"expression":{"arguments":[{"id":2247,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7175:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2248,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"7187:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2246,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"7167:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7167:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2250,"nodeType":"ExpressionStatement","src":"7167:33:13"}]},"id":2252,"nodeType":"IfStatement","src":"6793:418:13","trueBody":{"id":2245,"nodeType":"Block","src":"6806:341:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2230,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"6824:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6824:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2242,"nodeType":"IfStatement","src":"6820:286:13","trueBody":{"id":2241,"nodeType":"Block","src":"6848:258:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2236,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"7050:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2235,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"7039:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7039:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2234,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7031:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2240,"nodeType":"ExpressionStatement","src":"7031:60:13"}]}},{"expression":{"id":2243,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"7126:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2228,"id":2244,"nodeType":"Return","src":"7119:17:13"}]}}]},"documentation":{"id":2216,"nodeType":"StructuredDocumentation","src":"6307:277:13","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2254,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:13","nodeType":"FunctionDefinition","parameters":{"id":2225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2218,"mutability":"mutable","name":"target","nameLocation":"6642:6:13","nodeType":"VariableDeclaration","scope":2254,"src":"6634:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2217,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2220,"mutability":"mutable","name":"success","nameLocation":"6663:7:13","nodeType":"VariableDeclaration","scope":2254,"src":"6658:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2219,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2222,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:13","nodeType":"VariableDeclaration","scope":2254,"src":"6680:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2221,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2224,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:13","nodeType":"VariableDeclaration","scope":2254,"src":"6713:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2223,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:13"},"returnParameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2254,"src":"6769:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2226,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:13"},"scope":2299,"src":"6589:628:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2277,"nodeType":"Block","src":"7598:135:13","statements":[{"condition":{"id":2266,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2257,"src":"7612:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2275,"nodeType":"Block","src":"7669:58:13","statements":[{"expression":{"arguments":[{"id":2271,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"7691:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2272,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"7703:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2270,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"7683:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7683:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2274,"nodeType":"ExpressionStatement","src":"7683:33:13"}]},"id":2276,"nodeType":"IfStatement","src":"7608:119:13","trueBody":{"id":2269,"nodeType":"Block","src":"7621:42:13","statements":[{"expression":{"id":2267,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"7642:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2265,"id":2268,"nodeType":"Return","src":"7635:17:13"}]}}]},"documentation":{"id":2255,"nodeType":"StructuredDocumentation","src":"7223:210:13","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2278,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:13","nodeType":"FunctionDefinition","parameters":{"id":2262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2257,"mutability":"mutable","name":"success","nameLocation":"7478:7:13","nodeType":"VariableDeclaration","scope":2278,"src":"7473:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2256,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2259,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:13","nodeType":"VariableDeclaration","scope":2278,"src":"7495:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2258,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2261,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:13","nodeType":"VariableDeclaration","scope":2278,"src":"7528:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2260,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:13"},"returnParameters":{"id":2265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2278,"src":"7584:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2263,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:13"},"scope":2299,"src":"7438:295:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2297,"nodeType":"Block","src":"7822:457:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2285,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7898:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7898:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2295,"nodeType":"Block","src":"8228:45:13","statements":[{"expression":{"arguments":[{"id":2292,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"8249:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2291,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:13","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8242:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2294,"nodeType":"ExpressionStatement","src":"8242:20:13"}]},"id":2296,"nodeType":"IfStatement","src":"7894:379:13","trueBody":{"id":2290,"nodeType":"Block","src":"7921:301:13","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:13","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:13","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:13"},"nodeType":"YulFunctionCall","src":"8120:17:13"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:13","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:13","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:13"},"nodeType":"YulFunctionCall","src":"8161:19:13"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:13"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:13"},"nodeType":"YulFunctionCall","src":"8154:44:13"},"nodeType":"YulExpressionStatement","src":"8154:44:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2280,"isOffset":false,"isSlot":false,"src":"8126:10:13","valueSize":1},{"declaration":2280,"isOffset":false,"isSlot":false,"src":"8169:10:13","valueSize":1}],"id":2289,"nodeType":"InlineAssembly","src":"8070:142:13"}]}}]},"id":2298,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:13","nodeType":"FunctionDefinition","parameters":{"id":2283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:13","nodeType":"VariableDeclaration","scope":2298,"src":"7756:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2279,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2282,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:13","nodeType":"VariableDeclaration","scope":2298,"src":"7781:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2281,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:13"},"returnParameters":{"id":2284,"nodeType":"ParameterList","parameters":[],"src":"7822:0:13"},"scope":2299,"src":"7739:540:13","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2300,"src":"194:8087:13","usedErrors":[]}],"src":"101:8181:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"ContextUpgradeable":[2341],"Initializable":[973]},"id":2342,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2301,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2302,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":974,"src":"110:42:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2304,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"691:13:14"},"id":2305,"nodeType":"InheritanceSpecifier","src":"691:13:14"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2303,"nodeType":"StructuredDocumentation","src":"154:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2341,"linearizedBaseContracts":[2341,973],"name":"ContextUpgradeable","nameLocation":"669:18:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2310,"nodeType":"Block","src":"763:7:14","statements":[]},"id":2311,"implemented":true,"kind":"function","modifiers":[{"id":2308,"kind":"modifierInvocation","modifierName":{"id":2307,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"746:16:14"},"nodeType":"ModifierInvocation","src":"746:16:14"}],"name":"__Context_init","nameLocation":"720:14:14","nodeType":"FunctionDefinition","parameters":{"id":2306,"nodeType":"ParameterList","parameters":[],"src":"734:2:14"},"returnParameters":{"id":2309,"nodeType":"ParameterList","parameters":[],"src":"763:0:14"},"scope":2341,"src":"711:59:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2316,"nodeType":"Block","src":"838:7:14","statements":[]},"id":2317,"implemented":true,"kind":"function","modifiers":[{"id":2314,"kind":"modifierInvocation","modifierName":{"id":2313,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"821:16:14"},"nodeType":"ModifierInvocation","src":"821:16:14"}],"name":"__Context_init_unchained","nameLocation":"785:24:14","nodeType":"FunctionDefinition","parameters":{"id":2312,"nodeType":"ParameterList","parameters":[],"src":"809:2:14"},"returnParameters":{"id":2315,"nodeType":"ParameterList","parameters":[],"src":"838:0:14"},"scope":2341,"src":"776:69:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2325,"nodeType":"Block","src":"912:34:14","statements":[{"expression":{"expression":{"id":2322,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"929:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2321,"id":2324,"nodeType":"Return","src":"922:17:14"}]},"id":2326,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:14","nodeType":"FunctionDefinition","parameters":{"id":2318,"nodeType":"ParameterList","parameters":[],"src":"869:2:14"},"returnParameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2326,"src":"903:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2319,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:14"},"scope":2341,"src":"850:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2334,"nodeType":"Block","src":"1019:32:14","statements":[{"expression":{"expression":{"id":2331,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"1036:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2330,"id":2333,"nodeType":"Return","src":"1029:15:14"}]},"id":2335,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:14","nodeType":"FunctionDefinition","parameters":{"id":2327,"nodeType":"ParameterList","parameters":[],"src":"969:2:14"},"returnParameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2335,"src":"1003:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2328,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:14"},"scope":2341,"src":"952:99:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2336,"nodeType":"StructuredDocumentation","src":"1057:254:14","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2340,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:14","nodeType":"VariableDeclaration","scope":2341,"src":"1316:25:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"length":{"hexValue":"3530","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:14","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2342,"src":"651:693:14","usedErrors":[]}],"src":"86:1259:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[2401]},"id":2402,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2343,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:15"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2344,"nodeType":"StructuredDocumentation","src":"130:1148:15","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":2401,"linearizedBaseContracts":[2401],"name":"StorageSlotUpgradeable","nameLocation":"1287:22:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":2347,"members":[{"constant":false,"id":2346,"mutability":"mutable","name":"value","nameLocation":"1353:5:15","nodeType":"VariableDeclaration","scope":2347,"src":"1345:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2345,"name":"address","nodeType":"ElementaryTypeName","src":"1345:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1323:11:15","nodeType":"StructDefinition","scope":2401,"src":"1316:49:15","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":2350,"members":[{"constant":false,"id":2349,"mutability":"mutable","name":"value","nameLocation":"1405:5:15","nodeType":"VariableDeclaration","scope":2350,"src":"1400:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2348,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1378:11:15","nodeType":"StructDefinition","scope":2401,"src":"1371:46:15","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":2353,"members":[{"constant":false,"id":2352,"mutability":"mutable","name":"value","nameLocation":"1460:5:15","nodeType":"VariableDeclaration","scope":2353,"src":"1452:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2351,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1452:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1430:11:15","nodeType":"StructDefinition","scope":2401,"src":"1423:49:15","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":2356,"members":[{"constant":false,"id":2355,"mutability":"mutable","name":"value","nameLocation":"1515:5:15","nodeType":"VariableDeclaration","scope":2356,"src":"1507:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2354,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1485:11:15","nodeType":"StructDefinition","scope":2401,"src":"1478:49:15","visibility":"public"},{"body":{"id":2366,"nodeType":"Block","src":"1709:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"1771:38:15","statements":[{"nodeType":"YulAssignment","src":"1785:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"1795:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1785:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2363,"isOffset":false,"isSlot":true,"src":"1785:6:15","suffix":"slot","valueSize":1},{"declaration":2359,"isOffset":false,"isSlot":false,"src":"1795:4:15","valueSize":1}],"id":2365,"nodeType":"InlineAssembly","src":"1762:47:15"}]},"documentation":{"id":2357,"nodeType":"StructuredDocumentation","src":"1533:87:15","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2367,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1634:14:15","nodeType":"FunctionDefinition","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2359,"mutability":"mutable","name":"slot","nameLocation":"1657:4:15","nodeType":"VariableDeclaration","scope":2367,"src":"1649:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1649:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1648:14:15"},"returnParameters":{"id":2364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2363,"mutability":"mutable","name":"r","nameLocation":"1706:1:15","nodeType":"VariableDeclaration","scope":2367,"src":"1686:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":2362,"nodeType":"UserDefinedTypeName","pathNode":{"id":2361,"name":"AddressSlot","nodeType":"IdentifierPath","referencedDeclaration":2347,"src":"1686:11:15"},"referencedDeclaration":2347,"src":"1686:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2347_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1685:23:15"},"scope":2401,"src":"1625:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2377,"nodeType":"Block","src":"1997:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2059:38:15","statements":[{"nodeType":"YulAssignment","src":"2073:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2083:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2073:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2374,"isOffset":false,"isSlot":true,"src":"2073:6:15","suffix":"slot","valueSize":1},{"declaration":2370,"isOffset":false,"isSlot":false,"src":"2083:4:15","valueSize":1}],"id":2376,"nodeType":"InlineAssembly","src":"2050:47:15"}]},"documentation":{"id":2368,"nodeType":"StructuredDocumentation","src":"1821:87:15","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2378,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1922:14:15","nodeType":"FunctionDefinition","parameters":{"id":2371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2370,"mutability":"mutable","name":"slot","nameLocation":"1945:4:15","nodeType":"VariableDeclaration","scope":2378,"src":"1937:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1937:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1936:14:15"},"returnParameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"r","nameLocation":"1994:1:15","nodeType":"VariableDeclaration","scope":2378,"src":"1974:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2350_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":2373,"nodeType":"UserDefinedTypeName","pathNode":{"id":2372,"name":"BooleanSlot","nodeType":"IdentifierPath","referencedDeclaration":2350,"src":"1974:11:15"},"referencedDeclaration":2350,"src":"1974:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2350_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"1973:23:15"},"scope":2401,"src":"1913:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2388,"nodeType":"Block","src":"2285:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2347:38:15","statements":[{"nodeType":"YulAssignment","src":"2361:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2371:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2361:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2385,"isOffset":false,"isSlot":true,"src":"2361:6:15","suffix":"slot","valueSize":1},{"declaration":2381,"isOffset":false,"isSlot":false,"src":"2371:4:15","valueSize":1}],"id":2387,"nodeType":"InlineAssembly","src":"2338:47:15"}]},"documentation":{"id":2379,"nodeType":"StructuredDocumentation","src":"2109:87:15","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2389,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2210:14:15","nodeType":"FunctionDefinition","parameters":{"id":2382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2381,"mutability":"mutable","name":"slot","nameLocation":"2233:4:15","nodeType":"VariableDeclaration","scope":2389,"src":"2225:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:14:15"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"r","nameLocation":"2282:1:15","nodeType":"VariableDeclaration","scope":2389,"src":"2262:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2353_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":2384,"nodeType":"UserDefinedTypeName","pathNode":{"id":2383,"name":"Bytes32Slot","nodeType":"IdentifierPath","referencedDeclaration":2353,"src":"2262:11:15"},"referencedDeclaration":2353,"src":"2262:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2353_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2261:23:15"},"scope":2401,"src":"2201:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2399,"nodeType":"Block","src":"2573:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2635:38:15","statements":[{"nodeType":"YulAssignment","src":"2649:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2659:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2649:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2396,"isOffset":false,"isSlot":true,"src":"2649:6:15","suffix":"slot","valueSize":1},{"declaration":2392,"isOffset":false,"isSlot":false,"src":"2659:4:15","valueSize":1}],"id":2398,"nodeType":"InlineAssembly","src":"2626:47:15"}]},"documentation":{"id":2390,"nodeType":"StructuredDocumentation","src":"2397:87:15","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2400,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2498:14:15","nodeType":"FunctionDefinition","parameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"slot","nameLocation":"2521:4:15","nodeType":"VariableDeclaration","scope":2400,"src":"2513:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2513:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2512:14:15"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"r","nameLocation":"2570:1:15","nodeType":"VariableDeclaration","scope":2400,"src":"2550:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2356_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":2395,"nodeType":"UserDefinedTypeName","pathNode":{"id":2394,"name":"Uint256Slot","nodeType":"IdentifierPath","referencedDeclaration":2356,"src":"2550:11:15"},"referencedDeclaration":2356,"src":"2550:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2356_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2549:23:15"},"scope":2401,"src":"2489:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2402,"src":"1279:1402:15","usedErrors":[]}],"src":"105:2577:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[3497],"StringsUpgradeable":[2576]},"id":2577,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2403,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":2404,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2577,"sourceUnit":3498,"src":"126:36:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2405,"nodeType":"StructuredDocumentation","src":"164:34:16","text":" @dev String operations."},"fullyImplemented":true,"id":2576,"linearizedBaseContracts":[2576],"name":"StringsUpgradeable","nameLocation":"207:18:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2408,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:16","nodeType":"VariableDeclaration","scope":2576,"src":"232:54:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2406,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2411,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:16","nodeType":"VariableDeclaration","scope":2576,"src":"292:43:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2409,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:16","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2458,"nodeType":"Block","src":"508:636:16","statements":[{"id":2457,"nodeType":"UncheckedBlock","src":"518:620:16","statements":[{"assignments":[2420],"declarations":[{"constant":false,"id":2420,"mutability":"mutable","name":"length","nameLocation":"550:6:16","nodeType":"VariableDeclaration","scope":2457,"src":"542:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2419,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2427,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"581:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2421,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"559:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$3497_$","typeString":"type(library MathUpgradeable)"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3334,"src":"559:21:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"559:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:16"},{"assignments":[2429],"declarations":[{"constant":false,"id":2429,"mutability":"mutable","name":"buffer","nameLocation":"619:6:16","nodeType":"VariableDeclaration","scope":2457,"src":"605:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2428,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2434,"initialValue":{"arguments":[{"id":2432,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"639:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2430,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"628:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:16"},{"assignments":[2436],"declarations":[{"constant":false,"id":2436,"mutability":"mutable","name":"ptr","nameLocation":"668:3:16","nodeType":"VariableDeclaration","scope":2457,"src":"660:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2435,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2437,"nodeType":"VariableDeclarationStatement","src":"660:11:16"},{"AST":{"nodeType":"YulBlock","src":"741:67:16","statements":[{"nodeType":"YulAssignment","src":"759:35:16","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:16","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:16"},"nodeType":"YulFunctionCall","src":"778:15:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:16"},"nodeType":"YulFunctionCall","src":"766:28:16"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2429,"isOffset":false,"isSlot":false,"src":"770:6:16","valueSize":1},{"declaration":2420,"isOffset":false,"isSlot":false,"src":"786:6:16","valueSize":1},{"declaration":2436,"isOffset":false,"isSlot":false,"src":"759:3:16","valueSize":1}],"id":2438,"nodeType":"InlineAssembly","src":"732:76:16"},{"body":{"id":2453,"nodeType":"Block","src":"834:267:16","statements":[{"expression":{"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:16","subExpression":{"id":2440,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"852:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2442,"nodeType":"ExpressionStatement","src":"852:5:16"},{"AST":{"nodeType":"YulBlock","src":"935:84:16","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:16"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:16","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:16"},"nodeType":"YulFunctionCall","src":"975:14:16"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:16"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:16"},"nodeType":"YulFunctionCall","src":"970:30:16"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:16"},"nodeType":"YulFunctionCall","src":"957:44:16"},"nodeType":"YulExpressionStatement","src":"957:44:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2408,"isOffset":false,"isSlot":false,"src":"991:8:16","valueSize":1},{"declaration":2436,"isOffset":false,"isSlot":false,"src":"965:3:16","valueSize":1},{"declaration":2414,"isOffset":false,"isSlot":false,"src":"979:5:16","valueSize":1}],"id":2443,"nodeType":"InlineAssembly","src":"926:93:16"},{"expression":{"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"1036:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2447,"nodeType":"ExpressionStatement","src":"1036:11:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"1069:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2452,"nodeType":"IfStatement","src":"1065:21:16","trueBody":{"id":2451,"nodeType":"Break","src":"1081:5:16"}}]},"condition":{"hexValue":"74727565","id":2439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2454,"nodeType":"WhileStatement","src":"821:280:16"},{"expression":{"id":2455,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"1121:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2418,"id":2456,"nodeType":"Return","src":"1114:13:16"}]}]},"documentation":{"id":2412,"nodeType":"StructuredDocumentation","src":"342:90:16","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2459,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:16","nodeType":"FunctionDefinition","parameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2414,"mutability":"mutable","name":"value","nameLocation":"463:5:16","nodeType":"VariableDeclaration","scope":2459,"src":"455:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2413,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:16"},"returnParameters":{"id":2418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2459,"src":"493:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2416,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:16"},"scope":2576,"src":"437:707:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2478,"nodeType":"Block","src":"1323:111:16","statements":[{"id":2477,"nodeType":"UncheckedBlock","src":"1333:95:16","statements":[{"expression":{"arguments":[{"id":2468,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"1376:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"1406:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2469,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"1383:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$3497_$","typeString":"type(library MathUpgradeable)"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3457,"src":"1383:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1383:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2467,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2479,2555,2575],"referencedDeclaration":2555,"src":"1364:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1364:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2466,"id":2476,"nodeType":"Return","src":"1357:60:16"}]}]},"documentation":{"id":2460,"nodeType":"StructuredDocumentation","src":"1150:94:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2479,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:16","nodeType":"FunctionDefinition","parameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"value","nameLocation":"1278:5:16","nodeType":"VariableDeclaration","scope":2479,"src":"1270:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:16"},"returnParameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2479,"src":"1308:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2464,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:16"},"scope":2576,"src":"1249:185:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2554,"nodeType":"Block","src":"1647:347:16","statements":[{"assignments":[2490],"declarations":[{"constant":false,"id":2490,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:16","nodeType":"VariableDeclaration","scope":2554,"src":"1657:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2489,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2499,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2494,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"1693:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2491,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1679:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:16"},{"expression":{"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2500,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1714:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2502,"indexExpression":{"hexValue":"30","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2505,"nodeType":"ExpressionStatement","src":"1714:15:16"},{"expression":{"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2506,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1739:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2508,"indexExpression":{"hexValue":"31","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2511,"nodeType":"ExpressionStatement","src":"1739:15:16"},{"body":{"id":2540,"nodeType":"Block","src":"1809:83:16","statements":[{"expression":{"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2526,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1823:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2528,"indexExpression":{"id":2527,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"1830:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2529,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"1835:8:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2533,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"1844:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:16","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2535,"nodeType":"ExpressionStatement","src":"1823:33:16"},{"expression":{"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"1870:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2539,"nodeType":"ExpressionStatement","src":"1870:11:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2520,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"1797:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2541,"initializationExpression":{"assignments":[2513],"declarations":[{"constant":false,"id":2513,"mutability":"mutable","name":"i","nameLocation":"1777:1:16","nodeType":"VariableDeclaration","scope":2541,"src":"1769:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2519,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2515,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"1785:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:16"},"loopExpression":{"expression":{"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:16","subExpression":{"id":2523,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"1806:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2525,"nodeType":"ExpressionStatement","src":"1804:3:16"},"nodeType":"ForStatement","src":"1764:128:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"1909:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2542,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1901:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2548,"nodeType":"ExpressionStatement","src":"1901:55:16"},{"expression":{"arguments":[{"id":2551,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1980:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2549,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:16","typeDescriptions":{}}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1973:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2488,"id":2553,"nodeType":"Return","src":"1966:21:16"}]},"documentation":{"id":2480,"nodeType":"StructuredDocumentation","src":"1440:112:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2555,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:16","nodeType":"FunctionDefinition","parameters":{"id":2485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2482,"mutability":"mutable","name":"value","nameLocation":"1586:5:16","nodeType":"VariableDeclaration","scope":2555,"src":"1578:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2481,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2484,"mutability":"mutable","name":"length","nameLocation":"1601:6:16","nodeType":"VariableDeclaration","scope":2555,"src":"1593:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2483,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:16"},"returnParameters":{"id":2488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2555,"src":"1632:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2486,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:16"},"scope":2576,"src":"1557:437:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2574,"nodeType":"Block","src":"2219:76:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2568,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"2264:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2566,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:16","typeDescriptions":{}}},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2256:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2564,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:16","typeDescriptions":{}}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2248:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2571,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"2272:15:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2563,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2479,2555,2575],"referencedDeclaration":2555,"src":"2236:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2236:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2562,"id":2573,"nodeType":"Return","src":"2229:59:16"}]},"documentation":{"id":2556,"nodeType":"StructuredDocumentation","src":"2000:141:16","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2575,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:16","nodeType":"FunctionDefinition","parameters":{"id":2559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2558,"mutability":"mutable","name":"addr","nameLocation":"2175:4:16","nodeType":"VariableDeclaration","scope":2575,"src":"2167:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2557,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:16"},"returnParameters":{"id":2562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2575,"src":"2204:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2560,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:16"},"scope":2576,"src":"2146:149:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2577,"src":"199:2098:16","usedErrors":[]}],"src":"101:2197:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2299],"ERC165Upgradeable":[2620],"IERC165Upgradeable":[2632],"Initializable":[973]},"id":2621,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2578,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:17"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":2579,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2621,"sourceUnit":2633,"src":"124:34:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2580,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2621,"sourceUnit":974,"src":"159:45:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2582,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"822:13:17"},"id":2583,"nodeType":"InheritanceSpecifier","src":"822:13:17"},{"baseName":{"id":2584,"name":"IERC165Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":2632,"src":"837:18:17"},"id":2585,"nodeType":"InheritanceSpecifier","src":"837:18:17"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2581,"nodeType":"StructuredDocumentation","src":"206:576:17","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2620,"linearizedBaseContracts":[2620,2632,973],"name":"ERC165Upgradeable","nameLocation":"801:17:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":2590,"nodeType":"Block","src":"913:7:17","statements":[]},"id":2591,"implemented":true,"kind":"function","modifiers":[{"id":2588,"kind":"modifierInvocation","modifierName":{"id":2587,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"896:16:17"},"nodeType":"ModifierInvocation","src":"896:16:17"}],"name":"__ERC165_init","nameLocation":"871:13:17","nodeType":"FunctionDefinition","parameters":{"id":2586,"nodeType":"ParameterList","parameters":[],"src":"884:2:17"},"returnParameters":{"id":2589,"nodeType":"ParameterList","parameters":[],"src":"913:0:17"},"scope":2620,"src":"862:58:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2596,"nodeType":"Block","src":"987:7:17","statements":[]},"id":2597,"implemented":true,"kind":"function","modifiers":[{"id":2594,"kind":"modifierInvocation","modifierName":{"id":2593,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":918,"src":"970:16:17"},"nodeType":"ModifierInvocation","src":"970:16:17"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:17","nodeType":"FunctionDefinition","parameters":{"id":2592,"nodeType":"ParameterList","parameters":[],"src":"958:2:17"},"returnParameters":{"id":2595,"nodeType":"ParameterList","parameters":[],"src":"987:0:17"},"scope":2620,"src":"926:68:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2631],"body":{"id":2613,"nodeType":"Block","src":"1151:75:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2606,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"1168:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2608,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"1188:18:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$2632_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$2632_$","typeString":"type(contract IERC165Upgradeable)"}],"id":2607,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1183:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$2632","typeString":"type(contract IERC165Upgradeable)"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2605,"id":2612,"nodeType":"Return","src":"1161:58:17"}]},"documentation":{"id":2598,"nodeType":"StructuredDocumentation","src":"999:56:17","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2614,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:17","nodeType":"FunctionDefinition","overrides":{"id":2602,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:17"},"parameters":{"id":2601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:17","nodeType":"VariableDeclaration","scope":2614,"src":"1087:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2599,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:17"},"returnParameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2614,"src":"1145:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2603,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:17"},"scope":2620,"src":"1060:166:17","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":2615,"nodeType":"StructuredDocumentation","src":"1232:254:17","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2619,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:17","nodeType":"VariableDeclaration","scope":2620,"src":"1491:25:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2616,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2618,"length":{"hexValue":"3530","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:17","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2621,"src":"783:736:17","usedErrors":[]}],"src":"99:1421:17"},"id":17},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[2632]},"id":2633,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2622,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:18"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2623,"nodeType":"StructuredDocumentation","src":"125:279:18","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2632,"linearizedBaseContracts":[2632],"name":"IERC165Upgradeable","nameLocation":"415:18:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2624,"nodeType":"StructuredDocumentation","src":"440:340:18","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2631,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:18","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:18","nodeType":"VariableDeclaration","scope":2631,"src":"812:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2625,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:18"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2631,"src":"855:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2628,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:18"},"scope":2632,"src":"785:76:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2633,"src":"405:458:18","usedErrors":[]}],"src":"100:764:18"},"id":18},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[3497]},"id":3498,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2634,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:19"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"128:73:19","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3497,"linearizedBaseContracts":[3497],"name":"MathUpgradeable","nameLocation":"210:15:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":2639,"members":[{"id":2636,"name":"Down","nameLocation":"256:4:19","nodeType":"EnumValue","src":"256:4:19"},{"id":2637,"name":"Up","nameLocation":"298:2:19","nodeType":"EnumValue","src":"298:2:19"},{"id":2638,"name":"Zero","nameLocation":"329:4:19","nodeType":"EnumValue","src":"329:4:19"}],"name":"Rounding","nameLocation":"237:8:19","nodeType":"EnumDefinition","src":"232:122:19"},{"body":{"id":2656,"nodeType":"Block","src":"491:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2649,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"508:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2650,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"512:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2653,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"520:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:19","trueExpression":{"id":2652,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"516:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2648,"id":2655,"nodeType":"Return","src":"501:20:19"}]},"documentation":{"id":2640,"nodeType":"StructuredDocumentation","src":"360:59:19","text":" @dev Returns the largest of two numbers."},"id":2657,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:19","nodeType":"FunctionDefinition","parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2642,"mutability":"mutable","name":"a","nameLocation":"445:1:19","nodeType":"VariableDeclaration","scope":2657,"src":"437:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2641,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2644,"mutability":"mutable","name":"b","nameLocation":"456:1:19","nodeType":"VariableDeclaration","scope":2657,"src":"448:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:19"},"returnParameters":{"id":2648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2657,"src":"482:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2646,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:19"},"scope":3497,"src":"424:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2674,"nodeType":"Block","src":"666:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2667,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"683:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2668,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"687:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2671,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"695:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:19","trueExpression":{"id":2670,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"691:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2666,"id":2673,"nodeType":"Return","src":"676:20:19"}]},"documentation":{"id":2658,"nodeType":"StructuredDocumentation","src":"534:60:19","text":" @dev Returns the smallest of two numbers."},"id":2675,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:19","nodeType":"FunctionDefinition","parameters":{"id":2663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"a","nameLocation":"620:1:19","nodeType":"VariableDeclaration","scope":2675,"src":"612:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2659,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2662,"mutability":"mutable","name":"b","nameLocation":"631:1:19","nodeType":"VariableDeclaration","scope":2675,"src":"623:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2661,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:19"},"returnParameters":{"id":2666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2675,"src":"657:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2664,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:19"},"scope":3497,"src":"599:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2697,"nodeType":"Block","src":"887:82:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2685,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"942:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2686,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2680,"src":"946:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2688,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2689,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"952:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2690,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2680,"src":"956:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2692,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2684,"id":2696,"nodeType":"Return","src":"934:28:19"}]},"documentation":{"id":2676,"nodeType":"StructuredDocumentation","src":"709:102:19","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2698,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:19","nodeType":"FunctionDefinition","parameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2678,"mutability":"mutable","name":"a","nameLocation":"841:1:19","nodeType":"VariableDeclaration","scope":2698,"src":"833:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2680,"mutability":"mutable","name":"b","nameLocation":"852:1:19","nodeType":"VariableDeclaration","scope":2698,"src":"844:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2679,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:19"},"returnParameters":{"id":2684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2698,"src":"878:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2682,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:19"},"scope":3497,"src":"816:153:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2722,"nodeType":"Block","src":"1239:123:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2708,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"1327:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2712,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"1341:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2715,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2716,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"1350:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:19","trueExpression":{"hexValue":"30","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2707,"id":2721,"nodeType":"Return","src":"1320:35:19"}]},"documentation":{"id":2699,"nodeType":"StructuredDocumentation","src":"975:188:19","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2723,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:19","nodeType":"FunctionDefinition","parameters":{"id":2704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2701,"mutability":"mutable","name":"a","nameLocation":"1193:1:19","nodeType":"VariableDeclaration","scope":2723,"src":"1185:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2700,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2703,"mutability":"mutable","name":"b","nameLocation":"1204:1:19","nodeType":"VariableDeclaration","scope":2723,"src":"1196:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:19"},"returnParameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2723,"src":"1230:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:19"},"scope":3497,"src":"1168:194:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2844,"nodeType":"Block","src":"1806:3797:19","statements":[{"id":2843,"nodeType":"UncheckedBlock","src":"1816:3781:19","statements":[{"assignments":[2736],"declarations":[{"constant":false,"id":2736,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:19","nodeType":"VariableDeclaration","scope":2843,"src":"2137:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2735,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2737,"nodeType":"VariableDeclarationStatement","src":"2137:13:19"},{"assignments":[2739],"declarations":[{"constant":false,"id":2739,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:19","nodeType":"VariableDeclaration","scope":2843,"src":"2209:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2738,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2740,"nodeType":"VariableDeclarationStatement","src":"2209:13:19"},{"AST":{"nodeType":"YulBlock","src":"2289:157:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:19"},"nodeType":"YulFunctionCall","src":"2330:6:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:19"},"nodeType":"YulFunctionCall","src":"2317:20:19"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:19","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:19"},"nodeType":"YulFunctionCall","src":"2363:9:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:19"}]},{"nodeType":"YulAssignment","src":"2389:43:19","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:19"},"nodeType":"YulFunctionCall","src":"2402:14:19"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:19"},"nodeType":"YulFunctionCall","src":"2418:13:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:19"},"nodeType":"YulFunctionCall","src":"2398:34:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:19"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2736,"isOffset":false,"isSlot":false,"src":"2354:5:19","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"2410:5:19","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"2425:5:19","valueSize":1},{"declaration":2739,"isOffset":false,"isSlot":false,"src":"2389:5:19","valueSize":1},{"declaration":2726,"isOffset":false,"isSlot":false,"src":"2324:1:19","valueSize":1},{"declaration":2726,"isOffset":false,"isSlot":false,"src":"2367:1:19","valueSize":1},{"declaration":2728,"isOffset":false,"isSlot":false,"src":"2327:1:19","valueSize":1},{"declaration":2728,"isOffset":false,"isSlot":false,"src":"2370:1:19","valueSize":1}],"id":2741,"nodeType":"InlineAssembly","src":"2280:166:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2742,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"2527:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2750,"nodeType":"IfStatement","src":"2523:75:19","trueBody":{"id":2749,"nodeType":"Block","src":"2539:59:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2745,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"2564:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2746,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"2572:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2734,"id":2748,"nodeType":"Return","src":"2557:26:19"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"2708:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2753,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"2722:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2751,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2700:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2756,"nodeType":"ExpressionStatement","src":"2700:28:19"},{"assignments":[2758],"declarations":[{"constant":false,"id":2758,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:19","nodeType":"VariableDeclaration","scope":2843,"src":"2984:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2759,"nodeType":"VariableDeclarationStatement","src":"2984:17:19"},{"AST":{"nodeType":"YulBlock","src":"3024:291:19","statements":[{"nodeType":"YulAssignment","src":"3093:38:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:19"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:19"},"nodeType":"YulFunctionCall","src":"3106:25:19"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:19"}]},{"nodeType":"YulAssignment","src":"3213:41:19","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:19"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:19"},"nodeType":"YulFunctionCall","src":"3233:20:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:19"},"nodeType":"YulFunctionCall","src":"3222:32:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:19"}]},{"nodeType":"YulAssignment","src":"3271:30:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:19"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:19"},"nodeType":"YulFunctionCall","src":"3280:21:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:19"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2730,"isOffset":false,"isSlot":false,"src":"3119:11:19","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"3247:5:19","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"3271:5:19","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"3284:5:19","valueSize":1},{"declaration":2739,"isOffset":false,"isSlot":false,"src":"3213:5:19","valueSize":1},{"declaration":2739,"isOffset":false,"isSlot":false,"src":"3226:5:19","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"3093:9:19","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"3236:9:19","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"3291:9:19","valueSize":1},{"declaration":2726,"isOffset":false,"isSlot":false,"src":"3113:1:19","valueSize":1},{"declaration":2728,"isOffset":false,"isSlot":false,"src":"3116:1:19","valueSize":1}],"id":2760,"nodeType":"InlineAssembly","src":"3015:300:19"},{"assignments":[2762],"declarations":[{"constant":false,"id":2762,"mutability":"mutable","name":"twos","nameLocation":"3630:4:19","nodeType":"VariableDeclaration","scope":2843,"src":"3622:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2761,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2770,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2763,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3637:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:19","subExpression":{"id":2764,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3653:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2768,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:19"},{"AST":{"nodeType":"YulBlock","src":"3692:362:19","statements":[{"nodeType":"YulAssignment","src":"3757:37:19","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:19"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:19"},"nodeType":"YulFunctionCall","src":"3772:22:19"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:19"}]},{"nodeType":"YulAssignment","src":"3861:25:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:19"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:19"},"nodeType":"YulFunctionCall","src":"3870:16:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:19"}]},{"nodeType":"YulAssignment","src":"4001:39:19","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:19","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:19"},"nodeType":"YulFunctionCall","src":"4017:12:19"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:19"},"nodeType":"YulFunctionCall","src":"4013:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:19"},"nodeType":"YulFunctionCall","src":"4009:31:19"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:19"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2730,"isOffset":false,"isSlot":false,"src":"3757:11:19","valueSize":1},{"declaration":2730,"isOffset":false,"isSlot":false,"src":"3776:11:19","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"3861:5:19","valueSize":1},{"declaration":2736,"isOffset":false,"isSlot":false,"src":"3874:5:19","valueSize":1},{"declaration":2762,"isOffset":false,"isSlot":false,"src":"3789:4:19","valueSize":1},{"declaration":2762,"isOffset":false,"isSlot":false,"src":"3881:4:19","valueSize":1},{"declaration":2762,"isOffset":false,"isSlot":false,"src":"4001:4:19","valueSize":1},{"declaration":2762,"isOffset":false,"isSlot":false,"src":"4024:4:19","valueSize":1},{"declaration":2762,"isOffset":false,"isSlot":false,"src":"4031:4:19","valueSize":1}],"id":2771,"nodeType":"InlineAssembly","src":"3683:371:19"},{"expression":{"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2772,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"4120:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2773,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"4129:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2774,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"4137:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2777,"nodeType":"ExpressionStatement","src":"4120:21:19"},{"assignments":[2779],"declarations":[{"constant":false,"id":2779,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:19","nodeType":"VariableDeclaration","scope":2843,"src":"4459:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2778,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2786,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2781,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"4482:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2783,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:19"},{"expression":{"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2787,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4715:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2789,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"4730:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2790,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4744:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2794,"nodeType":"ExpressionStatement","src":"4715:36:19"},{"expression":{"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2795,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4784:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2797,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"4799:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2798,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4813:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2802,"nodeType":"ExpressionStatement","src":"4784:36:19"},{"expression":{"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2803,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4854:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2805,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"4869:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2806,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4883:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2810,"nodeType":"ExpressionStatement","src":"4854:36:19"},{"expression":{"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2811,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4924:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2813,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"4939:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2814,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4953:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2818,"nodeType":"ExpressionStatement","src":"4924:36:19"},{"expression":{"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2819,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"4994:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2821,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"5009:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2822,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"5023:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2826,"nodeType":"ExpressionStatement","src":"4994:36:19"},{"expression":{"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2827,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"5065:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2829,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"5080:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2830,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"5094:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2834,"nodeType":"ExpressionStatement","src":"5065:36:19"},{"expression":{"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2835,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"5535:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2836,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"5544:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2837,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"5552:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2840,"nodeType":"ExpressionStatement","src":"5535:24:19"},{"expression":{"id":2841,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"5580:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2734,"id":2842,"nodeType":"Return","src":"5573:13:19"}]}]},"documentation":{"id":2724,"nodeType":"StructuredDocumentation","src":"1368:305:19","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2845,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:19","nodeType":"FunctionDefinition","parameters":{"id":2731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"mutability":"mutable","name":"x","nameLocation":"1711:1:19","nodeType":"VariableDeclaration","scope":2845,"src":"1703:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2728,"mutability":"mutable","name":"y","nameLocation":"1730:1:19","nodeType":"VariableDeclaration","scope":2845,"src":"1722:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2727,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:19","nodeType":"VariableDeclaration","scope":2845,"src":"1741:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2729,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:19"},"returnParameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2733,"mutability":"mutable","name":"result","nameLocation":"1798:6:19","nodeType":"VariableDeclaration","scope":2845,"src":"1790:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:19"},"scope":3497,"src":"1678:3925:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2888,"nodeType":"Block","src":"5883:189:19","statements":[{"assignments":[2861],"declarations":[{"constant":false,"id":2861,"mutability":"mutable","name":"result","nameLocation":"5901:6:19","nodeType":"VariableDeclaration","scope":2888,"src":"5893:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2860,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2867,"initialValue":{"arguments":[{"id":2863,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"5917:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2864,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"5920:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2865,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"5923:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2862,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2845,2889],"referencedDeclaration":2845,"src":"5910:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5910:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2868,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"5949:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2869,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"5961:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2639_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2637,"src":"5961:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2873,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"5983:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2874,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"5986:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2875,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"5989:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2872,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:19","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5976:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2885,"nodeType":"IfStatement","src":"5945:98:19","trueBody":{"id":2884,"nodeType":"Block","src":"6007:36:19","statements":[{"expression":{"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2880,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"6021:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2883,"nodeType":"ExpressionStatement","src":"6021:11:19"}]}},{"expression":{"id":2886,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"6059:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2859,"id":2887,"nodeType":"Return","src":"6052:13:19"}]},"documentation":{"id":2846,"nodeType":"StructuredDocumentation","src":"5609:121:19","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2889,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:19","nodeType":"FunctionDefinition","parameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2848,"mutability":"mutable","name":"x","nameLocation":"5768:1:19","nodeType":"VariableDeclaration","scope":2889,"src":"5760:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2847,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2850,"mutability":"mutable","name":"y","nameLocation":"5787:1:19","nodeType":"VariableDeclaration","scope":2889,"src":"5779:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2852,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:19","nodeType":"VariableDeclaration","scope":2889,"src":"5798:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2851,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2855,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:19","nodeType":"VariableDeclaration","scope":2889,"src":"5827:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2854,"nodeType":"UserDefinedTypeName","pathNode":{"id":2853,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2639,"src":"5827:8:19"},"referencedDeclaration":2639,"src":"5827:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:19"},"returnParameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2889,"src":"5874:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:19"},"scope":3497,"src":"5735:337:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3000,"nodeType":"Block","src":"6348:1585:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2897,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"6362:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2903,"nodeType":"IfStatement","src":"6358:45:19","trueBody":{"id":2902,"nodeType":"Block","src":"6370:33:19","statements":[{"expression":{"hexValue":"30","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2896,"id":2901,"nodeType":"Return","src":"6384:8:19"}]}},{"assignments":[2905],"declarations":[{"constant":false,"id":2905,"mutability":"mutable","name":"result","nameLocation":"7090:6:19","nodeType":"VariableDeclaration","scope":3000,"src":"7082:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2904,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2914,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2908,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7110:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2907,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3169,3205],"referencedDeclaration":3169,"src":"7105:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7105:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2912,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:19"},{"id":2999,"nodeType":"UncheckedBlock","src":"7519:408:19","statements":[{"expression":{"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2915,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7543:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2916,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7553:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7562:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2918,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7566:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2921,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2925,"nodeType":"ExpressionStatement","src":"7543:35:19"},{"expression":{"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7592:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7602:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7611:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2929,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7615:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2932,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2936,"nodeType":"ExpressionStatement","src":"7592:35:19"},{"expression":{"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7641:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2938,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7651:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2939,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7660:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2940,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7664:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2943,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2947,"nodeType":"ExpressionStatement","src":"7641:35:19"},{"expression":{"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2948,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7690:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2949,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7700:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2950,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7709:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7713:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2954,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2958,"nodeType":"ExpressionStatement","src":"7690:35:19"},{"expression":{"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2959,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7739:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7749:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2961,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7758:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2962,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7762:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2969,"nodeType":"ExpressionStatement","src":"7739:35:19"},{"expression":{"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2970,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7788:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7798:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2972,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7807:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7811:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2976,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2980,"nodeType":"ExpressionStatement","src":"7788:35:19"},{"expression":{"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2981,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7837:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7847:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2983,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7856:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2984,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7860:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2987,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2991,"nodeType":"ExpressionStatement","src":"7837:35:19"},{"expression":{"arguments":[{"id":2993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7897:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2994,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7905:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2995,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"7909:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2992,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"7893:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7893:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2896,"id":2998,"nodeType":"Return","src":"7886:30:19"}]}]},"documentation":{"id":2890,"nodeType":"StructuredDocumentation","src":"6078:208:19","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3001,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:19","nodeType":"FunctionDefinition","parameters":{"id":2893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2892,"mutability":"mutable","name":"a","nameLocation":"6313:1:19","nodeType":"VariableDeclaration","scope":3001,"src":"6305:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2891,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:19"},"returnParameters":{"id":2896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3001,"src":"6339:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2894,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:19"},"scope":3497,"src":"6291:1642:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3036,"nodeType":"Block","src":"8109:161:19","statements":[{"id":3035,"nodeType":"UncheckedBlock","src":"8119:145:19","statements":[{"assignments":[3013],"declarations":[{"constant":false,"id":3013,"mutability":"mutable","name":"result","nameLocation":"8151:6:19","nodeType":"VariableDeclaration","scope":3035,"src":"8143:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3012,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3017,"initialValue":{"arguments":[{"id":3015,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"8165:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3014,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3001,3037],"referencedDeclaration":3001,"src":"8160:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8160:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3018,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"8188:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3019,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"8198:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3020,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"8210:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2639_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2637,"src":"8210:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3023,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"8225:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3024,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"8234:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3026,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"8243:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:19","trueExpression":{"hexValue":"31","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3032,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3011,"id":3034,"nodeType":"Return","src":"8181:72:19"}]}]},"documentation":{"id":3002,"nodeType":"StructuredDocumentation","src":"7939:89:19","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3037,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:19","nodeType":"FunctionDefinition","parameters":{"id":3008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3004,"mutability":"mutable","name":"a","nameLocation":"8055:1:19","nodeType":"VariableDeclaration","scope":3037,"src":"8047:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3003,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3007,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:19","nodeType":"VariableDeclaration","scope":3037,"src":"8058:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3006,"nodeType":"UserDefinedTypeName","pathNode":{"id":3005,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2639,"src":"8058:8:19"},"referencedDeclaration":2639,"src":"8058:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:19"},"returnParameters":{"id":3011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3037,"src":"8100:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3009,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:19"},"scope":3497,"src":"8033:237:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3168,"nodeType":"Block","src":"8455:922:19","statements":[{"assignments":[3046],"declarations":[{"constant":false,"id":3046,"mutability":"mutable","name":"result","nameLocation":"8473:6:19","nodeType":"VariableDeclaration","scope":3168,"src":"8465:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3045,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3048,"initialValue":{"hexValue":"30","id":3047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:19"},{"id":3165,"nodeType":"UncheckedBlock","src":"8493:855:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3049,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8521:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3063,"nodeType":"IfStatement","src":"8517:99:19","trueBody":{"id":3062,"nodeType":"Block","src":"8539:77:19","statements":[{"expression":{"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3054,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8557:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3057,"nodeType":"ExpressionStatement","src":"8557:13:19"},{"expression":{"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3058,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"8588:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3061,"nodeType":"ExpressionStatement","src":"8588:13:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8633:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3078,"nodeType":"IfStatement","src":"8629:96:19","trueBody":{"id":3077,"nodeType":"Block","src":"8650:75:19","statements":[{"expression":{"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3069,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8668:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3072,"nodeType":"ExpressionStatement","src":"8668:12:19"},{"expression":{"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3073,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"8698:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3076,"nodeType":"ExpressionStatement","src":"8698:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3079,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8742:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3093,"nodeType":"IfStatement","src":"8738:96:19","trueBody":{"id":3092,"nodeType":"Block","src":"8759:75:19","statements":[{"expression":{"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8777:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3087,"nodeType":"ExpressionStatement","src":"8777:12:19"},{"expression":{"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3088,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"8807:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3091,"nodeType":"ExpressionStatement","src":"8807:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8851:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3108,"nodeType":"IfStatement","src":"8847:96:19","trueBody":{"id":3107,"nodeType":"Block","src":"8868:75:19","statements":[{"expression":{"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3099,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8886:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3102,"nodeType":"ExpressionStatement","src":"8886:12:19"},{"expression":{"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3103,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"8916:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3106,"nodeType":"ExpressionStatement","src":"8916:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3109,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8960:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3123,"nodeType":"IfStatement","src":"8956:93:19","trueBody":{"id":3122,"nodeType":"Block","src":"8976:73:19","statements":[{"expression":{"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"8994:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3117,"nodeType":"ExpressionStatement","src":"8994:11:19"},{"expression":{"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3118,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"9023:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3121,"nodeType":"ExpressionStatement","src":"9023:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3124,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"9066:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3138,"nodeType":"IfStatement","src":"9062:93:19","trueBody":{"id":3137,"nodeType":"Block","src":"9082:73:19","statements":[{"expression":{"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"9100:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3132,"nodeType":"ExpressionStatement","src":"9100:11:19"},{"expression":{"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3133,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"9129:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3136,"nodeType":"ExpressionStatement","src":"9129:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3139,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"9172:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3153,"nodeType":"IfStatement","src":"9168:93:19","trueBody":{"id":3152,"nodeType":"Block","src":"9188:73:19","statements":[{"expression":{"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3144,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"9206:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3147,"nodeType":"ExpressionStatement","src":"9206:11:19"},{"expression":{"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3148,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"9235:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3151,"nodeType":"ExpressionStatement","src":"9235:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"9278:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3164,"nodeType":"IfStatement","src":"9274:64:19","trueBody":{"id":3163,"nodeType":"Block","src":"9294:44:19","statements":[{"expression":{"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"9312:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3162,"nodeType":"ExpressionStatement","src":"9312:11:19"}]}}]},{"expression":{"id":3166,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"9364:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3044,"id":3167,"nodeType":"Return","src":"9357:13:19"}]},"documentation":{"id":3038,"nodeType":"StructuredDocumentation","src":"8276:113:19","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3169,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:19","nodeType":"FunctionDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3040,"mutability":"mutable","name":"value","nameLocation":"8416:5:19","nodeType":"VariableDeclaration","scope":3169,"src":"8408:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3039,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:19"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3169,"src":"8446:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3042,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:19"},"scope":3497,"src":"8394:983:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3204,"nodeType":"Block","src":"9610:165:19","statements":[{"id":3203,"nodeType":"UncheckedBlock","src":"9620:149:19","statements":[{"assignments":[3181],"declarations":[{"constant":false,"id":3181,"mutability":"mutable","name":"result","nameLocation":"9652:6:19","nodeType":"VariableDeclaration","scope":3203,"src":"9644:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3180,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3185,"initialValue":{"arguments":[{"id":3183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"9666:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3182,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3169,3205],"referencedDeclaration":3169,"src":"9661:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9661:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3186,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"9693:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3187,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"9703:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3188,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"9715:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2639_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2637,"src":"9715:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3192,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"9735:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"9744:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:19","trueExpression":{"hexValue":"31","id":3197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3179,"id":3202,"nodeType":"Return","src":"9686:72:19"}]}]},"documentation":{"id":3170,"nodeType":"StructuredDocumentation","src":"9383:142:19","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3205,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:19","nodeType":"FunctionDefinition","parameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3172,"mutability":"mutable","name":"value","nameLocation":"9552:5:19","nodeType":"VariableDeclaration","scope":3205,"src":"9544:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3175,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:19","nodeType":"VariableDeclaration","scope":3205,"src":"9559:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3174,"nodeType":"UserDefinedTypeName","pathNode":{"id":3173,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2639,"src":"9559:8:19"},"referencedDeclaration":2639,"src":"9559:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:19"},"returnParameters":{"id":3179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3205,"src":"9601:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:19"},"scope":3497,"src":"9530:245:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3333,"nodeType":"Block","src":"9962:828:19","statements":[{"assignments":[3214],"declarations":[{"constant":false,"id":3214,"mutability":"mutable","name":"result","nameLocation":"9980:6:19","nodeType":"VariableDeclaration","scope":3333,"src":"9972:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3213,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3216,"initialValue":{"hexValue":"30","id":3215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:19"},{"id":3330,"nodeType":"UncheckedBlock","src":"10000:761:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10028:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3233,"nodeType":"IfStatement","src":"10024:99:19","trueBody":{"id":3232,"nodeType":"Block","src":"10045:78:19","statements":[{"expression":{"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3222,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10063:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3227,"nodeType":"ExpressionStatement","src":"10063:15:19"},{"expression":{"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3228,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10096:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3231,"nodeType":"ExpressionStatement","src":"10096:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10140:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3250,"nodeType":"IfStatement","src":"10136:99:19","trueBody":{"id":3249,"nodeType":"Block","src":"10157:78:19","statements":[{"expression":{"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10175:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3244,"nodeType":"ExpressionStatement","src":"10175:15:19"},{"expression":{"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3245,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10208:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3248,"nodeType":"ExpressionStatement","src":"10208:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3251,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10252:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3267,"nodeType":"IfStatement","src":"10248:99:19","trueBody":{"id":3266,"nodeType":"Block","src":"10269:78:19","statements":[{"expression":{"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10287:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3261,"nodeType":"ExpressionStatement","src":"10287:15:19"},{"expression":{"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3262,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10320:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3265,"nodeType":"ExpressionStatement","src":"10320:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3268,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10364:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3284,"nodeType":"IfStatement","src":"10360:96:19","trueBody":{"id":3283,"nodeType":"Block","src":"10380:76:19","statements":[{"expression":{"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3273,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10398:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3278,"nodeType":"ExpressionStatement","src":"10398:14:19"},{"expression":{"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10430:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3282,"nodeType":"ExpressionStatement","src":"10430:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10473:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3301,"nodeType":"IfStatement","src":"10469:96:19","trueBody":{"id":3300,"nodeType":"Block","src":"10489:76:19","statements":[{"expression":{"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3290,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10507:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3295,"nodeType":"ExpressionStatement","src":"10507:14:19"},{"expression":{"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3296,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10539:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3299,"nodeType":"ExpressionStatement","src":"10539:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10582:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3318,"nodeType":"IfStatement","src":"10578:96:19","trueBody":{"id":3317,"nodeType":"Block","src":"10598:76:19","statements":[{"expression":{"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10616:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3312,"nodeType":"ExpressionStatement","src":"10616:14:19"},{"expression":{"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10648:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3316,"nodeType":"ExpressionStatement","src":"10648:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"10691:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3329,"nodeType":"IfStatement","src":"10687:64:19","trueBody":{"id":3328,"nodeType":"Block","src":"10707:44:19","statements":[{"expression":{"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10725:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3327,"nodeType":"ExpressionStatement","src":"10725:11:19"}]}}]},{"expression":{"id":3331,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"10777:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3212,"id":3332,"nodeType":"Return","src":"10770:13:19"}]},"documentation":{"id":3206,"nodeType":"StructuredDocumentation","src":"9781:114:19","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3334,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:19","nodeType":"FunctionDefinition","parameters":{"id":3209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3208,"mutability":"mutable","name":"value","nameLocation":"9923:5:19","nodeType":"VariableDeclaration","scope":3334,"src":"9915:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3207,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:19"},"returnParameters":{"id":3212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3334,"src":"9953:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:19"},"scope":3497,"src":"9900:890:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3369,"nodeType":"Block","src":"11025:165:19","statements":[{"id":3368,"nodeType":"UncheckedBlock","src":"11035:149:19","statements":[{"assignments":[3346],"declarations":[{"constant":false,"id":3346,"mutability":"mutable","name":"result","nameLocation":"11067:6:19","nodeType":"VariableDeclaration","scope":3368,"src":"11059:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3345,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3350,"initialValue":{"arguments":[{"id":3348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"11082:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3347,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3334,3370],"referencedDeclaration":3334,"src":"11076:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11076:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3351,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"11109:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3352,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"11119:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3353,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"11131:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2639_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2637,"src":"11131:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"11150:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"11159:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:19","trueExpression":{"hexValue":"31","id":3362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3365,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3344,"id":3367,"nodeType":"Return","src":"11102:71:19"}]}]},"documentation":{"id":3335,"nodeType":"StructuredDocumentation","src":"10796:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3370,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:19","nodeType":"FunctionDefinition","parameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3337,"mutability":"mutable","name":"value","nameLocation":"10967:5:19","nodeType":"VariableDeclaration","scope":3370,"src":"10959:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3340,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:19","nodeType":"VariableDeclaration","scope":3370,"src":"10974:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3339,"nodeType":"UserDefinedTypeName","pathNode":{"id":3338,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2639,"src":"10974:8:19"},"referencedDeclaration":2639,"src":"10974:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:19"},"returnParameters":{"id":3344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3370,"src":"11016:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3342,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:19"},"scope":3497,"src":"10944:246:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3456,"nodeType":"Block","src":"11504:600:19","statements":[{"assignments":[3379],"declarations":[{"constant":false,"id":3379,"mutability":"mutable","name":"result","nameLocation":"11522:6:19","nodeType":"VariableDeclaration","scope":3456,"src":"11514:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3378,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3381,"initialValue":{"hexValue":"30","id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:19"},{"id":3453,"nodeType":"UncheckedBlock","src":"11542:533:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11570:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3396,"nodeType":"IfStatement","src":"11566:98:19","trueBody":{"id":3395,"nodeType":"Block","src":"11588:76:19","statements":[{"expression":{"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11606:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3390,"nodeType":"ExpressionStatement","src":"11606:13:19"},{"expression":{"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3391,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"11637:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3394,"nodeType":"ExpressionStatement","src":"11637:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11681:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3411,"nodeType":"IfStatement","src":"11677:95:19","trueBody":{"id":3410,"nodeType":"Block","src":"11698:74:19","statements":[{"expression":{"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11716:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3405,"nodeType":"ExpressionStatement","src":"11716:12:19"},{"expression":{"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"11746:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3409,"nodeType":"ExpressionStatement","src":"11746:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11789:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3426,"nodeType":"IfStatement","src":"11785:95:19","trueBody":{"id":3425,"nodeType":"Block","src":"11806:74:19","statements":[{"expression":{"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11824:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3420,"nodeType":"ExpressionStatement","src":"11824:12:19"},{"expression":{"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3421,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"11854:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3424,"nodeType":"ExpressionStatement","src":"11854:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11897:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3441,"nodeType":"IfStatement","src":"11893:95:19","trueBody":{"id":3440,"nodeType":"Block","src":"11914:74:19","statements":[{"expression":{"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"11932:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3435,"nodeType":"ExpressionStatement","src":"11932:12:19"},{"expression":{"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"11962:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3439,"nodeType":"ExpressionStatement","src":"11962:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"12005:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3452,"nodeType":"IfStatement","src":"12001:64:19","trueBody":{"id":3451,"nodeType":"Block","src":"12021:44:19","statements":[{"expression":{"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"12039:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3450,"nodeType":"ExpressionStatement","src":"12039:11:19"}]}}]},{"expression":{"id":3454,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"12091:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3377,"id":3455,"nodeType":"Return","src":"12084:13:19"}]},"documentation":{"id":3371,"nodeType":"StructuredDocumentation","src":"11196:240:19","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3457,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:19","nodeType":"FunctionDefinition","parameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3373,"mutability":"mutable","name":"value","nameLocation":"11465:5:19","nodeType":"VariableDeclaration","scope":3457,"src":"11457:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:19"},"returnParameters":{"id":3377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3457,"src":"11495:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3375,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:19"},"scope":3497,"src":"11441:663:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3495,"nodeType":"Block","src":"12340:173:19","statements":[{"id":3494,"nodeType":"UncheckedBlock","src":"12350:157:19","statements":[{"assignments":[3469],"declarations":[{"constant":false,"id":3469,"mutability":"mutable","name":"result","nameLocation":"12382:6:19","nodeType":"VariableDeclaration","scope":3494,"src":"12374:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3468,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3473,"initialValue":{"arguments":[{"id":3471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"12398:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3470,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3457,3496],"referencedDeclaration":3457,"src":"12391:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12391:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3474,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"12425:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3475,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"12435:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3476,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"12447:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2639_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2637,"src":"12447:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3480,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"12468:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3483,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"12482:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:19","trueExpression":{"hexValue":"31","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3491,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3467,"id":3493,"nodeType":"Return","src":"12418:78:19"}]}]},"documentation":{"id":3458,"nodeType":"StructuredDocumentation","src":"12110:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3496,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:19","nodeType":"FunctionDefinition","parameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"value","nameLocation":"12282:5:19","nodeType":"VariableDeclaration","scope":3496,"src":"12274:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3459,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3463,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:19","nodeType":"VariableDeclaration","scope":3496,"src":"12289:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3462,"nodeType":"UserDefinedTypeName","pathNode":{"id":3461,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2639,"src":"12289:8:19"},"referencedDeclaration":2639,"src":"12289:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2639","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:19"},"returnParameters":{"id":3467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3496,"src":"12331:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3465,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:19"},"scope":3497,"src":"12258:255:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3498,"src":"202:12313:19","usedErrors":[]}],"src":"103:12413:19"},"id":19},"contracts/ERC20CNYG.sol":{"ast":{"absolutePath":"contracts/ERC20CNYG.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2299],"ContextUpgradeable":[2341],"ERC165Upgradeable":[2620],"ERC1967UpgradeUpgradeable":[794],"ERC20BurnableUpgradeable":[1990],"ERC20CNYG":[4182],"ERC20Upgradeable":[1848],"IAccessControlUpgradeable":[408],"IBeaconUpgradeable":[804],"IERC165Upgradeable":[2632],"IERC1822ProxiableUpgradeable":[439],"IERC1967Upgradeable":[429],"IERC20MetadataUpgradeable":[2015],"IERC20Upgradeable":[1926],"Initializable":[973],"MathUpgradeable":[3497],"PausableUpgradeable":[1236],"StorageSlotUpgradeable":[2401],"StringsUpgradeable":[2576],"UUPSUpgradeable":[1109]},"id":4183,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3499,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:20"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","id":3500,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4183,"sourceUnit":1849,"src":"57:78:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol","id":3501,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4183,"sourceUnit":1991,"src":"136:97:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":3502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4183,"sourceUnit":1237,"src":"234:78:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":3503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4183,"sourceUnit":336,"src":"313:81:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":3504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4183,"sourceUnit":974,"src":"395:75:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":3505,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4183,"sourceUnit":1110,"src":"471:77:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3506,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":973,"src":"576:13:20"},"id":3507,"nodeType":"InheritanceSpecifier","src":"576:13:20"},{"baseName":{"id":3508,"name":"ERC20Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"595:16:20"},"id":3509,"nodeType":"InheritanceSpecifier","src":"595:16:20"},{"baseName":{"id":3510,"name":"ERC20BurnableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"617:24:20"},"id":3511,"nodeType":"InheritanceSpecifier","src":"617:24:20"},{"baseName":{"id":3512,"name":"PausableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1236,"src":"647:19:20"},"id":3513,"nodeType":"InheritanceSpecifier","src":"647:19:20"},{"baseName":{"id":3514,"name":"AccessControlUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":335,"src":"672:24:20"},"id":3515,"nodeType":"InheritanceSpecifier","src":"672:24:20"},{"baseName":{"id":3516,"name":"UUPSUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":1109,"src":"702:15:20"},"id":3517,"nodeType":"InheritanceSpecifier","src":"702:15:20"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4182,"linearizedBaseContracts":[4182,1109,794,429,439,335,2620,2632,408,1236,1990,1848,2015,1926,2341,973],"name":"ERC20CNYG","nameLocation":"559:9:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"e63ab1e9","id":3522,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"748:11:20","nodeType":"VariableDeclaration","scope":4182,"src":"724:62:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"724:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"772:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":3519,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"762:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"762:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"d5391393","id":3527,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"816:11:20","nodeType":"VariableDeclaration","scope":4182,"src":"792:62:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"792:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d494e5445525f524f4c45","id":3525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"840:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""},"value":"MINTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""}],"id":3524,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"830:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"830:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"f5b541a6","id":3532,"mutability":"constant","name":"OPERATOR_ROLE","nameLocation":"884:13:20","nodeType":"VariableDeclaration","scope":4182,"src":"860:66:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"860:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4f50455241544f525f524f4c45","id":3530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:15:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""},"value":"OPERATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""}],"id":3529,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"900:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"900:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"f72c0d8b","id":3537,"mutability":"constant","name":"UPGRADER_ROLE","nameLocation":"956:13:20","nodeType":"VariableDeclaration","scope":4182,"src":"932:66:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3533,"name":"bytes32","nodeType":"ElementaryTypeName","src":"932:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"55504752414445525f524f4c45","id":3535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"982:15:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""},"value":"UPGRADER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3","typeString":"literal_string \"UPGRADER_ROLE\""}],"id":3534,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"972:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"972:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":3538,"nodeType":"StructuredDocumentation","src":"1005:15:20","text":"config item"},"functionSelector":"833f97be","id":3540,"mutability":"mutable","name":"feeStartAmount","nameLocation":"1040:14:20","nodeType":"VariableDeclaration","scope":4182,"src":"1025:29:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1025:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"bd102280","id":3542,"mutability":"mutable","name":"feeMaxAmount","nameLocation":"1089:12:20","nodeType":"VariableDeclaration","scope":4182,"src":"1074:27:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3541,"name":"uint256","nodeType":"ElementaryTypeName","src":"1074:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"978bbdb9","id":3544,"mutability":"mutable","name":"feeRate","nameLocation":"1135:7:20","nodeType":"VariableDeclaration","scope":4182,"src":"1120:22:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3543,"name":"uint256","nodeType":"ElementaryTypeName","src":"1120:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"c415b95c","id":3546,"mutability":"mutable","name":"feeCollector","nameLocation":"1172:12:20","nodeType":"VariableDeclaration","scope":4182,"src":"1157:27:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3545,"name":"address","nodeType":"ElementaryTypeName","src":"1157:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"1e7be210","id":3550,"mutability":"mutable","name":"whitelists","nameLocation":"1287:10:20","nodeType":"VariableDeclaration","scope":4182,"src":"1255:42:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3549,"keyType":{"id":3547,"name":"address","nodeType":"ElementaryTypeName","src":"1263:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1255:24:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3548,"name":"bool","nodeType":"ElementaryTypeName","src":"1274:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"16c02129","id":3554,"mutability":"mutable","name":"blacklists","nameLocation":"1376:10:20","nodeType":"VariableDeclaration","scope":4182,"src":"1344:42:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3553,"keyType":{"id":3551,"name":"address","nodeType":"ElementaryTypeName","src":"1352:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1344:24:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":3552,"name":"bool","nodeType":"ElementaryTypeName","src":"1363:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":3555,"nodeType":"StructuredDocumentation","src":"1393:9:20","text":"event"},"id":3559,"name":"FeeStartAmount","nameLocation":"1413:14:20","nodeType":"EventDefinition","parameters":{"id":3558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3557,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1436:6:20","nodeType":"VariableDeclaration","scope":3559,"src":"1428:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3556,"name":"uint256","nodeType":"ElementaryTypeName","src":"1428:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1427:16:20"},"src":"1407:37:20"},{"anonymous":false,"id":3563,"name":"FeeMaxAmount","nameLocation":"1455:12:20","nodeType":"EventDefinition","parameters":{"id":3562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3561,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1476:6:20","nodeType":"VariableDeclaration","scope":3563,"src":"1468:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3560,"name":"uint256","nodeType":"ElementaryTypeName","src":"1468:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1467:16:20"},"src":"1449:35:20"},{"anonymous":false,"id":3567,"name":"FeeRate","nameLocation":"1495:7:20","nodeType":"EventDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3565,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1511:6:20","nodeType":"VariableDeclaration","scope":3567,"src":"1503:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"1503:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1502:16:20"},"src":"1489:30:20"},{"anonymous":false,"id":3571,"name":"FeeCollector","nameLocation":"1530:12:20","nodeType":"EventDefinition","parameters":{"id":3570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3569,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1551:7:20","nodeType":"VariableDeclaration","scope":3571,"src":"1543:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3568,"name":"address","nodeType":"ElementaryTypeName","src":"1543:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1542:17:20"},"src":"1524:36:20"},{"anonymous":false,"id":3575,"name":"AddWhitelist","nameLocation":"1572:12:20","nodeType":"EventDefinition","parameters":{"id":3574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3573,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1593:7:20","nodeType":"VariableDeclaration","scope":3575,"src":"1585:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3572,"name":"address","nodeType":"ElementaryTypeName","src":"1585:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1584:17:20"},"src":"1566:36:20"},{"anonymous":false,"id":3579,"name":"RemoveWhitelist","nameLocation":"1613:15:20","nodeType":"EventDefinition","parameters":{"id":3578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3577,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1637:7:20","nodeType":"VariableDeclaration","scope":3579,"src":"1629:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3576,"name":"address","nodeType":"ElementaryTypeName","src":"1629:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1628:17:20"},"src":"1607:39:20"},{"anonymous":false,"id":3583,"name":"AddBlacklist","nameLocation":"1657:12:20","nodeType":"EventDefinition","parameters":{"id":3582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1678:7:20","nodeType":"VariableDeclaration","scope":3583,"src":"1670:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"1670:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1669:17:20"},"src":"1651:36:20"},{"anonymous":false,"id":3587,"name":"RemoveBlacklist","nameLocation":"1698:15:20","nodeType":"EventDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3585,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1722:7:20","nodeType":"VariableDeclaration","scope":3587,"src":"1714:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3584,"name":"address","nodeType":"ElementaryTypeName","src":"1714:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:17:20"},"src":"1692:39:20"},{"body":{"id":3594,"nodeType":"Block","src":"1804:39:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3591,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"1814:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1814:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3593,"nodeType":"ExpressionStatement","src":"1814:22:20"}]},"documentation":{"id":3588,"nodeType":"StructuredDocumentation","src":"1737:48:20","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":3595,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3589,"nodeType":"ParameterList","parameters":[],"src":"1801:2:20"},"returnParameters":{"id":3590,"nodeType":"ParameterList","parameters":[],"src":"1804:0:20"},"scope":4182,"src":"1790:53:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3692,"nodeType":"Block","src":"1977:701:20","statements":[{"expression":{"arguments":[{"hexValue":"434e594720546f6b656e","id":3609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2000:12:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_84e41946b321986012abe2dd359b34c39657d05c21f96e7599a2128ba434dd8a","typeString":"literal_string \"CNYG Token\""},"value":"CNYG Token"},{"hexValue":"434e5947","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2014:6:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_150210c87d6c408bbe2eb777f6ba589412e2c84ee49597cdc1a6d0bd07019434","typeString":"literal_string \"CNYG\""},"value":"CNYG"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_84e41946b321986012abe2dd359b34c39657d05c21f96e7599a2128ba434dd8a","typeString":"literal_string \"CNYG Token\""},{"typeIdentifier":"t_stringliteral_150210c87d6c408bbe2eb777f6ba589412e2c84ee49597cdc1a6d0bd07019434","typeString":"literal_string \"CNYG\""}],"id":3608,"name":"__ERC20_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"1987:12:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1987:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3612,"nodeType":"ExpressionStatement","src":"1987:34:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3613,"name":"__ERC20Burnable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"2031:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2031:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3615,"nodeType":"ExpressionStatement","src":"2031:22:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3616,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"2063:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2063:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3618,"nodeType":"ExpressionStatement","src":"2063:17:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3619,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"2090:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2090:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3621,"nodeType":"ExpressionStatement","src":"2090:22:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3622,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"2122:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2122:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3624,"nodeType":"ExpressionStatement","src":"2122:24:20"},{"expression":{"arguments":[{"id":3626,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"2168:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3627,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2188:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2188:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3625,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2157:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2157:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3630,"nodeType":"ExpressionStatement","src":"2157:42:20"},{"expression":{"arguments":[{"id":3632,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"2220:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3633,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2233:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2233:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3631,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2209:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2209:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3636,"nodeType":"ExpressionStatement","src":"2209:35:20"},{"expression":{"arguments":[{"id":3638,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"2265:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3639,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2280:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2280:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3637,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2254:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2254:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3642,"nodeType":"ExpressionStatement","src":"2254:37:20"},{"expression":{"arguments":[{"id":3644,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"2312:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3645,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2325:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2325:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3643,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2301:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2301:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3648,"nodeType":"ExpressionStatement","src":"2301:35:20"},{"expression":{"arguments":[{"id":3650,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"2357:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3651,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2372:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2372:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3649,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2346:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2346:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3654,"nodeType":"ExpressionStatement","src":"2346:37:20"},{"expression":{"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3655,"name":"feeStartAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"2394:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3656,"name":"_feeStartAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"2411:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2394:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3658,"nodeType":"ExpressionStatement","src":"2394:32:20"},{"expression":{"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3659,"name":"feeMaxAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"2436:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3660,"name":"_feeMaxAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"2451:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2436:28:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3662,"nodeType":"ExpressionStatement","src":"2436:28:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3664,"name":"_feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"2483:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2483:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3667,"name":"_feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"2500:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313030","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2511:3:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"2500:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2483:31:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420616d6f756e74","id":3671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2516:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""},"value":"invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""}],"id":3663,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2475:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2475:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3673,"nodeType":"ExpressionStatement","src":"2475:58:20"},{"expression":{"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3674,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"2543:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3675,"name":"_feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"2553:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2543:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3677,"nodeType":"ExpressionStatement","src":"2543:18:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3679,"name":"_feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"2580:13:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2605:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2597:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3680,"name":"address","nodeType":"ElementaryTypeName","src":"2597:7:20","typeDescriptions":{}}},"id":3683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2597:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2580:27:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c69642066656520636f6c6c6563746f72","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2609:23:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_75de82bf50b05703e664848a18e5dd7964da8935417af3c2493472728fa0a272","typeString":"literal_string \"invalid fee collector\""},"value":"invalid fee collector"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75de82bf50b05703e664848a18e5dd7964da8935417af3c2493472728fa0a272","typeString":"literal_string \"invalid fee collector\""}],"id":3678,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2572:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2572:61:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3687,"nodeType":"ExpressionStatement","src":"2572:61:20"},{"expression":{"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3688,"name":"feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"2643:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3689,"name":"_feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"2658:13:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2643:28:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3691,"nodeType":"ExpressionStatement","src":"2643:28:20"}]},"functionSelector":"1f8d519d","id":3693,"implemented":true,"kind":"function","modifiers":[{"id":3606,"kind":"modifierInvocation","modifierName":{"id":3605,"name":"initializer","nodeType":"IdentifierPath","referencedDeclaration":875,"src":"1965:11:20"},"nodeType":"ModifierInvocation","src":"1965:11:20"}],"name":"initialize","nameLocation":"1858:10:20","nodeType":"FunctionDefinition","parameters":{"id":3604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3597,"mutability":"mutable","name":"_feeStartAmount","nameLocation":"1877:15:20","nodeType":"VariableDeclaration","scope":3693,"src":"1869:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"1869:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3599,"mutability":"mutable","name":"_feeMaxAmount","nameLocation":"1902:13:20","nodeType":"VariableDeclaration","scope":3693,"src":"1894:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3598,"name":"uint256","nodeType":"ElementaryTypeName","src":"1894:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3601,"mutability":"mutable","name":"_feeRate","nameLocation":"1925:8:20","nodeType":"VariableDeclaration","scope":3693,"src":"1917:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3600,"name":"uint256","nodeType":"ElementaryTypeName","src":"1917:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3603,"mutability":"mutable","name":"_feeCollector","nameLocation":"1943:13:20","nodeType":"VariableDeclaration","scope":3693,"src":"1935:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3602,"name":"address","nodeType":"ElementaryTypeName","src":"1935:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1868:89:20"},"returnParameters":{"id":3607,"nodeType":"ParameterList","parameters":[],"src":"1977:0:20"},"scope":4182,"src":"1849:829:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3716,"nodeType":"Block","src":"2809:127:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3702,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"2827:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2837:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2827:11:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420616d6f756e74","id":3705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2840:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""},"value":"invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""}],"id":3701,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2819:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2819:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3707,"nodeType":"ExpressionStatement","src":"2819:38:20"},{"expression":{"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3708,"name":"feeStartAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"2867:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3709,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"2884:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2867:24:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3711,"nodeType":"ExpressionStatement","src":"2867:24:20"},{"eventCall":{"arguments":[{"id":3713,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"2921:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3712,"name":"FeeStartAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"2906:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2906:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3715,"nodeType":"EmitStatement","src":"2901:28:20"}]},"functionSelector":"897b0637","id":3717,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3698,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"2794:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3699,"kind":"modifierInvocation","modifierName":{"id":3697,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"2785:8:20"},"nodeType":"ModifierInvocation","src":"2785:23:20"}],"name":"setMinAmount","nameLocation":"2746:12:20","nodeType":"FunctionDefinition","parameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3695,"mutability":"mutable","name":"_amount","nameLocation":"2767:7:20","nodeType":"VariableDeclaration","scope":3717,"src":"2759:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3694,"name":"uint256","nodeType":"ElementaryTypeName","src":"2759:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2758:17:20"},"returnParameters":{"id":3700,"nodeType":"ParameterList","parameters":[],"src":"2809:0:20"},"scope":4182,"src":"2737:199:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3740,"nodeType":"Block","src":"3074:123:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3726,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"3092:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3102:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3092:11:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420616d6f756e74","id":3729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3105:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""},"value":"invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""}],"id":3725,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3084:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3084:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3731,"nodeType":"ExpressionStatement","src":"3084:38:20"},{"expression":{"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3732,"name":"feeMaxAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"3132:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3733,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"3147:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3132:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3735,"nodeType":"ExpressionStatement","src":"3132:22:20"},{"eventCall":{"arguments":[{"id":3737,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"3182:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3736,"name":"FeeMaxAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"3169:12:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3169:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3739,"nodeType":"EmitStatement","src":"3164:26:20"}]},"functionSelector":"cbe351ca","id":3741,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3722,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"3059:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3723,"kind":"modifierInvocation","modifierName":{"id":3721,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"3050:8:20"},"nodeType":"ModifierInvocation","src":"3050:23:20"}],"name":"setFeeMaxAmount","nameLocation":"3008:15:20","nodeType":"FunctionDefinition","parameters":{"id":3720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3719,"mutability":"mutable","name":"_amount","nameLocation":"3032:7:20","nodeType":"VariableDeclaration","scope":3741,"src":"3024:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3718,"name":"uint256","nodeType":"ElementaryTypeName","src":"3024:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3023:17:20"},"returnParameters":{"id":3724,"nodeType":"ParameterList","parameters":[],"src":"3074:0:20"},"scope":4182,"src":"2999:198:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3768,"nodeType":"Block","src":"3317:131:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3750,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"3335:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3346:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3335:12:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3753,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"3351:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313030","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3361:3:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"3351:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420616d6f756e74","id":3757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3366:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""},"value":"invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7","typeString":"literal_string \"invalid amount\""}],"id":3749,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3327:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3327:56:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3759,"nodeType":"ExpressionStatement","src":"3327:56:20"},{"expression":{"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3760,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"3393:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3761,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"3403:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3393:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3763,"nodeType":"ExpressionStatement","src":"3393:17:20"},{"eventCall":{"arguments":[{"id":3765,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"3433:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3764,"name":"FeeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"3425:7:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3425:16:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3767,"nodeType":"EmitStatement","src":"3420:21:20"}]},"functionSelector":"45596e2e","id":3769,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3746,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"3302:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3747,"kind":"modifierInvocation","modifierName":{"id":3745,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"3293:8:20"},"nodeType":"ModifierInvocation","src":"3293:23:20"}],"name":"setFeeRate","nameLocation":"3256:10:20","nodeType":"FunctionDefinition","parameters":{"id":3744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3743,"mutability":"mutable","name":"_amount","nameLocation":"3275:7:20","nodeType":"VariableDeclaration","scope":3769,"src":"3267:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3742,"name":"uint256","nodeType":"ElementaryTypeName","src":"3267:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3266:17:20"},"returnParameters":{"id":3748,"nodeType":"ParameterList","parameters":[],"src":"3317:0:20"},"scope":4182,"src":"3247:201:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3795,"nodeType":"Block","src":"3578:137:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3778,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"3596:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3616:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3608:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3779,"name":"address","nodeType":"ElementaryTypeName","src":"3608:7:20","typeDescriptions":{}}},"id":3782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3608:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3596:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206163636f756e74","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3620:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""},"value":"invalid account"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""}],"id":3777,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3588:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3588:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3786,"nodeType":"ExpressionStatement","src":"3588:50:20"},{"expression":{"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3787,"name":"feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"3648:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3788,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"3663:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3648:23:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3790,"nodeType":"ExpressionStatement","src":"3648:23:20"},{"eventCall":{"arguments":[{"id":3792,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"3699:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3791,"name":"FeeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"3686:12:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3686:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3794,"nodeType":"EmitStatement","src":"3681:27:20"}]},"functionSelector":"a42dce80","id":3796,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3774,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"3563:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3775,"kind":"modifierInvocation","modifierName":{"id":3773,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"3554:8:20"},"nodeType":"ModifierInvocation","src":"3554:23:20"}],"name":"setFeeCollector","nameLocation":"3511:15:20","nodeType":"FunctionDefinition","parameters":{"id":3772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3771,"mutability":"mutable","name":"_account","nameLocation":"3535:8:20","nodeType":"VariableDeclaration","scope":3796,"src":"3527:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3770,"name":"address","nodeType":"ElementaryTypeName","src":"3527:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3526:18:20"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[],"src":"3578:0:20"},"scope":4182,"src":"3502:213:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3832,"nodeType":"Block","src":"3864:205:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3805,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"3882:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3902:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3894:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3806,"name":"address","nodeType":"ElementaryTypeName","src":"3894:7:20","typeDescriptions":{}}},"id":3809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3894:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3882:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206163636f756e74","id":3811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3906:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""},"value":"invalid account"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""}],"id":3804,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3874:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3874:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3813,"nodeType":"ExpressionStatement","src":"3874:50:20"},{"expression":{"arguments":[{"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3942:21:20","subExpression":{"baseExpression":{"id":3815,"name":"whitelists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"3943:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3817,"indexExpression":{"id":3816,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"3954:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3943:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6163636f756e742069732077686974656c697374","id":3819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3965:22:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0221073b04a195f41ceec19e14ed481d06218ff24b4f3832a83178764d94077a","typeString":"literal_string \"account is whitelist\""},"value":"account is whitelist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0221073b04a195f41ceec19e14ed481d06218ff24b4f3832a83178764d94077a","typeString":"literal_string \"account is whitelist\""}],"id":3814,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3934:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3934:54:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3821,"nodeType":"ExpressionStatement","src":"3934:54:20"},{"expression":{"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3822,"name":"whitelists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"3998:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3824,"indexExpression":{"id":3823,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"4009:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3998:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4021:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3998:27:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3827,"nodeType":"ExpressionStatement","src":"3998:27:20"},{"eventCall":{"arguments":[{"id":3829,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"4053:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3828,"name":"AddWhitelist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"4040:12:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4040:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3831,"nodeType":"EmitStatement","src":"4035:27:20"}]},"functionSelector":"f80f5dd5","id":3833,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3801,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"3849:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3802,"kind":"modifierInvocation","modifierName":{"id":3800,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"3840:8:20"},"nodeType":"ModifierInvocation","src":"3840:23:20"}],"name":"addWhitelist","nameLocation":"3800:12:20","nodeType":"FunctionDefinition","parameters":{"id":3799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3798,"mutability":"mutable","name":"_account","nameLocation":"3821:8:20","nodeType":"VariableDeclaration","scope":3833,"src":"3813:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3797,"name":"address","nodeType":"ElementaryTypeName","src":"3813:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3812:18:20"},"returnParameters":{"id":3803,"nodeType":"ParameterList","parameters":[],"src":"3864:0:20"},"scope":4182,"src":"3791:278:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3868,"nodeType":"Block","src":"4199:212:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3842,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"4217:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4237:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4229:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3843,"name":"address","nodeType":"ElementaryTypeName","src":"4229:7:20","typeDescriptions":{}}},"id":3846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4229:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4217:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206163636f756e74","id":3848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4241:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""},"value":"invalid account"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""}],"id":3841,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4209:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4209:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3850,"nodeType":"ExpressionStatement","src":"4209:50:20"},{"expression":{"arguments":[{"baseExpression":{"id":3852,"name":"whitelists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"4277:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3854,"indexExpression":{"id":3853,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"4288:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4277:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6163636f756e74206973206e6f742077686974656c697374","id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4299:26:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_debc7eb6730b2b24e54313ab6eed030e231c0ceea33c10e18fbd589b5a03dbf6","typeString":"literal_string \"account is not whitelist\""},"value":"account is not whitelist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_debc7eb6730b2b24e54313ab6eed030e231c0ceea33c10e18fbd589b5a03dbf6","typeString":"literal_string \"account is not whitelist\""}],"id":3851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4269:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4269:57:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3857,"nodeType":"ExpressionStatement","src":"4269:57:20"},{"expression":{"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3858,"name":"whitelists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"4336:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3860,"indexExpression":{"id":3859,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"4347:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4336:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4359:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4336:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3863,"nodeType":"ExpressionStatement","src":"4336:28:20"},{"eventCall":{"arguments":[{"id":3865,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"4395:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3864,"name":"RemoveWhitelist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"4379:15:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4379:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3867,"nodeType":"EmitStatement","src":"4374:30:20"}]},"functionSelector":"78c8cda7","id":3869,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3838,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"4184:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3839,"kind":"modifierInvocation","modifierName":{"id":3837,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"4175:8:20"},"nodeType":"ModifierInvocation","src":"4175:23:20"}],"name":"removeWhitelist","nameLocation":"4132:15:20","nodeType":"FunctionDefinition","parameters":{"id":3836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3835,"mutability":"mutable","name":"_account","nameLocation":"4156:8:20","nodeType":"VariableDeclaration","scope":3869,"src":"4148:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3834,"name":"address","nodeType":"ElementaryTypeName","src":"4148:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4147:18:20"},"returnParameters":{"id":3840,"nodeType":"ParameterList","parameters":[],"src":"4199:0:20"},"scope":4182,"src":"4123:288:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3905,"nodeType":"Block","src":"4554:205:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3878,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"4572:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4592:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4584:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3879,"name":"address","nodeType":"ElementaryTypeName","src":"4584:7:20","typeDescriptions":{}}},"id":3882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4584:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4572:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206163636f756e74","id":3884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4596:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""},"value":"invalid account"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""}],"id":3877,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4564:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4564:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3886,"nodeType":"ExpressionStatement","src":"4564:50:20"},{"expression":{"arguments":[{"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4632:21:20","subExpression":{"baseExpression":{"id":3888,"name":"blacklists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"4633:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3890,"indexExpression":{"id":3889,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"4644:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4633:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6163636f756e7420697320626c61636b6c697374","id":3892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4655:22:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_290f357bdfb105b49810905e93f861548504e8146e3245a390401d62a88aafea","typeString":"literal_string \"account is blacklist\""},"value":"account is blacklist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_290f357bdfb105b49810905e93f861548504e8146e3245a390401d62a88aafea","typeString":"literal_string \"account is blacklist\""}],"id":3887,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4624:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4624:54:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3894,"nodeType":"ExpressionStatement","src":"4624:54:20"},{"expression":{"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3895,"name":"blacklists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"4688:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3897,"indexExpression":{"id":3896,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"4699:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4688:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4711:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4688:27:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3900,"nodeType":"ExpressionStatement","src":"4688:27:20"},{"eventCall":{"arguments":[{"id":3902,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"4743:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3901,"name":"AddBlacklist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"4730:12:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4730:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3904,"nodeType":"EmitStatement","src":"4725:27:20"}]},"functionSelector":"9cfe42da","id":3906,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3874,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"4539:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3875,"kind":"modifierInvocation","modifierName":{"id":3873,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"4530:8:20"},"nodeType":"ModifierInvocation","src":"4530:23:20"}],"name":"addBlacklist","nameLocation":"4490:12:20","nodeType":"FunctionDefinition","parameters":{"id":3872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3871,"mutability":"mutable","name":"_account","nameLocation":"4511:8:20","nodeType":"VariableDeclaration","scope":3906,"src":"4503:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3870,"name":"address","nodeType":"ElementaryTypeName","src":"4503:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4502:18:20"},"returnParameters":{"id":3876,"nodeType":"ParameterList","parameters":[],"src":"4554:0:20"},"scope":4182,"src":"4481:278:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3941,"nodeType":"Block","src":"4874:212:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3915,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"4892:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4912:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4904:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3916,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:20","typeDescriptions":{}}},"id":3919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4904:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4892:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964206163636f756e74","id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4916:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""},"value":"invalid account"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c","typeString":"literal_string \"invalid account\""}],"id":3914,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4884:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4884:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3923,"nodeType":"ExpressionStatement","src":"4884:50:20"},{"expression":{"arguments":[{"baseExpression":{"id":3925,"name":"blacklists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"4952:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3927,"indexExpression":{"id":3926,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"4963:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4952:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6163636f756e74206973206e6f7420626c61636b6c697374","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4974:26:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0b7c118edc538726ccbd59152e97c083b4206ea63293b28a0b77cb7081e31d2d","typeString":"literal_string \"account is not blacklist\""},"value":"account is not blacklist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0b7c118edc538726ccbd59152e97c083b4206ea63293b28a0b77cb7081e31d2d","typeString":"literal_string \"account is not blacklist\""}],"id":3924,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4944:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4944:57:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3930,"nodeType":"ExpressionStatement","src":"4944:57:20"},{"expression":{"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3931,"name":"blacklists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"5011:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3933,"indexExpression":{"id":3932,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"5022:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5011:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5034:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5011:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3936,"nodeType":"ExpressionStatement","src":"5011:28:20"},{"eventCall":{"arguments":[{"id":3938,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"5070:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3937,"name":"RemoveBlacklist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"5054:15:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5054:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3940,"nodeType":"EmitStatement","src":"5049:30:20"}]},"functionSelector":"eb91e651","id":3942,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3911,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"4859:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3912,"kind":"modifierInvocation","modifierName":{"id":3910,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"4850:8:20"},"nodeType":"ModifierInvocation","src":"4850:23:20"}],"name":"removeBlacklist","nameLocation":"4807:15:20","nodeType":"FunctionDefinition","parameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"_account","nameLocation":"4831:8:20","nodeType":"VariableDeclaration","scope":3942,"src":"4823:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3907,"name":"address","nodeType":"ElementaryTypeName","src":"4823:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4822:18:20"},"returnParameters":{"id":3913,"nodeType":"ParameterList","parameters":[],"src":"4874:0:20"},"scope":4182,"src":"4798:288:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3951,"nodeType":"Block","src":"5138:25:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3948,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"5148:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5148:8:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3950,"nodeType":"ExpressionStatement","src":"5148:8:20"}]},"functionSelector":"8456cb59","id":3952,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3945,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"5125:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3946,"kind":"modifierInvocation","modifierName":{"id":3944,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5116:8:20"},"nodeType":"ModifierInvocation","src":"5116:21:20"}],"name":"pause","nameLocation":"5101:5:20","nodeType":"FunctionDefinition","parameters":{"id":3943,"nodeType":"ParameterList","parameters":[],"src":"5106:2:20"},"returnParameters":{"id":3947,"nodeType":"ParameterList","parameters":[],"src":"5138:0:20"},"scope":4182,"src":"5092:71:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3961,"nodeType":"Block","src":"5217:27:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3958,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"5227:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5227:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3960,"nodeType":"ExpressionStatement","src":"5227:10:20"}]},"functionSelector":"3f4ba83a","id":3962,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3955,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"5204:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3956,"kind":"modifierInvocation","modifierName":{"id":3954,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5195:8:20"},"nodeType":"ModifierInvocation","src":"5195:21:20"}],"name":"unpause","nameLocation":"5178:7:20","nodeType":"FunctionDefinition","parameters":{"id":3953,"nodeType":"ParameterList","parameters":[],"src":"5185:2:20"},"returnParameters":{"id":3957,"nodeType":"ParameterList","parameters":[],"src":"5217:0:20"},"scope":4182,"src":"5169:75:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3977,"nodeType":"Block","src":"5321:34:20","statements":[{"expression":{"arguments":[{"id":3973,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"5337:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3974,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"5341:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3972,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"5331:5:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5331:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3976,"nodeType":"ExpressionStatement","src":"5331:17:20"}]},"functionSelector":"40c10f19","id":3978,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3969,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"5308:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3970,"kind":"modifierInvocation","modifierName":{"id":3968,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5299:8:20"},"nodeType":"ModifierInvocation","src":"5299:21:20"}],"name":"mint","nameLocation":"5259:4:20","nodeType":"FunctionDefinition","parameters":{"id":3967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3964,"mutability":"mutable","name":"to","nameLocation":"5272:2:20","nodeType":"VariableDeclaration","scope":3978,"src":"5264:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3963,"name":"address","nodeType":"ElementaryTypeName","src":"5264:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3966,"mutability":"mutable","name":"amount","nameLocation":"5284:6:20","nodeType":"VariableDeclaration","scope":3978,"src":"5276:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3965,"name":"uint256","nodeType":"ElementaryTypeName","src":"5276:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5263:28:20"},"returnParameters":{"id":3971,"nodeType":"ParameterList","parameters":[],"src":"5321:0:20"},"scope":4182,"src":"5250:105:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1831],"body":{"id":4006,"nodeType":"Block","src":"5465:186:20","statements":[{"expression":{"arguments":[{"id":3993,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"5502:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3994,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"5508:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3995,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"5512:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3990,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5475:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20CNYG_$4182_$","typeString":"type(contract super ERC20CNYG)"}},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1831,"src":"5475:26:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5475:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3997,"nodeType":"ExpressionStatement","src":"5475:44:20"},{"expression":{"arguments":[{"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5581:17:20","subExpression":{"baseExpression":{"id":3999,"name":"blacklists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"5582:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4001,"indexExpression":{"id":4000,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"5593:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5582:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"626c61636b6c6973746564206163636f756e742063616e6e6f74207472616e7366657220746f6b656e","id":4003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5600:43:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_69b03c7d7a99ff16bc6d3ef408ae162cb1ea1fc4ad31bbcb181add4e650e48c4","typeString":"literal_string \"blacklisted account cannot transfer token\""},"value":"blacklisted account cannot transfer token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_69b03c7d7a99ff16bc6d3ef408ae162cb1ea1fc4ad31bbcb181add4e650e48c4","typeString":"literal_string \"blacklisted account cannot transfer token\""}],"id":3998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5573:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5573:71:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4005,"nodeType":"ExpressionStatement","src":"5573:71:20"}]},"id":4007,"implemented":true,"kind":"function","modifiers":[{"id":3988,"kind":"modifierInvocation","modifierName":{"id":3987,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1158,"src":"5451:13:20"},"nodeType":"ModifierInvocation","src":"5451:13:20"}],"name":"_beforeTokenTransfer","nameLocation":"5370:20:20","nodeType":"FunctionDefinition","overrides":{"id":3986,"nodeType":"OverrideSpecifier","overrides":[],"src":"5442:8:20"},"parameters":{"id":3985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"from","nameLocation":"5399:4:20","nodeType":"VariableDeclaration","scope":4007,"src":"5391:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3979,"name":"address","nodeType":"ElementaryTypeName","src":"5391:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"to","nameLocation":"5413:2:20","nodeType":"VariableDeclaration","scope":4007,"src":"5405:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3981,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3984,"mutability":"mutable","name":"amount","nameLocation":"5425:6:20","nodeType":"VariableDeclaration","scope":4007,"src":"5417:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3983,"name":"uint256","nodeType":"ElementaryTypeName","src":"5417:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5390:42:20"},"returnParameters":{"id":3989,"nodeType":"ParameterList","parameters":[],"src":"5465:0:20"},"scope":4182,"src":"5361:290:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1103],"body":{"id":4016,"nodeType":"Block","src":"5753:2:20","statements":[]},"id":4017,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4013,"name":"UPGRADER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"5738:13:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4014,"kind":"modifierInvocation","modifierName":{"id":4012,"name":"onlyRole","nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5729:8:20"},"nodeType":"ModifierInvocation","src":"5729:23:20"}],"name":"_authorizeUpgrade","nameLocation":"5666:17:20","nodeType":"FunctionDefinition","overrides":{"id":4011,"nodeType":"OverrideSpecifier","overrides":[],"src":"5720:8:20"},"parameters":{"id":4010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4009,"mutability":"mutable","name":"newImplementation","nameLocation":"5692:17:20","nodeType":"VariableDeclaration","scope":4017,"src":"5684:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4008,"name":"address","nodeType":"ElementaryTypeName","src":"5684:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5683:27:20"},"returnParameters":{"id":4015,"nodeType":"ParameterList","parameters":[],"src":"5753:0:20"},"scope":4182,"src":"5657:98:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1331],"body":{"id":4025,"nodeType":"Block","src":"5818:25:20","statements":[{"expression":{"hexValue":"36","id":4023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5835:1:20","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"functionReturnParameters":4022,"id":4024,"nodeType":"Return","src":"5828:8:20"}]},"functionSelector":"313ce567","id":4026,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"5770:8:20","nodeType":"FunctionDefinition","overrides":{"id":4019,"nodeType":"OverrideSpecifier","overrides":[],"src":"5793:8:20"},"parameters":{"id":4018,"nodeType":"ParameterList","parameters":[],"src":"5778:2:20"},"returnParameters":{"id":4022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4026,"src":"5811:5:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4020,"name":"uint8","nodeType":"ElementaryTypeName","src":"5811:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5810:7:20"},"scope":4182,"src":"5761:82:20","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":4070,"nodeType":"Block","src":"5963:279:20","statements":[{"assignments":[4036],"declarations":[{"constant":false,"id":4036,"mutability":"mutable","name":"_fee","nameLocation":"5981:4:20","nodeType":"VariableDeclaration","scope":4070,"src":"5973:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4035,"name":"uint256","nodeType":"ElementaryTypeName","src":"5973:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4037,"nodeType":"VariableDeclarationStatement","src":"5973:12:20"},{"condition":{"baseExpression":{"id":4038,"name":"whitelists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"5999:10:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4040,"indexExpression":{"id":4039,"name":"_account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"6010:8:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5999:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4044,"nodeType":"IfStatement","src":"5995:59:20","trueBody":{"id":4043,"nodeType":"Block","src":"6021:33:20","statements":[{"expression":{"hexValue":"30","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6042:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4034,"id":4042,"nodeType":"Return","src":"6035:8:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4045,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"6067:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4046,"name":"feeStartAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"6078:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6067:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4067,"nodeType":"IfStatement","src":"6063:152:20","trueBody":{"id":4066,"nodeType":"Block","src":"6094:121:20","statements":[{"expression":{"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4048,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"6108:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4049,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"6116:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4050,"name":"feeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"6126:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6116:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4052,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6115:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":4053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6137:5:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"6115:27:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6108:34:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4056,"nodeType":"ExpressionStatement","src":"6108:34:20"},{"expression":{"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4057,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"6156:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4058,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"6163:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4059,"name":"feeMaxAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"6170:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6163:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4062,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"6200:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6163:41:20","trueExpression":{"id":4061,"name":"feeMaxAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"6185:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6156:48:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4065,"nodeType":"ExpressionStatement","src":"6156:48:20"}]}},{"expression":{"id":4068,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4036,"src":"6231:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4034,"id":4069,"nodeType":"Return","src":"6224:11:20"}]},"id":4071,"implemented":true,"kind":"function","modifiers":[],"name":"_calcFee","nameLocation":"5888:8:20","nodeType":"FunctionDefinition","parameters":{"id":4031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4028,"mutability":"mutable","name":"_account","nameLocation":"5905:8:20","nodeType":"VariableDeclaration","scope":4071,"src":"5897:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4027,"name":"address","nodeType":"ElementaryTypeName","src":"5897:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4030,"mutability":"mutable","name":"_amount","nameLocation":"5923:7:20","nodeType":"VariableDeclaration","scope":4071,"src":"5915:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4029,"name":"uint256","nodeType":"ElementaryTypeName","src":"5915:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5896:35:20"},"returnParameters":{"id":4034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4071,"src":"5954:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4032,"name":"uint256","nodeType":"ElementaryTypeName","src":"5954:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5953:9:20"},"scope":4182,"src":"5879:363:20","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[1380],"body":{"id":4121,"nodeType":"Block","src":"6349:309:20","statements":[{"assignments":[4082],"declarations":[{"constant":false,"id":4082,"mutability":"mutable","name":"owner","nameLocation":"6367:5:20","nodeType":"VariableDeclaration","scope":4121,"src":"6359:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4081,"name":"address","nodeType":"ElementaryTypeName","src":"6359:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4085,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4083,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"6375:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6375:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6359:28:20"},{"assignments":[4087],"declarations":[{"constant":false,"id":4087,"mutability":"mutable","name":"_fee","nameLocation":"6406:4:20","nodeType":"VariableDeclaration","scope":4121,"src":"6398:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4086,"name":"uint256","nodeType":"ElementaryTypeName","src":"6398:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4092,"initialValue":{"arguments":[{"id":4089,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"6422:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4090,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"6429:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4088,"name":"_calcFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"6413:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6413:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6398:38:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4093,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"6450:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6458:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6450:9:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4117,"nodeType":"Block","src":"6520:110:20","statements":[{"expression":{"arguments":[{"id":4104,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"6544:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4105,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"6551:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4106,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"6555:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4107,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"6564:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6555:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4103,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"6534:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6534:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4110,"nodeType":"ExpressionStatement","src":"6534:35:20"},{"expression":{"arguments":[{"id":4112,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"6593:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4113,"name":"feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"6600:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4114,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"6614:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4111,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"6583:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4116,"nodeType":"ExpressionStatement","src":"6583:36:20"}]},"id":4118,"nodeType":"IfStatement","src":"6446:184:20","trueBody":{"id":4102,"nodeType":"Block","src":"6461:53:20","statements":[{"expression":{"arguments":[{"id":4097,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"6485:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4098,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"6492:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4099,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"6496:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4096,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"6475:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6475:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4101,"nodeType":"ExpressionStatement","src":"6475:28:20"}]}},{"expression":{"hexValue":"74727565","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6647:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4080,"id":4120,"nodeType":"Return","src":"6640:11:20"}]},"functionSelector":"a9059cbb","id":4122,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"6281:8:20","nodeType":"FunctionDefinition","overrides":{"id":4077,"nodeType":"OverrideSpecifier","overrides":[],"src":"6325:8:20"},"parameters":{"id":4076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4073,"mutability":"mutable","name":"to","nameLocation":"6298:2:20","nodeType":"VariableDeclaration","scope":4122,"src":"6290:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4072,"name":"address","nodeType":"ElementaryTypeName","src":"6290:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4075,"mutability":"mutable","name":"amount","nameLocation":"6310:6:20","nodeType":"VariableDeclaration","scope":4122,"src":"6302:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4074,"name":"uint256","nodeType":"ElementaryTypeName","src":"6302:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6289:28:20"},"returnParameters":{"id":4080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4122,"src":"6343:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4078,"name":"bool","nodeType":"ElementaryTypeName","src":"6343:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6342:6:20"},"scope":4182,"src":"6272:386:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1456],"body":{"id":4180,"nodeType":"Block","src":"6783:355:20","statements":[{"assignments":[4135],"declarations":[{"constant":false,"id":4135,"mutability":"mutable","name":"spender","nameLocation":"6801:7:20","nodeType":"VariableDeclaration","scope":4180,"src":"6793:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4134,"name":"address","nodeType":"ElementaryTypeName","src":"6793:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4138,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4136,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"6811:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6811:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6793:30:20"},{"expression":{"arguments":[{"id":4140,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"6849:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4141,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4135,"src":"6855:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4142,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"6864:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4139,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"6833:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6833:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4144,"nodeType":"ExpressionStatement","src":"6833:38:20"},{"assignments":[4146],"declarations":[{"constant":false,"id":4146,"mutability":"mutable","name":"_fee","nameLocation":"6890:4:20","nodeType":"VariableDeclaration","scope":4180,"src":"6882:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4145,"name":"uint256","nodeType":"ElementaryTypeName","src":"6882:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4151,"initialValue":{"arguments":[{"id":4148,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"6906:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4149,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"6912:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4147,"name":"_calcFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"6897:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6897:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6882:37:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4152,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"6933:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6941:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6933:9:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4176,"nodeType":"Block","src":"7002:108:20","statements":[{"expression":{"arguments":[{"id":4163,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"7026:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4164,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4126,"src":"7032:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4165,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"7036:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4166,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"7045:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7036:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4162,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"7016:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7016:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4169,"nodeType":"ExpressionStatement","src":"7016:34:20"},{"expression":{"arguments":[{"id":4171,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"7074:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4172,"name":"feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"7080:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4173,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"7094:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4170,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"7064:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7064:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4175,"nodeType":"ExpressionStatement","src":"7064:35:20"}]},"id":4177,"nodeType":"IfStatement","src":"6929:181:20","trueBody":{"id":4161,"nodeType":"Block","src":"6944:52:20","statements":[{"expression":{"arguments":[{"id":4156,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"6968:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4157,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4126,"src":"6974:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4158,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"6978:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4155,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"6958:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6958:27:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4160,"nodeType":"ExpressionStatement","src":"6958:27:20"}]}},{"expression":{"hexValue":"74727565","id":4178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7127:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4133,"id":4179,"nodeType":"Return","src":"7120:11:20"}]},"functionSelector":"23b872dd","id":4181,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"6697:12:20","nodeType":"FunctionDefinition","overrides":{"id":4130,"nodeType":"OverrideSpecifier","overrides":[],"src":"6759:8:20"},"parameters":{"id":4129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"from","nameLocation":"6718:4:20","nodeType":"VariableDeclaration","scope":4181,"src":"6710:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4123,"name":"address","nodeType":"ElementaryTypeName","src":"6710:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4126,"mutability":"mutable","name":"to","nameLocation":"6732:2:20","nodeType":"VariableDeclaration","scope":4181,"src":"6724:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4125,"name":"address","nodeType":"ElementaryTypeName","src":"6724:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4128,"mutability":"mutable","name":"amount","nameLocation":"6744:6:20","nodeType":"VariableDeclaration","scope":4181,"src":"6736:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4127,"name":"uint256","nodeType":"ElementaryTypeName","src":"6736:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6709:42:20"},"returnParameters":{"id":4133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4181,"src":"6777:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4131,"name":"bool","nodeType":"ElementaryTypeName","src":"6777:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6776:6:20"},"scope":4182,"src":"6688:450:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4183,"src":"550:6590:20","usedErrors":[]}],"src":"32:7109:20"},"id":20}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2340,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2619,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.9._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.9._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"delegatecall","details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":793,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":793,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1108,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2340,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1130,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":1235,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610864806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a1565b60405180910390f35b6100df6100da366004610712565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461073c565b61024a565b604051601281526020016100c3565b6100df610131366004610712565b61026e565b6100f3610144366004610778565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610712565b61029f565b6100df610188366004610712565b61031f565b6100f361019b36600461079a565b61032d565b6060603680546101af906107cd565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107cd565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b9190610808565b610358565b6060603780546101af906107cd565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106ce578581018301518582016040015282016106b2565b818111156106e0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461070d57600080fd5b919050565b6000806040838503121561072557600080fd5b61072e836106f6565b946020939093013593505050565b60008060006060848603121561075157600080fd5b61075a846106f6565b9250610768602085016106f6565b9150604084013590509250925092565b60006020828403121561078a57600080fd5b610793826106f6565b9392505050565b600080604083850312156107ad57600080fd5b6107b6836106f6565b91506107c4602084016106f6565b90509250929050565b600181811c908216806107e157607f821691505b6020821081141561080257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561082957634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220059dccbed5e0928cd6d57ba7b1604259f936c1eddbc25393d4fc53150ced370564736f6c63430008080033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x864 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x808 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6CE JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72E DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x75A DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x768 PUSH1 0x20 DUP6 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x793 DUP3 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x7C4 PUSH1 0x20 DUP5 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7E1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x802 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x829 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV SWAP14 0xCC 0xBE 0xD5 0xE0 SWAP3 DUP13 0xD6 0xD5 PUSH28 0xA7B1604259F936C1EDDBC25393D4FC53150CED370564736F6C634300 ADDMOD ADDMOD STOP CALLER ","sourceMap":"1480:12159:9:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1842":{"entryPoint":null,"id":1842,"parameterSlots":3,"returnSlots":0},"@_approve_1777":{"entryPoint":856,"id":1777,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1831":{"entryPoint":null,"id":1831,"parameterSlots":3,"returnSlots":0},"@_msgSender_2326":{"entryPoint":null,"id":2326,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_1820":{"entryPoint":1148,"id":1820,"parameterSlots":3,"returnSlots":0},"@_transfer_1603":{"entryPoint":1270,"id":1603,"parameterSlots":3,"returnSlots":0},"@allowance_1398":{"entryPoint":813,"id":1398,"parameterSlots":2,"returnSlots":1},"@approve_1423":{"entryPoint":562,"id":1423,"parameterSlots":2,"returnSlots":1},"@balanceOf_1355":{"entryPoint":null,"id":1355,"parameterSlots":1,"returnSlots":1},"@decimals_1331":{"entryPoint":null,"id":1331,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1526":{"entryPoint":671,"id":1526,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1485":{"entryPoint":622,"id":1485,"parameterSlots":2,"returnSlots":1},"@name_1311":{"entryPoint":416,"id":1311,"parameterSlots":0,"returnSlots":1},"@symbol_1321":{"entryPoint":656,"id":1321,"parameterSlots":0,"returnSlots":1},"@totalSupply_1341":{"entryPoint":null,"id":1341,"parameterSlots":0,"returnSlots":1},"@transferFrom_1456":{"entryPoint":586,"id":1456,"parameterSlots":3,"returnSlots":1},"@transfer_1380":{"entryPoint":799,"id":1380,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":1782,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1912,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":1946,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":1852,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1810,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1697,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2056,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1997,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5806:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:476:21","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:21","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:21","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:21"},"nodeType":"YulFunctionCall","src":"166:21:21"},"nodeType":"YulExpressionStatement","src":"166:21:21"},{"nodeType":"YulVariableDeclaration","src":"196:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:21"},"nodeType":"YulFunctionCall","src":"210:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:21"},"nodeType":"YulFunctionCall","src":"239:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:21"},"nodeType":"YulFunctionCall","src":"232:34:21"},"nodeType":"YulExpressionStatement","src":"232:34:21"},{"nodeType":"YulVariableDeclaration","src":"275:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:21"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:21"},"nodeType":"YulFunctionCall","src":"369:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:21"},"nodeType":"YulFunctionCall","src":"365:26:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:21"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:21"},"nodeType":"YulFunctionCall","src":"403:14:21"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:21"},"nodeType":"YulFunctionCall","src":"399:23:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:21"},"nodeType":"YulFunctionCall","src":"393:30:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:21"},"nodeType":"YulFunctionCall","src":"358:66:21"},"nodeType":"YulExpressionStatement","src":"358:66:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:21"},"nodeType":"YulFunctionCall","src":"302:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:21","statements":[{"nodeType":"YulAssignment","src":"318:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:21"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:21"},"nodeType":"YulFunctionCall","src":"323:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:21","statements":[]},"src":"294:140:21"},{"body":{"nodeType":"YulBlock","src":"468:66:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"497:9:21"},{"name":"length","nodeType":"YulIdentifier","src":"508:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"493:3:21"},"nodeType":"YulFunctionCall","src":"493:22:21"},{"kind":"number","nodeType":"YulLiteral","src":"517:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"489:3:21"},"nodeType":"YulFunctionCall","src":"489:31:21"},{"kind":"number","nodeType":"YulLiteral","src":"522:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"482:6:21"},"nodeType":"YulFunctionCall","src":"482:42:21"},"nodeType":"YulExpressionStatement","src":"482:42:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"449:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"452:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"446:2:21"},"nodeType":"YulFunctionCall","src":"446:13:21"},"nodeType":"YulIf","src":"443:91:21"},{"nodeType":"YulAssignment","src":"543:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"559:9:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"578:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"586:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"574:3:21"},"nodeType":"YulFunctionCall","src":"574:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"595:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"591:3:21"},"nodeType":"YulFunctionCall","src":"591:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"570:3:21"},"nodeType":"YulFunctionCall","src":"570:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"555:3:21"},"nodeType":"YulFunctionCall","src":"555:45:21"},{"kind":"number","nodeType":"YulLiteral","src":"602:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"551:3:21"},"nodeType":"YulFunctionCall","src":"551:54:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"543:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:21","type":""}],"src":"14:597:21"},{"body":{"nodeType":"YulBlock","src":"665:124:21","statements":[{"nodeType":"YulAssignment","src":"675:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"697:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"684:12:21"},"nodeType":"YulFunctionCall","src":"684:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"675:5:21"}]},{"body":{"nodeType":"YulBlock","src":"767:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"776:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"779:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"769:6:21"},"nodeType":"YulFunctionCall","src":"769:12:21"},"nodeType":"YulExpressionStatement","src":"769:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"726:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"737:5:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"752:3:21","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"757:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"748:3:21"},"nodeType":"YulFunctionCall","src":"748:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"761:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"744:3:21"},"nodeType":"YulFunctionCall","src":"744:19:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"733:3:21"},"nodeType":"YulFunctionCall","src":"733:31:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"723:2:21"},"nodeType":"YulFunctionCall","src":"723:42:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"716:6:21"},"nodeType":"YulFunctionCall","src":"716:50:21"},"nodeType":"YulIf","src":"713:70:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"655:5:21","type":""}],"src":"616:173:21"},{"body":{"nodeType":"YulBlock","src":"881:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"927:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"929:6:21"},"nodeType":"YulFunctionCall","src":"929:12:21"},"nodeType":"YulExpressionStatement","src":"929:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"902:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"911:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"898:3:21"},"nodeType":"YulFunctionCall","src":"898:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"923:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"894:3:21"},"nodeType":"YulFunctionCall","src":"894:32:21"},"nodeType":"YulIf","src":"891:52:21"},{"nodeType":"YulAssignment","src":"952:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"981:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"962:18:21"},"nodeType":"YulFunctionCall","src":"962:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"952:6:21"}]},{"nodeType":"YulAssignment","src":"1000:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1027:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1038:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:21"},"nodeType":"YulFunctionCall","src":"1023:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1010:12:21"},"nodeType":"YulFunctionCall","src":"1010:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1000:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"839:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"850:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"862:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"870:6:21","type":""}],"src":"794:254:21"},{"body":{"nodeType":"YulBlock","src":"1148:92:21","statements":[{"nodeType":"YulAssignment","src":"1158:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1170:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1166:3:21"},"nodeType":"YulFunctionCall","src":"1166:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1158:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1225:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1218:6:21"},"nodeType":"YulFunctionCall","src":"1218:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1211:6:21"},"nodeType":"YulFunctionCall","src":"1211:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1193:6:21"},"nodeType":"YulFunctionCall","src":"1193:41:21"},"nodeType":"YulExpressionStatement","src":"1193:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1117:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1128:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1139:4:21","type":""}],"src":"1053:187:21"},{"body":{"nodeType":"YulBlock","src":"1346:76:21","statements":[{"nodeType":"YulAssignment","src":"1356:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1368:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1379:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1364:3:21"},"nodeType":"YulFunctionCall","src":"1364:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1356:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1398:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"1409:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1391:6:21"},"nodeType":"YulFunctionCall","src":"1391:25:21"},"nodeType":"YulExpressionStatement","src":"1391:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1315:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1326:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1337:4:21","type":""}],"src":"1245:177:21"},{"body":{"nodeType":"YulBlock","src":"1531:224:21","statements":[{"body":{"nodeType":"YulBlock","src":"1577:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1586:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1589:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1579:6:21"},"nodeType":"YulFunctionCall","src":"1579:12:21"},"nodeType":"YulExpressionStatement","src":"1579:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1552:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1561:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1548:3:21"},"nodeType":"YulFunctionCall","src":"1548:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1573:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1544:3:21"},"nodeType":"YulFunctionCall","src":"1544:32:21"},"nodeType":"YulIf","src":"1541:52:21"},{"nodeType":"YulAssignment","src":"1602:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1631:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1612:18:21"},"nodeType":"YulFunctionCall","src":"1612:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1602:6:21"}]},{"nodeType":"YulAssignment","src":"1650:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1683:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1694:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1679:3:21"},"nodeType":"YulFunctionCall","src":"1679:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1660:18:21"},"nodeType":"YulFunctionCall","src":"1660:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1650:6:21"}]},{"nodeType":"YulAssignment","src":"1707:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1734:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1745:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:21"},"nodeType":"YulFunctionCall","src":"1730:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1717:12:21"},"nodeType":"YulFunctionCall","src":"1717:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1707:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1481:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1492:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1504:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1512:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1520:6:21","type":""}],"src":"1427:328:21"},{"body":{"nodeType":"YulBlock","src":"1857:87:21","statements":[{"nodeType":"YulAssignment","src":"1867:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1879:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1890:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1875:3:21"},"nodeType":"YulFunctionCall","src":"1875:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1867:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1909:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1924:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1932:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1920:3:21"},"nodeType":"YulFunctionCall","src":"1920:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1902:6:21"},"nodeType":"YulFunctionCall","src":"1902:36:21"},"nodeType":"YulExpressionStatement","src":"1902:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1826:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1837:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1848:4:21","type":""}],"src":"1760:184:21"},{"body":{"nodeType":"YulBlock","src":"2019:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"2065:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2074:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2077:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2067:6:21"},"nodeType":"YulFunctionCall","src":"2067:12:21"},"nodeType":"YulExpressionStatement","src":"2067:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2040:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2049:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2036:3:21"},"nodeType":"YulFunctionCall","src":"2036:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2061:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2032:3:21"},"nodeType":"YulFunctionCall","src":"2032:32:21"},"nodeType":"YulIf","src":"2029:52:21"},{"nodeType":"YulAssignment","src":"2090:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2119:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2100:18:21"},"nodeType":"YulFunctionCall","src":"2100:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2090:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1985:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1996:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2008:6:21","type":""}],"src":"1949:186:21"},{"body":{"nodeType":"YulBlock","src":"2227:173:21","statements":[{"body":{"nodeType":"YulBlock","src":"2273:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2282:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2285:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2275:6:21"},"nodeType":"YulFunctionCall","src":"2275:12:21"},"nodeType":"YulExpressionStatement","src":"2275:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2248:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2257:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2244:3:21"},"nodeType":"YulFunctionCall","src":"2244:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2269:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2240:3:21"},"nodeType":"YulFunctionCall","src":"2240:32:21"},"nodeType":"YulIf","src":"2237:52:21"},{"nodeType":"YulAssignment","src":"2298:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2327:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2308:18:21"},"nodeType":"YulFunctionCall","src":"2308:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2298:6:21"}]},{"nodeType":"YulAssignment","src":"2346:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2379:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2390:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2375:3:21"},"nodeType":"YulFunctionCall","src":"2375:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2356:18:21"},"nodeType":"YulFunctionCall","src":"2356:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2346:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2185:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2196:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2208:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2216:6:21","type":""}],"src":"2140:260:21"},{"body":{"nodeType":"YulBlock","src":"2460:325:21","statements":[{"nodeType":"YulAssignment","src":"2470:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2484:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2487:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2480:3:21"},"nodeType":"YulFunctionCall","src":"2480:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2470:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"2501:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2531:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2537:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2527:3:21"},"nodeType":"YulFunctionCall","src":"2527:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2505:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2578:31:21","statements":[{"nodeType":"YulAssignment","src":"2580:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2594:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2602:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2590:3:21"},"nodeType":"YulFunctionCall","src":"2590:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2580:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2558:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2551:6:21"},"nodeType":"YulFunctionCall","src":"2551:26:21"},"nodeType":"YulIf","src":"2548:61:21"},{"body":{"nodeType":"YulBlock","src":"2668:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2689:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2696:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2701:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2692:3:21"},"nodeType":"YulFunctionCall","src":"2692:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2682:6:21"},"nodeType":"YulFunctionCall","src":"2682:31:21"},"nodeType":"YulExpressionStatement","src":"2682:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2733:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2736:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2726:6:21"},"nodeType":"YulFunctionCall","src":"2726:15:21"},"nodeType":"YulExpressionStatement","src":"2726:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2761:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2764:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2754:6:21"},"nodeType":"YulFunctionCall","src":"2754:15:21"},"nodeType":"YulExpressionStatement","src":"2754:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2624:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2647:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2655:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2644:2:21"},"nodeType":"YulFunctionCall","src":"2644:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2621:2:21"},"nodeType":"YulFunctionCall","src":"2621:38:21"},"nodeType":"YulIf","src":"2618:161:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2440:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2449:6:21","type":""}],"src":"2405:380:21"},{"body":{"nodeType":"YulBlock","src":"2838:177:21","statements":[{"body":{"nodeType":"YulBlock","src":"2873:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2894:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2901:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2906:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2897:3:21"},"nodeType":"YulFunctionCall","src":"2897:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2887:6:21"},"nodeType":"YulFunctionCall","src":"2887:31:21"},"nodeType":"YulExpressionStatement","src":"2887:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2938:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2941:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2931:6:21"},"nodeType":"YulFunctionCall","src":"2931:15:21"},"nodeType":"YulExpressionStatement","src":"2931:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2966:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2969:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2959:6:21"},"nodeType":"YulFunctionCall","src":"2959:15:21"},"nodeType":"YulExpressionStatement","src":"2959:15:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2854:1:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2861:1:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2857:3:21"},"nodeType":"YulFunctionCall","src":"2857:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2851:2:21"},"nodeType":"YulFunctionCall","src":"2851:13:21"},"nodeType":"YulIf","src":"2848:136:21"},{"nodeType":"YulAssignment","src":"2993:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3004:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"3007:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3000:3:21"},"nodeType":"YulFunctionCall","src":"3000:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"2993:3:21"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2821:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"2824:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2830:3:21","type":""}],"src":"2790:225:21"},{"body":{"nodeType":"YulBlock","src":"3194:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3211:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3222:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3204:6:21"},"nodeType":"YulFunctionCall","src":"3204:21:21"},"nodeType":"YulExpressionStatement","src":"3204:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3245:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3256:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3241:3:21"},"nodeType":"YulFunctionCall","src":"3241:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3261:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3234:6:21"},"nodeType":"YulFunctionCall","src":"3234:30:21"},"nodeType":"YulExpressionStatement","src":"3234:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3284:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3295:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3280:3:21"},"nodeType":"YulFunctionCall","src":"3280:18:21"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"3300:34:21","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3273:6:21"},"nodeType":"YulFunctionCall","src":"3273:62:21"},"nodeType":"YulExpressionStatement","src":"3273:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3355:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3366:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3351:3:21"},"nodeType":"YulFunctionCall","src":"3351:18:21"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"3371:7:21","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3344:6:21"},"nodeType":"YulFunctionCall","src":"3344:35:21"},"nodeType":"YulExpressionStatement","src":"3344:35:21"},{"nodeType":"YulAssignment","src":"3388:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3400:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3411:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3396:3:21"},"nodeType":"YulFunctionCall","src":"3396:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3388:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3171:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3185:4:21","type":""}],"src":"3020:401:21"},{"body":{"nodeType":"YulBlock","src":"3600:226:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3617:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3628:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3610:6:21"},"nodeType":"YulFunctionCall","src":"3610:21:21"},"nodeType":"YulExpressionStatement","src":"3610:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3651:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3662:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3647:3:21"},"nodeType":"YulFunctionCall","src":"3647:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3667:2:21","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3640:6:21"},"nodeType":"YulFunctionCall","src":"3640:30:21"},"nodeType":"YulExpressionStatement","src":"3640:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3690:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3701:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3686:3:21"},"nodeType":"YulFunctionCall","src":"3686:18:21"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"3706:34:21","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3679:6:21"},"nodeType":"YulFunctionCall","src":"3679:62:21"},"nodeType":"YulExpressionStatement","src":"3679:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3761:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3772:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3757:3:21"},"nodeType":"YulFunctionCall","src":"3757:18:21"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"3777:6:21","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3750:6:21"},"nodeType":"YulFunctionCall","src":"3750:34:21"},"nodeType":"YulExpressionStatement","src":"3750:34:21"},{"nodeType":"YulAssignment","src":"3793:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3805:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3816:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3801:3:21"},"nodeType":"YulFunctionCall","src":"3801:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3793:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3577:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3591:4:21","type":""}],"src":"3426:400:21"},{"body":{"nodeType":"YulBlock","src":"4005:224:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4022:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4033:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4015:6:21"},"nodeType":"YulFunctionCall","src":"4015:21:21"},"nodeType":"YulExpressionStatement","src":"4015:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4056:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4067:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4052:3:21"},"nodeType":"YulFunctionCall","src":"4052:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4072:2:21","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4045:6:21"},"nodeType":"YulFunctionCall","src":"4045:30:21"},"nodeType":"YulExpressionStatement","src":"4045:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4095:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4106:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4091:3:21"},"nodeType":"YulFunctionCall","src":"4091:18:21"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"4111:34:21","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4084:6:21"},"nodeType":"YulFunctionCall","src":"4084:62:21"},"nodeType":"YulExpressionStatement","src":"4084:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4166:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4177:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4162:3:21"},"nodeType":"YulFunctionCall","src":"4162:18:21"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"4182:4:21","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4155:6:21"},"nodeType":"YulFunctionCall","src":"4155:32:21"},"nodeType":"YulExpressionStatement","src":"4155:32:21"},{"nodeType":"YulAssignment","src":"4196:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4208:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4219:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4204:3:21"},"nodeType":"YulFunctionCall","src":"4204:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4196:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3982:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3996:4:21","type":""}],"src":"3831:398:21"},{"body":{"nodeType":"YulBlock","src":"4408:179:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4425:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4436:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4418:6:21"},"nodeType":"YulFunctionCall","src":"4418:21:21"},"nodeType":"YulExpressionStatement","src":"4418:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4459:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4470:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4455:3:21"},"nodeType":"YulFunctionCall","src":"4455:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4475:2:21","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4448:6:21"},"nodeType":"YulFunctionCall","src":"4448:30:21"},"nodeType":"YulExpressionStatement","src":"4448:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4498:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4509:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4494:3:21"},"nodeType":"YulFunctionCall","src":"4494:18:21"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"4514:31:21","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4487:6:21"},"nodeType":"YulFunctionCall","src":"4487:59:21"},"nodeType":"YulExpressionStatement","src":"4487:59:21"},{"nodeType":"YulAssignment","src":"4555:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4567:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4578:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4563:3:21"},"nodeType":"YulFunctionCall","src":"4563:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4555:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4385:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4399:4:21","type":""}],"src":"4234:353:21"},{"body":{"nodeType":"YulBlock","src":"4766:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4783:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4794:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4776:6:21"},"nodeType":"YulFunctionCall","src":"4776:21:21"},"nodeType":"YulExpressionStatement","src":"4776:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4817:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4828:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4813:3:21"},"nodeType":"YulFunctionCall","src":"4813:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4833:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4806:6:21"},"nodeType":"YulFunctionCall","src":"4806:30:21"},"nodeType":"YulExpressionStatement","src":"4806:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4856:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4867:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4852:3:21"},"nodeType":"YulFunctionCall","src":"4852:18:21"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"4872:34:21","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4845:6:21"},"nodeType":"YulFunctionCall","src":"4845:62:21"},"nodeType":"YulExpressionStatement","src":"4845:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4927:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4938:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4923:3:21"},"nodeType":"YulFunctionCall","src":"4923:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"4943:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4916:6:21"},"nodeType":"YulFunctionCall","src":"4916:35:21"},"nodeType":"YulExpressionStatement","src":"4916:35:21"},{"nodeType":"YulAssignment","src":"4960:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4972:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4983:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4968:3:21"},"nodeType":"YulFunctionCall","src":"4968:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4960:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4743:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4757:4:21","type":""}],"src":"4592:401:21"},{"body":{"nodeType":"YulBlock","src":"5172:225:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5189:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5200:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5182:6:21"},"nodeType":"YulFunctionCall","src":"5182:21:21"},"nodeType":"YulExpressionStatement","src":"5182:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5223:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5234:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:21"},"nodeType":"YulFunctionCall","src":"5219:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5239:2:21","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:21"},"nodeType":"YulFunctionCall","src":"5212:30:21"},"nodeType":"YulExpressionStatement","src":"5212:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5262:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5273:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5258:3:21"},"nodeType":"YulFunctionCall","src":"5258:18:21"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"5278:34:21","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5251:6:21"},"nodeType":"YulFunctionCall","src":"5251:62:21"},"nodeType":"YulExpressionStatement","src":"5251:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5333:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5344:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5329:3:21"},"nodeType":"YulFunctionCall","src":"5329:18:21"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"5349:5:21","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5322:6:21"},"nodeType":"YulFunctionCall","src":"5322:33:21"},"nodeType":"YulExpressionStatement","src":"5322:33:21"},{"nodeType":"YulAssignment","src":"5364:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5376:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5387:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5372:3:21"},"nodeType":"YulFunctionCall","src":"5372:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5364:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5149:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5163:4:21","type":""}],"src":"4998:399:21"},{"body":{"nodeType":"YulBlock","src":"5576:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5593:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5604:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5586:6:21"},"nodeType":"YulFunctionCall","src":"5586:21:21"},"nodeType":"YulExpressionStatement","src":"5586:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5627:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5638:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5623:3:21"},"nodeType":"YulFunctionCall","src":"5623:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5643:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5616:6:21"},"nodeType":"YulFunctionCall","src":"5616:30:21"},"nodeType":"YulExpressionStatement","src":"5616:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5666:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5677:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5662:3:21"},"nodeType":"YulFunctionCall","src":"5662:18:21"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"5682:34:21","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5655:6:21"},"nodeType":"YulFunctionCall","src":"5655:62:21"},"nodeType":"YulExpressionStatement","src":"5655:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5737:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5748:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5733:3:21"},"nodeType":"YulFunctionCall","src":"5733:18:21"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"5753:8:21","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5726:6:21"},"nodeType":"YulFunctionCall","src":"5726:36:21"},"nodeType":"YulExpressionStatement","src":"5726:36:21"},{"nodeType":"YulAssignment","src":"5771:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5783:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5794:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5779:3:21"},"nodeType":"YulFunctionCall","src":"5779:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5771:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5553:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5567:4:21","type":""}],"src":"5402:402:21"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a1565b60405180910390f35b6100df6100da366004610712565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461073c565b61024a565b604051601281526020016100c3565b6100df610131366004610712565b61026e565b6100f3610144366004610778565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610712565b61029f565b6100df610188366004610712565b61031f565b6100f361019b36600461079a565b61032d565b6060603680546101af906107cd565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107cd565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b9190610808565b610358565b6060603780546101af906107cd565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106ce578581018301518582016040015282016106b2565b818111156106e0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461070d57600080fd5b919050565b6000806040838503121561072557600080fd5b61072e836106f6565b946020939093013593505050565b60008060006060848603121561075157600080fd5b61075a846106f6565b9250610768602085016106f6565b9150604084013590509250925092565b60006020828403121561078a57600080fd5b610793826106f6565b9392505050565b600080604083850312156107ad57600080fd5b6107b6836106f6565b91506107c4602084016106f6565b90509250929050565b600181811c908216806107e157607f821691505b6020821081141561080257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561082957634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220059dccbed5e0928cd6d57ba7b1604259f936c1eddbc25393d4fc53150ced370564736f6c63430008080033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x808 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6CE JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72E DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x75A DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x768 PUSH1 0x20 DUP6 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x793 DUP3 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x7C4 PUSH1 0x20 DUP5 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7E1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x802 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x829 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV SWAP14 0xCC 0xBE 0xD5 0xE0 SWAP3 DUP13 0xD6 0xD5 PUSH28 0xA7B1604259F936C1EDDBC25393D4FC53150CED370564736F6C634300 ADDMOD ADDMOD STOP CALLER ","sourceMap":"1480:12159:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:21;;1211:22;1193:41;;1181:2;1166:18;4768:197:9;1053:187:21;3579:106:9;3666:12;;3579:106;;;1391:25:21;;;1379:2;1364:18;3579:106:9;1245:177:21;5527:286:9;;;;;;:::i;:::-;;:::i;3428:91::-;;;3510:2;1902:36:21;;1890:2;1875:18;3428:91:9;1760:184:21;6208:234:9;;;;;;:::i;:::-;;:::i;3743:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3843:18:9;3817:7;3843:18;;;:9;:18;;;;;;;3743:125;2702:102;;;:::i;6929:427::-;;;;;;:::i;:::-;;:::i;4064:189::-;;;;;;:::i;:::-;;:::i;4311:149::-;;;;;;:::i;:::-;;:::i;2491:98::-;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;929:10:14;4905:32:9;929:10:14;4921:7:9;4930:6;4905:8;:32::i;:::-;-1:-1:-1;4954:4:9;;4768:197;-1:-1:-1;;;4768:197:9:o;5527:286::-;5654:4;929:10:14;5710:38:9;5726:4;929:10:14;5741:6:9;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;-1:-1:-1;5802:4:9;;5527:286;-1:-1:-1;;;;5527:286:9:o;6208:234::-;6296:4;929:10:14;6350:64:9;929:10:14;6366:7:9;6403:10;6375:25;929:10:14;6366:7:9;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;2702:102::-;2758:13;2790:7;2783:14;;;;;:::i;6929:427::-;7022:4;929:10:14;7022:4:9;7103:25;929:10:14;7120:7:9;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;-1:-1:-1;;;7138:85:9;;3222:2:21;7138:85:9;;;3204:21:21;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:21;;;3344:35;3396:19;;7138:85:9;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;4064:189::-;4143:4;929:10:14;4197:28:9;929:10:14;4214:2:9;4218:6;4197:9;:28::i;4311:149::-;-1:-1:-1;;;;;4426:18:9;;;4400:7;4426:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4311:149::o;10841:370::-;-1:-1:-1;;;;;10972:19:9;;10964:68;;;;-1:-1:-1;;;10964:68:9;;3628:2:21;10964:68:9;;;3610:21:21;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:21;;;3750:34;3801:19;;10964:68:9;3426:400:21;10964:68:9;-1:-1:-1;;;;;11050:21:9;;11042:68;;;;-1:-1:-1;;;11042:68:9;;4033:2:21;11042:68:9;;;4015:21:21;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:21;;;4155:32;4204:19;;11042:68:9;3831:398:21;11042:68:9;-1:-1:-1;;;;;11121:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11172:32;;1391:25:21;;;11172:32:9;;1364:18:21;11172:32:9;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;-1:-1:-1;;11688:16:9;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;-1:-1:-1;;;11741:68:9;;4436:2:21;11741:68:9;;;4418:21:21;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;11741:68:9;4234:353:21;11741:68:9;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11612:321;11492:441;;;:::o;7810:818::-;-1:-1:-1;;;;;7936:18:9;;7928:68;;;;-1:-1:-1;;;7928:68:9;;4794:2:21;7928:68:9;;;4776:21:21;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:21;;;4916:35;4968:19;;7928:68:9;4592:401:21;7928:68:9;-1:-1:-1;;;;;8014:16:9;;8006:64;;;;-1:-1:-1;;;8006:64:9;;5200:2:21;8006:64:9;;;5182:21:21;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:21;;;5322:33;5372:19;;8006:64:9;4998:399:21;8006:64:9;-1:-1:-1;;;;;8152:15:9;;8130:19;8152:15;;;:9;:15;;;;;;8185:21;;;;8177:72;;;;-1:-1:-1;;;8177:72:9;;5604:2:21;8177:72:9;;;5586:21:21;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:21;;;5726:36;5779:19;;8177:72:9;5402:402:21;8177:72:9;-1:-1:-1;;;;;8283:15:9;;;;;;;:9;:15;;;;;;8301:20;;;8283:38;;8498:13;;;;;;;;;;:23;;;;;;8547:26;;;;;;8315:6;1391:25:21;;1379:2;1364:18;;1245:177;8547:26:9;;;;;;;;8584:37;12517:121;14:597:21;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:21;574:15;-1:-1:-1;;570:29:21;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:21:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:21;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:21:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:21:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:21;;2790:225::o"},"gasEstimates":{"creation":{"codeDepositCost":"429600","executionCost":"468","totalCost":"430068"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24624","balanceOf(address)":"2559","decimals()":"266","decreaseAllowance(address,uint256)":"27016","increaseAllowance(address,uint256)":"26978","name()":"infinite","symbol()":"infinite","totalSupply()":"2326","transfer(address,uint256)":"51143","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC20_init(string memory,string memory)":"infinite","__ERC20_init_unchained(string memory,string memory)":"infinite","_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2340,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1255,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":1261,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1263,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":1265,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":1267,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1847,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol":{"ERC20BurnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":\"ERC20BurnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2340,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1255,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":1261,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1263,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":1265,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":1267,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1847,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":1989,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"IERC20MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ce05ee0c6b7da63fa4afeabd4f8d31d58a65616331bde7698325b078da70f3a64736f6c63430008080033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xE0 0x5E 0xE0 0xC6 0xB7 0xDA PUSH4 0xFA4AFEAB 0xD4 0xF8 0xD3 SAR PC 0xA6 JUMP AND CALLER SHL 0xDE PUSH23 0x98325B078DA70F3A64736F6C6343000808003300000000 ","sourceMap":"194:8087:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8087:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ce05ee0c6b7da63fa4afeabd4f8d31d58a65616331bde7698325b078da70f3a64736f6c63430008080033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xE0 0x5E 0xE0 0xC6 0xB7 0xDA PUSH4 0xFA4AFEAB 0xD4 0xF8 0xD3 SAR PC 0xA6 JUMP AND CALLER SHL 0xDE PUSH23 0x98325B078DA70F3A64736F6C6343000808003300000000 ","sourceMap":"194:8087:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2340,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f717b42fa1dfc99616c15fce244cd3ec5cd84921cf4106648c6f42b8ebc5874264736f6c63430008080033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 OR 0xB4 0x2F LOG1 0xDF 0xC9 SWAP7 AND 0xC1 0x5F 0xCE 0x24 0x4C 0xD3 0xEC 0x5C 0xD8 0x49 0x21 0xCF COINBASE MOD PUSH5 0x8C6F42B8EB 0xC5 DUP8 TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"1279:1402:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1402:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f717b42fa1dfc99616c15fce244cd3ec5cd84921cf4106648c6f42b8ebc5874264736f6c63430008080033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 OR 0xB4 0x2F LOG1 0xDF 0xC9 SWAP7 AND 0xC1 0x5F 0xCE 0x24 0x4C 0xD3 0xEC 0x5C 0xD8 0x49 0x21 0xCF COINBASE MOD PUSH5 0x8C6F42B8EB 0xC5 DUP8 TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"1279:1402:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b03fd6cf1d99291a8ef523878af8c2a42551ffd15fe4adc4fd648438aecd660864736f6c63430008080033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 EXTCODEHASH 0xD6 0xCF SAR SWAP10 0x29 BYTE DUP15 CREATE2 0x23 DUP8 DUP11 0xF8 0xC2 LOG4 0x25 MLOAD SELFDESTRUCT 0xD1 0x5F 0xE4 0xAD 0xC4 REVERT PUSH5 0x8438AECD66 ADDMOD PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"199:2098:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;199:2098:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b03fd6cf1d99291a8ef523878af8c2a42551ffd15fe4adc4fd648438aecd660864736f6c63430008080033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 EXTCODEHASH 0xD6 0xCF SAR SWAP10 0x29 BYTE DUP15 CREATE2 0x23 DUP8 DUP11 0xF8 0xC2 LOG4 0x25 MLOAD SELFDESTRUCT 0xD1 0x5F 0xE4 0xAD 0xC4 REVERT PUSH5 0x8438AECD66 ADDMOD PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"199:2098:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2619,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203f544afe943fd97e70b37cbdd5d932afc11af44744cdc209e2bfa53a5955c61b64736f6c63430008080033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH SLOAD 0x4A INVALID SWAP5 EXTCODEHASH 0xD9 PUSH31 0x70B37CBDD5D932AFC11AF44744CDC209E2BFA53A5955C61B64736F6C634300 ADDMOD ADDMOD STOP CALLER ","sourceMap":"202:12313:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12313:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203f544afe943fd97e70b37cbdd5d932afc11af44744cdc209e2bfa53a5955c61b64736f6c63430008080033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH SLOAD 0x4A INVALID SWAP5 EXTCODEHASH 0xD9 PUSH31 0x70B37CBDD5D932AFC11AF44744CDC209E2BFA53A5955C61B64736F6C634300 ADDMOD ADDMOD STOP CALLER ","sourceMap":"202:12313:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC20CNYG.sol":{"ERC20CNYG":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"AddBlacklist","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"AddWhitelist","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"FeeCollector","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeeMaxAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeeRate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeeStartAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"RemoveBlacklist","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"RemoveWhitelist","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UPGRADER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"addBlacklist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"addWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"blacklists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeCollector","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeMaxAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeStartAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_feeStartAmount","type":"uint256"},{"internalType":"uint256","name":"_feeMaxAmount","type":"uint256"},{"internalType":"uint256","name":"_feeRate","type":"uint256"},{"internalType":"address","name":"_feeCollector","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"removeBlacklist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"removeWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"setFeeCollector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setFeeMaxAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setMinAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3595":{"entryPoint":null,"id":3595,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_954":{"entryPoint":41,"id":954,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:608:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"188:229:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"205:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"216:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"198:6:21"},"nodeType":"YulFunctionCall","src":"198:21:21"},"nodeType":"YulExpressionStatement","src":"198:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"239:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"250:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"235:3:21"},"nodeType":"YulFunctionCall","src":"235:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"255:2:21","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"228:6:21"},"nodeType":"YulFunctionCall","src":"228:30:21"},"nodeType":"YulExpressionStatement","src":"228:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"278:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"289:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"274:3:21"},"nodeType":"YulFunctionCall","src":"274:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"294:34:21","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"267:6:21"},"nodeType":"YulFunctionCall","src":"267:62:21"},"nodeType":"YulExpressionStatement","src":"267:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"360:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"345:3:21"},"nodeType":"YulFunctionCall","src":"345:18:21"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"365:9:21","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"338:6:21"},"nodeType":"YulFunctionCall","src":"338:37:21"},"nodeType":"YulExpressionStatement","src":"338:37:21"},{"nodeType":"YulAssignment","src":"384:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"396:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"407:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"392:3:21"},"nodeType":"YulFunctionCall","src":"392:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"384:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"165:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"179:4:21","type":""}],"src":"14:403:21"},{"body":{"nodeType":"YulBlock","src":"519:87:21","statements":[{"nodeType":"YulAssignment","src":"529:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"541:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"552:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"537:3:21"},"nodeType":"YulFunctionCall","src":"537:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"529:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"571:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"586:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"594:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"582:3:21"},"nodeType":"YulFunctionCall","src":"582:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"564:6:21"},"nodeType":"YulFunctionCall","src":"564:36:21"},"nodeType":"YulExpressionStatement","src":"564:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"488:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"499:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"510:4:21","type":""}],"src":"422:184:21"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523060601b6080523480156200001857600080fd5b506200002362000029565b620000eb565b600054610100900460ff1615620000965760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e9576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160601c612d646200012660003960008181610d2101528181610d6101528181610ef701528181610f370152610fc60152612d646000f3fe60806040526004361061027d5760003560e01c806379cc67901161014f578063a9059cbb116100c1578063dd62ed3e1161007a578063dd62ed3e146107a4578063e63ab1e9146107c4578063eb91e651146107e6578063f5b541a614610806578063f72c0d8b14610828578063f80f5dd51461085c57600080fd5b8063a9059cbb146106c0578063bd102280146106e0578063c415b95c146106f7578063cbe351ca14610730578063d539139314610750578063d547741f1461078457600080fd5b806395d89b411161011357806395d89b411461061f578063978bbdb9146106345780639cfe42da1461064b578063a217fddf1461066b578063a42dce8014610680578063a457c2d7146106a057600080fd5b806379cc679014610593578063833f97be146105b35780638456cb59146105ca578063897b0637146105df57806391d14854146105ff57600080fd5b806336568abe116101f357806345596e2e116101ac57806345596e2e146104dd5780634f1ef286146104fd57806352d1902d146105105780635c975abb1461052557806370a082311461053d57806378c8cda71461057357600080fd5b806336568abe146104285780633659cfe61461044857806339509351146104685780633f4ba83a1461048857806340c10f191461049d57806342966c68146104bd57600080fd5b80631e7be210116102455780631e7be210146103495780631f8d519d1461037a57806323b872dd1461039c578063248a9ca3146103bc5780632f2ff15d146103ec578063313ce5671461040c57600080fd5b806301ffc9a71461028257806306fdde03146102b7578063095ea7b3146102d957806316c02129146102f957806318160ddd1461032a575b600080fd5b34801561028e57600080fd5b506102a261029d36600461272f565b61087c565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102cc6108b3565b6040516102ae9190612785565b3480156102e557600080fd5b506102a26102f43660046127d4565b610945565b34801561030557600080fd5b506102a26103143660046127fe565b6101966020526000908152604090205460ff1681565b34801561033657600080fd5b506035545b6040519081526020016102ae565b34801561035557600080fd5b506102a26103643660046127fe565b6101956020526000908152604090205460ff1681565b34801561038657600080fd5b5061039a610395366004612819565b61095d565b005b3480156103a857600080fd5b506102a26103b7366004612858565b610c02565b3480156103c857600080fd5b5061033b6103d7366004612894565b600090815260fb602052604090206001015490565b3480156103f857600080fd5b5061039a6104073660046128ad565b610c6e565b34801561041857600080fd5b50604051600681526020016102ae565b34801561043457600080fd5b5061039a6104433660046128ad565b610c98565b34801561045457600080fd5b5061039a6104633660046127fe565b610d16565b34801561047457600080fd5b506102a26104833660046127d4565b610df6565b34801561049457600080fd5b5061039a610e18565b3480156104a957600080fd5b5061039a6104b83660046127d4565b610e38565b3480156104c957600080fd5b5061039a6104d8366004612894565b610e6c565b3480156104e957600080fd5b5061039a6104f8366004612894565b610e76565b61039a61050b3660046128ef565b610eec565b34801561051c57600080fd5b5061033b610fb9565b34801561053157600080fd5b5060975460ff166102a2565b34801561054957600080fd5b5061033b6105583660046127fe565b6001600160a01b031660009081526033602052604090205490565b34801561057f57600080fd5b5061039a61058e3660046127fe565b61106c565b34801561059f57600080fd5b5061039a6105ae3660046127d4565b611165565b3480156105bf57600080fd5b5061033b6101915481565b3480156105d657600080fd5b5061039a61117a565b3480156105eb57600080fd5b5061039a6105fa366004612894565b61119a565b34801561060b57600080fd5b506102a261061a3660046128ad565b611208565b34801561062b57600080fd5b506102cc611233565b34801561064057600080fd5b5061033b6101935481565b34801561065757600080fd5b5061039a6106663660046127fe565b611242565b34801561067757600080fd5b5061033b600081565b34801561068c57600080fd5b5061039a61069b3660046127fe565b611336565b3480156106ac57600080fd5b506102a26106bb3660046127d4565b6113c3565b3480156106cc57600080fd5b506102a26106db3660046127d4565b611449565b3480156106ec57600080fd5b5061033b6101925481565b34801561070357600080fd5b5061019454610718906001600160a01b031681565b6040516001600160a01b0390911681526020016102ae565b34801561073c57600080fd5b5061039a61074b366004612894565b611496565b34801561075c57600080fd5b5061033b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561079057600080fd5b5061039a61079f3660046128ad565b611504565b3480156107b057600080fd5b5061033b6107bf3660046129b1565b611529565b3480156107d057600080fd5b5061033b600080516020612ce883398151915281565b3480156107f257600080fd5b5061039a6108013660046127fe565b611554565b34801561081257600080fd5b5061033b600080516020612cc883398151915281565b34801561083457600080fd5b5061033b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561086857600080fd5b5061039a6108773660046127fe565b61164d565b60006001600160e01b03198216637965db0b60e01b14806108ad57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546108c2906129db565b80601f01602080910402602001604051908101604052809291908181526020018280546108ee906129db565b801561093b5780601f106109105761010080835404028352916020019161093b565b820191906000526020600020905b81548152906001019060200180831161091e57829003601f168201915b5050505050905090565b600033610953818585611741565b5060019392505050565b600054610100900460ff161580801561097d5750600054600160ff909116105b806109975750303b158015610997575060005460ff166001145b6109ff5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610a22576000805461ff0019166101001790555b610a6a6040518060400160405280600a81526020016921a72ca3902a37b5b2b760b11b81525060405180604001604052806004815260200163434e594760e01b815250611865565b610a72611896565b610a7a6118bf565b610a82611896565b610a8a611896565b610a956000336118ee565b610aad600080516020612ce8833981519152336118ee565b610ac5600080516020612cc8833981519152336118ee565b610aef7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336118ee565b610b197f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3336118ee565b61019185905561019284905560648310610b455760405162461bcd60e51b81526004016109f690612a16565b6101938390556001600160a01b038216610b995760405162461bcd60e51b815260206004820152601560248201527434b73b30b634b2103332b29031b7b63632b1ba37b960591b60448201526064016109f6565b61019480546001600160a01b0319166001600160a01b0384161790558015610bfb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600033610c10858285611974565b6000610c1c86856119ee565b905080610c3357610c2e868686611a61565b610c60565b610c478686610c428488612a54565b611a61565b61019454610c609087906001600160a01b031683611a61565b6001925050505b9392505050565b600082815260fb6020526040902060010154610c8981611c17565b610c9383836118ee565b505050565b6001600160a01b0381163314610d085760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016109f6565b610d128282611c21565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d5f5760405162461bcd60e51b81526004016109f690612a6b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610da8600080516020612ca8833981519152546001600160a01b031690565b6001600160a01b031614610dce5760405162461bcd60e51b81526004016109f690612ab7565b610dd781611c88565b60408051600080825260208201909252610df391839190611cb2565b50565b600033610953818585610e098383611529565b610e139190612b03565b611741565b600080516020612ce8833981519152610e3081611c17565b610df3611e2c565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610e6281611c17565b610c938383611e7e565b610df33382611f4b565b600080516020612cc8833981519152610e8e81611c17565b60648210610eae5760405162461bcd60e51b81526004016109f690612a16565b6101938290556040518281527f74e4a578032013599764bac4c025ec6d6c6b24a5c2417c5100c13a04516eb971906020015b60405180910390a15050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f355760405162461bcd60e51b81526004016109f690612a6b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f7e600080516020612ca8833981519152546001600160a01b031690565b6001600160a01b031614610fa45760405162461bcd60e51b81526004016109f690612ab7565b610fad82611c88565b610d1282826001611cb2565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110595760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016109f6565b50600080516020612ca883398151915290565b600080516020612cc883398151915261108481611c17565b6001600160a01b0382166110aa5760405162461bcd60e51b81526004016109f690612b1b565b6001600160a01b0382166000908152610195602052604090205460ff166111135760405162461bcd60e51b815260206004820152601860248201527f6163636f756e74206973206e6f742077686974656c697374000000000000000060448201526064016109f6565b6001600160a01b03821660008181526101956020908152604091829020805460ff1916905590519182527fa6667e187c57c5b0fa4e1122a695ed0754287513bcb4901fa6c1f44ba22c01879101610ee0565b611170823383611974565b610d128282611f4b565b600080516020612ce883398151915261119281611c17565b610df361208b565b600080516020612cc88339815191526111b281611c17565b600082116111d25760405162461bcd60e51b81526004016109f690612a16565b6101918290556040518281527f082006e1b22df9000831fa2fe95e4b46f3de4f6d8ef57b5b5ff7ab6c9a68b5ba90602001610ee0565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060603780546108c2906129db565b600080516020612cc883398151915261125a81611c17565b6001600160a01b0382166112805760405162461bcd60e51b81526004016109f690612b1b565b6001600160a01b0382166000908152610196602052604090205460ff16156112e15760405162461bcd60e51b81526020600482015260146024820152731858d8dbdd5b9d081a5cc8189b1858dadb1a5cdd60621b60448201526064016109f6565b6001600160a01b03821660008181526101966020908152604091829020805460ff1916600117905590519182527f7e239e822fa537514cc6b38d8350bde5ce06a8f9282c77161b926fc077a810269101610ee0565b600080516020612cc883398151915261134e81611c17565b6001600160a01b0382166113745760405162461bcd60e51b81526004016109f690612b1b565b61019480546001600160a01b0319166001600160a01b0384169081179091556040519081527ffa62ad95255db03db5eaabed7a43b93f377948b56cea8e12a747b6565582ed5e90602001610ee0565b600033816113d18286611529565b9050838110156114315760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016109f6565b61143e8286868403611741565b506001949350505050565b6000338161145782856119ee565b90508061146e57611469828686611a61565b61143e565b61147d8286610c428488612a54565b6101945461143e9083906001600160a01b031683611a61565b600080516020612cc88339815191526114ae81611c17565b600082116114ce5760405162461bcd60e51b81526004016109f690612a16565b6101928290556040518281527f0a026e5f510bd032e066c1f6d3212fc9e972ae22a77f2e29db5be3f6fce0230890602001610ee0565b600082815260fb602052604090206001015461151f81611c17565b610c938383611c21565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600080516020612cc883398151915261156c81611c17565b6001600160a01b0382166115925760405162461bcd60e51b81526004016109f690612b1b565b6001600160a01b0382166000908152610196602052604090205460ff166115fb5760405162461bcd60e51b815260206004820152601860248201527f6163636f756e74206973206e6f7420626c61636b6c697374000000000000000060448201526064016109f6565b6001600160a01b03821660008181526101966020908152604091829020805460ff1916905590519182527f54646b2d47b5332deb93b310542f2c11bc9351e59950cdfb3ba518af28f13d299101610ee0565b600080516020612cc883398151915261166581611c17565b6001600160a01b03821661168b5760405162461bcd60e51b81526004016109f690612b1b565b6001600160a01b0382166000908152610195602052604090205460ff16156116ec5760405162461bcd60e51b81526020600482015260146024820152731858d8dbdd5b9d081a5cc81dda1a5d195b1a5cdd60621b60448201526064016109f6565b6001600160a01b03821660008181526101956020908152604091829020805460ff1916600117905590519182527fe463fa6bdecb16f96f58191d902152633214e760ea443684105a7eef1ad16b9d9101610ee0565b6001600160a01b0383166117a35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016109f6565b6001600160a01b0382166118045760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016109f6565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600054610100900460ff1661188c5760405162461bcd60e51b81526004016109f690612b44565b610d1282826120c8565b600054610100900460ff166118bd5760405162461bcd60e51b81526004016109f690612b44565b565b600054610100900460ff166118e65760405162461bcd60e51b81526004016109f690612b44565b6118bd612116565b6118f88282611208565b610d1257600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119303390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006119808484611529565b905060001981146119e857818110156119db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016109f6565b6119e88484848403611741565b50505050565b6001600160a01b03821660009081526101956020526040812054819060ff1615611a1c5760009150506108ad565b610191548310610c67576127106101935484611a389190612b8f565b611a429190612bae565b9050610192548111611a545780611a59565b610192545b949350505050565b6001600160a01b038316611ac55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016109f6565b6001600160a01b038216611b275760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016109f6565b611b32838383612149565b6001600160a01b03831660009081526033602052604090205481811015611baa5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016109f6565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611c0a9086815260200190565b60405180910390a36119e8565b610df381336121cd565b611c2b8282611208565b15610d1257600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610d1281611c17565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611ce557610c9383612226565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1e57600080fd5b505afa925050508015611d4e575060408051601f3d908101601f19168201909252611d4b91810190612bd0565b60015b611db15760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016109f6565b600080516020612ca88339815191528114611e205760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016109f6565b50610c938383836122c2565b611e346122e7565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216611ed45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016109f6565b611ee060008383612149565b8060356000828254611ef29190612b03565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216611fab5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016109f6565b611fb782600083612149565b6001600160a01b0382166000908152603360205260409020548181101561202b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016109f6565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b612093612330565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e613390565b600054610100900460ff166120ef5760405162461bcd60e51b81526004016109f690612b44565b8151612102906036906020850190612696565b508051610c93906037906020840190612696565b600054610100900460ff1661213d5760405162461bcd60e51b81526004016109f690612b44565b6097805460ff19169055565b612151612330565b6001600160a01b0383166000908152610196602052604090205460ff1615610c935760405162461bcd60e51b815260206004820152602960248201527f626c61636b6c6973746564206163636f756e742063616e6e6f74207472616e736044820152683332b9103a37b5b2b760b91b60648201526084016109f6565b6121d78282611208565b610d12576121e481612376565b6121ef836020612388565b604051602001612200929190612be9565b60408051601f198184030181529082905262461bcd60e51b82526109f691600401612785565b6001600160a01b0381163b6122935760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016109f6565b600080516020612ca883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6122cb83612524565b6000825111806122d85750805b15610c93576119e88383612564565b60975460ff166118bd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109f6565b60975460ff16156118bd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109f6565b60606108ad6001600160a01b03831660145b60606000612397836002612b8f565b6123a2906002612b03565b67ffffffffffffffff8111156123ba576123ba6128d9565b6040519080825280601f01601f1916602001820160405280156123e4576020820181803683370190505b509050600360fc1b816000815181106123ff576123ff612c5e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061242e5761242e612c5e565b60200101906001600160f81b031916908160001a9053506000612452846002612b8f565b61245d906001612b03565b90505b60018111156124d5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061249157612491612c5e565b1a60f81b8282815181106124a7576124a7612c5e565b60200101906001600160f81b031916908160001a90535060049490941c936124ce81612c74565b9050612460565b508315610c675760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109f6565b61252d81612226565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6125cc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016109f6565b600080846001600160a01b0316846040516125e79190612c8b565b600060405180830381855af49150503d8060008114612622576040519150601f19603f3d011682016040523d82523d6000602084013e612627565b606091505b509150915061264f8282604051806060016040528060278152602001612d0860279139612658565b95945050505050565b60608315612667575081610c67565b610c67838381511561267c5781518083602001fd5b8060405162461bcd60e51b81526004016109f69190612785565b8280546126a2906129db565b90600052602060002090601f0160209004810192826126c4576000855561270a565b82601f106126dd57805160ff191683800117855561270a565b8280016001018555821561270a579182015b8281111561270a5782518255916020019190600101906126ef565b5061271692915061271a565b5090565b5b80821115612716576000815560010161271b565b60006020828403121561274157600080fd5b81356001600160e01b031981168114610c6757600080fd5b60005b8381101561277457818101518382015260200161275c565b838111156119e85750506000910152565b60208152600082518060208401526127a4816040850160208701612759565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146127cf57600080fd5b919050565b600080604083850312156127e757600080fd5b6127f0836127b8565b946020939093013593505050565b60006020828403121561281057600080fd5b610c67826127b8565b6000806000806080858703121561282f57600080fd5b84359350602085013592506040850135915061284d606086016127b8565b905092959194509250565b60008060006060848603121561286d57600080fd5b612876846127b8565b9250612884602085016127b8565b9150604084013590509250925092565b6000602082840312156128a657600080fd5b5035919050565b600080604083850312156128c057600080fd5b823591506128d0602084016127b8565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561290257600080fd5b61290b836127b8565b9150602083013567ffffffffffffffff8082111561292857600080fd5b818501915085601f83011261293c57600080fd5b81358181111561294e5761294e6128d9565b604051601f8201601f19908116603f01168101908382118183101715612976576129766128d9565b8160405282815288602084870101111561298f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156129c457600080fd5b6129cd836127b8565b91506128d0602084016127b8565b600181811c908216806129ef57607f821691505b60208210811415612a1057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d1a5b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612a6657612a66612a3e565b500390565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60008219821115612b1657612b16612a3e565b500190565b6020808252600f908201526e1a5b9d985b1a59081858d8dbdd5b9d608a1b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615612ba957612ba9612a3e565b500290565b600082612bcb57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612be257600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c21816017850160208801612759565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c52816028840160208801612759565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b600081612c8357612c83612a3e565b506000190190565b60008251612c9d818460208701612759565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92965d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220344f3f6c11f0c2c3f69ed82f8c230d76253637c431fd685cbefa0ba7f98600b664736f6c63430008080033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23 PUSH3 0x29 JUMP JUMPDEST PUSH3 0xEB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND LT ISZERO PUSH3 0xE9 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x2D64 PUSH3 0x126 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xD21 ADD MSTORE DUP2 DUP2 PUSH2 0xD61 ADD MSTORE DUP2 DUP2 PUSH2 0xEF7 ADD MSTORE DUP2 DUP2 PUSH2 0xF37 ADD MSTORE PUSH2 0xFC6 ADD MSTORE PUSH2 0x2D64 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x27D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x14F JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x7A4 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x7C4 JUMPI DUP1 PUSH4 0xEB91E651 EQ PUSH2 0x7E6 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x806 JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x828 JUMPI DUP1 PUSH4 0xF80F5DD5 EQ PUSH2 0x85C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x6C0 JUMPI DUP1 PUSH4 0xBD102280 EQ PUSH2 0x6E0 JUMPI DUP1 PUSH4 0xC415B95C EQ PUSH2 0x6F7 JUMPI DUP1 PUSH4 0xCBE351CA EQ PUSH2 0x730 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x750 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x61F JUMPI DUP1 PUSH4 0x978BBDB9 EQ PUSH2 0x634 JUMPI DUP1 PUSH4 0x9CFE42DA EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x66B JUMPI DUP1 PUSH4 0xA42DCE80 EQ PUSH2 0x680 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x6A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0x833F97BE EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x5CA JUMPI DUP1 PUSH4 0x897B0637 EQ PUSH2 0x5DF JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE GT PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x45596E2E GT PUSH2 0x1AC JUMPI DUP1 PUSH4 0x45596E2E EQ PUSH2 0x4DD JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x78C8CDA7 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE EQ PUSH2 0x428 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E7BE210 GT PUSH2 0x245 JUMPI DUP1 PUSH4 0x1E7BE210 EQ PUSH2 0x349 JUMPI DUP1 PUSH4 0x1F8D519D EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x40C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x16C02129 EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x32A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x272F JUMP JUMPDEST PUSH2 0x87C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CC PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0x2785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x364 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x2819 JUMP JUMPDEST PUSH2 0x95D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2858 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x3D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x407 CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0xC6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x443 CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0xC98 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0xD16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0xDF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0xE18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x4B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0xE38 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x4D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0xE76 JUMP JUMPDEST PUSH2 0x39A PUSH2 0x50B CALLDATASIZE PUSH1 0x4 PUSH2 0x28EF JUMP JUMPDEST PUSH2 0xEEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0xFB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x531 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x2A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x106C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x5AE CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x1165 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x191 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x117A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x5FA CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0x119A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x61A CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x1208 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CC PUSH2 0x1233 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x193 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x666 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x1242 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x69B CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x1336 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x6BB CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x13C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x6DB CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x1449 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x192 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x703 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x194 SLOAD PUSH2 0x718 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x74B CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0x1496 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x79F CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x1504 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x7BF CALLDATASIZE PUSH1 0x4 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1529 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x801 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x1554 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x812 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x877 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x164D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x8AD JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x8C2 SWAP1 PUSH2 0x29DB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8EE SWAP1 PUSH2 0x29DB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x93B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x910 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x93B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x91E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x953 DUP2 DUP6 DUP6 PUSH2 0x1741 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x97D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x997 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x997 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x9FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA6A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0x21A72CA3902A37B5B2B7 PUSH1 0xB1 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x434E5947 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH2 0x1865 JUMP JUMPDEST PUSH2 0xA72 PUSH2 0x1896 JUMP JUMPDEST PUSH2 0xA7A PUSH2 0x18BF JUMP JUMPDEST PUSH2 0xA82 PUSH2 0x1896 JUMP JUMPDEST PUSH2 0xA8A PUSH2 0x1896 JUMP JUMPDEST PUSH2 0xA95 PUSH1 0x0 CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xAAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xAC5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xAEF PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xB19 PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x191 DUP6 SWAP1 SSTORE PUSH2 0x192 DUP5 SWAP1 SSTORE PUSH1 0x64 DUP4 LT PUSH2 0xB45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x193 DUP4 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x34B73B30B634B2103332B29031B7B63632B1BA37B9 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x194 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xBFB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xC10 DUP6 DUP3 DUP6 PUSH2 0x1974 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1C DUP7 DUP6 PUSH2 0x19EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xC33 JUMPI PUSH2 0xC2E DUP7 DUP7 DUP7 PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0xC60 JUMP JUMPDEST PUSH2 0xC47 DUP7 DUP7 PUSH2 0xC42 DUP5 DUP9 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x194 SLOAD PUSH2 0xC60 SWAP1 DUP8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1A61 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xC89 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xC93 DUP4 DUP4 PUSH2 0x18EE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xD08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH2 0x1C21 JUMP JUMPDEST POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0xD5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A6B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDA8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDCE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2AB7 JUMP JUMPDEST PUSH2 0xDD7 DUP2 PUSH2 0x1C88 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xDF3 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1CB2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x953 DUP2 DUP6 DUP6 PUSH2 0xE09 DUP4 DUP4 PUSH2 0x1529 JUMP JUMPDEST PUSH2 0xE13 SWAP2 SWAP1 PUSH2 0x2B03 JUMP JUMPDEST PUSH2 0x1741 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xE30 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xDF3 PUSH2 0x1E2C JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH2 0xE62 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xC93 DUP4 DUP4 PUSH2 0x1E7E JUMP JUMPDEST PUSH2 0xDF3 CALLER DUP3 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xE8E DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x64 DUP3 LT PUSH2 0xEAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x193 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x74E4A578032013599764BAC4C025EC6D6C6B24A5C2417C5100C13A04516EB971 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0xF35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A6B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF7E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2AB7 JUMP JUMPDEST PUSH2 0xFAD DUP3 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH1 0x1 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x1059 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1084 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1113 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E74206973206E6F742077686974656C6973740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA6667E187C57C5B0FA4E1122A695ED0754287513BCB4901FA6C1F44BA22C0187 SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x1170 DUP3 CALLER DUP4 PUSH2 0x1974 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1192 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xDF3 PUSH2 0x208B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x11B2 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x11D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x191 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x82006E1B22DF9000831FA2FE95E4B46F3DE4F6D8EF57B5B5FF7AB6C9A68B5BA SWAP1 PUSH1 0x20 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x8C2 SWAP1 PUSH2 0x29DB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x125A DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1280 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x12E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1858D8DBDD5B9D081A5CC8189B1858DADB1A5CDD PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7E239E822FA537514CC6B38D8350BDE5CE06A8F9282C77161B926FC077A81026 SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x134E DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1374 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH2 0x194 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xFA62AD95255DB03DB5EAABED7A43B93F377948B56CEA8E12A747B6565582ED5E SWAP1 PUSH1 0x20 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x13D1 DUP3 DUP7 PUSH2 0x1529 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x143E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x1741 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1457 DUP3 DUP6 PUSH2 0x19EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x146E JUMPI PUSH2 0x1469 DUP3 DUP7 DUP7 PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x143E JUMP JUMPDEST PUSH2 0x147D DUP3 DUP7 PUSH2 0xC42 DUP5 DUP9 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x194 SLOAD PUSH2 0x143E SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1A61 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x14AE DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x14CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x192 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xA026E5F510BD032E066C1F6D3212FC9E972AE22A77F2E29DB5BE3F6FCE02308 SWAP1 PUSH1 0x20 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x151F DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xC93 DUP4 DUP4 PUSH2 0x1C21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x156C DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1592 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E74206973206E6F7420626C61636B6C6973740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x54646B2D47B5332DEB93B310542F2C11BC9351E59950CDFB3BA518AF28F13D29 SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1665 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x168B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x16EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1858D8DBDD5B9D081A5CC81DDA1A5D195B1A5CDD PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xE463FA6BDECB16F96F58191D902152633214E760EA443684105A7EEF1AD16B9D SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x17A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1804 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x188C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH2 0x20C8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x18BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x18E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH2 0x18BD PUSH2 0x2116 JUMP JUMPDEST PUSH2 0x18F8 DUP3 DUP3 PUSH2 0x1208 JUMP JUMPDEST PUSH2 0xD12 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1930 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1980 DUP5 DUP5 PUSH2 0x1529 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x19E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x19DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x19E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x1741 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1A1C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x8AD JUMP JUMPDEST PUSH2 0x191 SLOAD DUP4 LT PUSH2 0xC67 JUMPI PUSH2 0x2710 PUSH2 0x193 SLOAD DUP5 PUSH2 0x1A38 SWAP2 SWAP1 PUSH2 0x2B8F JUMP JUMPDEST PUSH2 0x1A42 SWAP2 SWAP1 PUSH2 0x2BAE JUMP JUMPDEST SWAP1 POP PUSH2 0x192 SLOAD DUP2 GT PUSH2 0x1A54 JUMPI DUP1 PUSH2 0x1A59 JUMP JUMPDEST PUSH2 0x192 SLOAD JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1AC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1B27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x1B32 DUP4 DUP4 DUP4 PUSH2 0x2149 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1BAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1C0A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x19E8 JUMP JUMPDEST PUSH2 0xDF3 DUP2 CALLER PUSH2 0x21CD JUMP JUMPDEST PUSH2 0x1C2B DUP3 DUP3 PUSH2 0x1208 JUMP JUMPDEST ISZERO PUSH2 0xD12 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 PUSH2 0xD12 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1CE5 JUMPI PUSH2 0xC93 DUP4 PUSH2 0x2226 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1D4E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1D4B SWAP2 DUP2 ADD SWAP1 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1DB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1E20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST POP PUSH2 0xC93 DUP4 DUP4 DUP4 PUSH2 0x22C2 JUMP JUMPDEST PUSH2 0x1E34 PUSH2 0x22E7 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1ED4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x1EE0 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2149 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1EF2 SWAP2 SWAP1 PUSH2 0x2B03 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1FAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x1FB7 DUP3 PUSH1 0x0 DUP4 PUSH2 0x2149 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x202B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2093 PUSH2 0x2330 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1E61 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2102 SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x2696 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0xC93 SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2696 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x213D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2151 PUSH2 0x2330 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x626C61636B6C6973746564206163636F756E742063616E6E6F74207472616E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3332B9103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x21D7 DUP3 DUP3 PUSH2 0x1208 JUMP JUMPDEST PUSH2 0xD12 JUMPI PUSH2 0x21E4 DUP2 PUSH2 0x2376 JUMP JUMPDEST PUSH2 0x21EF DUP4 PUSH1 0x20 PUSH2 0x2388 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2200 SWAP3 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x9F6 SWAP2 PUSH1 0x4 ADD PUSH2 0x2785 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x2293 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x22CB DUP4 PUSH2 0x2524 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x22D8 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xC93 JUMPI PUSH2 0x19E8 DUP4 DUP4 PUSH2 0x2564 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x18BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x18BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8AD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2397 DUP4 PUSH1 0x2 PUSH2 0x2B8F JUMP JUMPDEST PUSH2 0x23A2 SWAP1 PUSH1 0x2 PUSH2 0x2B03 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23BA JUMPI PUSH2 0x23BA PUSH2 0x28D9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x23E4 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x23FF JUMPI PUSH2 0x23FF PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x242E JUMPI PUSH2 0x242E PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2452 DUP5 PUSH1 0x2 PUSH2 0x2B8F JUMP JUMPDEST PUSH2 0x245D SWAP1 PUSH1 0x1 PUSH2 0x2B03 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x24D5 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2491 JUMPI PUSH2 0x2491 PUSH2 0x2C5E JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x24A7 JUMPI PUSH2 0x24A7 PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x24CE DUP2 PUSH2 0x2C74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2460 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xC67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x252D DUP2 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x25CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x25E7 SWAP2 SWAP1 PUSH2 0x2C8B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2622 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2627 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x264F DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D08 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2658 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2667 JUMPI POP DUP2 PUSH2 0xC67 JUMP JUMPDEST PUSH2 0xC67 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x267C JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP2 SWAP1 PUSH2 0x2785 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x26A2 SWAP1 PUSH2 0x29DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x26C4 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x270A JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x26DD JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x270A JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x270A JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x270A JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x26EF JUMP JUMPDEST POP PUSH2 0x2716 SWAP3 SWAP2 POP PUSH2 0x271A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2716 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x271B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2741 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xC67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2774 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x275C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x19E8 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x27A4 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2759 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27F0 DUP4 PUSH2 0x27B8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2810 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC67 DUP3 PUSH2 0x27B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x282F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH2 0x284D PUSH1 0x60 DUP7 ADD PUSH2 0x27B8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x286D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2876 DUP5 PUSH2 0x27B8 JUMP JUMPDEST SWAP3 POP PUSH2 0x2884 PUSH1 0x20 DUP6 ADD PUSH2 0x27B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x28D0 PUSH1 0x20 DUP5 ADD PUSH2 0x27B8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2902 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x290B DUP4 PUSH2 0x27B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2928 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x293C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x294E JUMPI PUSH2 0x294E PUSH2 0x28D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2976 JUMPI PUSH2 0x2976 PUSH2 0x28D9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x298F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29CD DUP4 PUSH2 0x27B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x28D0 PUSH1 0x20 DUP5 ADD PUSH2 0x27B8 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x29EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2A10 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1A5B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2A66 JUMPI PUSH2 0x2A66 PUSH2 0x2A3E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2B16 JUMPI PUSH2 0x2B16 PUSH2 0x2A3E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1A5B9D985B1A59081858D8DBDD5B9D PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2BA9 JUMPI PUSH2 0x2BA9 PUSH2 0x2A3E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2BCB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2C21 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2759 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2C52 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2759 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2C83 JUMPI PUSH2 0x2C83 PUSH2 0x2A3E JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C9D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2759 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC97667070C54EF182B0F585 DUP12 SUB 0x4B 0xEA 0xC1 0xB6 RETURN ADDMOD SWAP11 LOG2 0xD3 XOR DUP12 0xB1 0xE8 SWAP3 SWAP16 0x4F 0xA9 0xB9 0x29 PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A416464 PUSH19 0x6573733A206C6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220344F3F PUSH13 0x11F0C2C3F69ED82F8C230D7625 CALLDATASIZE CALLDATACOPY 0xC4 BALANCE REVERT PUSH9 0x5CBEFA0BA7F98600B6 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"550:6590:20:-:0;;;1332:4:7;1289:48;;;;1790:53:20;;;;;;;;;-1:-1:-1;1814:22:20;:20;:22::i;:::-;550:6590;;5928:279:6;5996:13;;;;;;;5995:14;5987:66;;;;-1:-1:-1;;;5987:66:6;;216:2:21;5987:66:6;;;198:21:21;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:21;;;338:37;392:19;;5987:66:6;;;;;;;;6067:12;;6082:15;6067:12;;;:30;6063:138;;;6113:12;:30;;-1:-1:-1;;6113:30:6;6128:15;6113:30;;;;;;6162:28;;564:36:21;;;6162:28:6;;552:2:21;537:18;6162:28:6;;;;;;;6063:138;5928:279::o;422:184:21:-;550:6590:20;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":null,"id":42,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_3527":{"entryPoint":null,"id":3527,"parameterSlots":0,"returnSlots":0},"@OPERATOR_ROLE_3532":{"entryPoint":null,"id":3532,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_3522":{"entryPoint":null,"id":3522,"parameterSlots":0,"returnSlots":0},"@UPGRADER_ROLE_3537":{"entryPoint":null,"id":3537,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":null,"id":21,"parameterSlots":0,"returnSlots":0},"@__ERC20Burnable_init_1944":{"entryPoint":6294,"id":1944,"parameterSlots":0,"returnSlots":0},"@__ERC20_init_1283":{"entryPoint":6245,"id":1283,"parameterSlots":2,"returnSlots":0},"@__ERC20_init_unchained_1301":{"entryPoint":8392,"id":1301,"parameterSlots":2,"returnSlots":0},"@__Pausable_init_1140":{"entryPoint":6335,"id":1140,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_1150":{"entryPoint":8470,"id":1150,"parameterSlots":0,"returnSlots":0},"@__UUPSUpgradeable_init_991":{"entryPoint":null,"id":991,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1842":{"entryPoint":null,"id":1842,"parameterSlots":3,"returnSlots":0},"@_approve_1777":{"entryPoint":5953,"id":1777,"parameterSlots":3,"returnSlots":0},"@_authorizeUpgrade_4017":{"entryPoint":7304,"id":4017,"parameterSlots":1,"returnSlots":0},"@_beforeTokenTransfer_1831":{"entryPoint":null,"id":1831,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_4007":{"entryPoint":8521,"id":4007,"parameterSlots":3,"returnSlots":0},"@_burn_1732":{"entryPoint":8011,"id":1732,"parameterSlots":2,"returnSlots":0},"@_calcFee_4071":{"entryPoint":6638,"id":4071,"parameterSlots":2,"returnSlots":1},"@_checkRole_107":{"entryPoint":7191,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":8653,"id":146,"parameterSlots":2,"returnSlots":0},"@_functionDelegateCall_788":{"entryPoint":9572,"id":788,"parameterSlots":2,"returnSlots":1},"@_getImplementation_484":{"entryPoint":null,"id":484,"parameterSlots":0,"returnSlots":1},"@_grantRole_298":{"entryPoint":6382,"id":298,"parameterSlots":2,"returnSlots":0},"@_mint_1660":{"entryPoint":7806,"id":1660,"parameterSlots":2,"returnSlots":0},"@_msgSender_2326":{"entryPoint":null,"id":2326,"parameterSlots":0,"returnSlots":1},"@_pause_1214":{"entryPoint":8331,"id":1214,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_1187":{"entryPoint":9008,"id":1187,"parameterSlots":0,"returnSlots":0},"@_requirePaused_1198":{"entryPoint":8935,"id":1198,"parameterSlots":0,"returnSlots":0},"@_revert_2298":{"entryPoint":null,"id":2298,"parameterSlots":2,"returnSlots":0},"@_revokeRole_329":{"entryPoint":7201,"id":329,"parameterSlots":2,"returnSlots":0},"@_setImplementation_508":{"entryPoint":8742,"id":508,"parameterSlots":1,"returnSlots":0},"@_spendAllowance_1820":{"entryPoint":6516,"id":1820,"parameterSlots":3,"returnSlots":0},"@_transfer_1603":{"entryPoint":6753,"id":1603,"parameterSlots":3,"returnSlots":0},"@_unpause_1230":{"entryPoint":7724,"id":1230,"parameterSlots":0,"returnSlots":0},"@_upgradeToAndCallUUPS_604":{"entryPoint":7346,"id":604,"parameterSlots":3,"returnSlots":0},"@_upgradeToAndCall_551":{"entryPoint":8898,"id":551,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_523":{"entryPoint":9508,"id":523,"parameterSlots":1,"returnSlots":0},"@addBlacklist_3906":{"entryPoint":4674,"id":3906,"parameterSlots":1,"returnSlots":0},"@addWhitelist_3833":{"entryPoint":5709,"id":3833,"parameterSlots":1,"returnSlots":0},"@allowance_1398":{"entryPoint":5417,"id":1398,"parameterSlots":2,"returnSlots":1},"@approve_1423":{"entryPoint":2373,"id":1423,"parameterSlots":2,"returnSlots":1},"@balanceOf_1355":{"entryPoint":null,"id":1355,"parameterSlots":1,"returnSlots":1},"@blacklists_3554":{"entryPoint":null,"id":3554,"parameterSlots":0,"returnSlots":0},"@burnFrom_1984":{"entryPoint":4453,"id":1984,"parameterSlots":2,"returnSlots":0},"@burn_1963":{"entryPoint":3692,"id":1963,"parameterSlots":1,"returnSlots":0},"@decimals_4026":{"entryPoint":null,"id":4026,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1526":{"entryPoint":5059,"id":1526,"parameterSlots":2,"returnSlots":1},"@feeCollector_3546":{"entryPoint":null,"id":3546,"parameterSlots":0,"returnSlots":0},"@feeMaxAmount_3542":{"entryPoint":null,"id":3542,"parameterSlots":0,"returnSlots":0},"@feeRate_3544":{"entryPoint":null,"id":3544,"parameterSlots":0,"returnSlots":0},"@feeStartAmount_3540":{"entryPoint":null,"id":3540,"parameterSlots":0,"returnSlots":0},"@getAddressSlot_2367":{"entryPoint":null,"id":2367,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_2378":{"entryPoint":null,"id":2378,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":null,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":3182,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":4616,"id":94,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1485":{"entryPoint":3574,"id":1485,"parameterSlots":2,"returnSlots":1},"@initialize_3693":{"entryPoint":2397,"id":3693,"parameterSlots":4,"returnSlots":0},"@isContract_2033":{"entryPoint":null,"id":2033,"parameterSlots":1,"returnSlots":1},"@mint_3978":{"entryPoint":3640,"id":3978,"parameterSlots":2,"returnSlots":0},"@name_1311":{"entryPoint":2227,"id":1311,"parameterSlots":0,"returnSlots":1},"@pause_3952":{"entryPoint":4474,"id":3952,"parameterSlots":0,"returnSlots":0},"@paused_1175":{"entryPoint":null,"id":1175,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_1054":{"entryPoint":4025,"id":1054,"parameterSlots":0,"returnSlots":1},"@removeBlacklist_3942":{"entryPoint":5460,"id":3942,"parameterSlots":1,"returnSlots":0},"@removeWhitelist_3869":{"entryPoint":4204,"id":3869,"parameterSlots":1,"returnSlots":0},"@renounceRole_224":{"entryPoint":3224,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":5380,"id":201,"parameterSlots":2,"returnSlots":0},"@setFeeCollector_3796":{"entryPoint":4918,"id":3796,"parameterSlots":1,"returnSlots":0},"@setFeeMaxAmount_3741":{"entryPoint":5270,"id":3741,"parameterSlots":1,"returnSlots":0},"@setFeeRate_3769":{"entryPoint":3702,"id":3769,"parameterSlots":1,"returnSlots":0},"@setMinAmount_3717":{"entryPoint":4506,"id":3717,"parameterSlots":1,"returnSlots":0},"@supportsInterface_2614":{"entryPoint":null,"id":2614,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":2172,"id":75,"parameterSlots":1,"returnSlots":1},"@symbol_1321":{"entryPoint":4659,"id":1321,"parameterSlots":0,"returnSlots":1},"@toHexString_2555":{"entryPoint":9096,"id":2555,"parameterSlots":2,"returnSlots":1},"@toHexString_2575":{"entryPoint":9078,"id":2575,"parameterSlots":1,"returnSlots":1},"@totalSupply_1341":{"entryPoint":null,"id":1341,"parameterSlots":0,"returnSlots":1},"@transferFrom_4181":{"entryPoint":3074,"id":4181,"parameterSlots":3,"returnSlots":1},"@transfer_4122":{"entryPoint":5193,"id":4122,"parameterSlots":2,"returnSlots":1},"@unpause_3962":{"entryPoint":3608,"id":3962,"parameterSlots":0,"returnSlots":0},"@upgradeToAndCall_1097":{"entryPoint":3820,"id":1097,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1076":{"entryPoint":3350,"id":1076,"parameterSlots":1,"returnSlots":0},"@verifyCallResult_2278":{"entryPoint":9816,"id":2278,"parameterSlots":3,"returnSlots":1},"@whitelists_3550":{"entryPoint":null,"id":3550,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":10168,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10238,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10673,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":10328,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":10479,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":10196,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":10388,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":11216,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":10413,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":10031,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_uint256t_address":{"entryPoint":10265,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11403,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11241,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10117,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0221073b04a195f41ceec19e14ed481d06218ff24b4f3832a83178764d94077a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0b7c118edc538726ccbd59152e97c083b4206ea63293b28a0b77cb7081e31d2d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_290f357bdfb105b49810905e93f861548504e8146e3245a390401d62a88aafea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10859,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10774,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10935,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_69b03c7d7a99ff16bc6d3ef408ae162cb1ea1fc4ad31bbcb181add4e650e48c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_75de82bf50b05703e664848a18e5dd7964da8935417af3c2493472728fa0a272__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11076,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11035,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_debc7eb6730b2b24e54313ab6eed030e231c0ceea33c10e18fbd589b5a03dbf6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11011,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":11182,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":11151,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":10836,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":10073,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":11380,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":10715,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":10814,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11358,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10457,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:20195:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:21","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:21"},"nodeType":"YulFunctionCall","src":"131:12:21"},"nodeType":"YulExpressionStatement","src":"131:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:21"},"nodeType":"YulFunctionCall","src":"100:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:21"},"nodeType":"YulFunctionCall","src":"96:32:21"},"nodeType":"YulIf","src":"93:52:21"},{"nodeType":"YulVariableDeclaration","src":"154:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:21"},"nodeType":"YulFunctionCall","src":"167:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:21"},"nodeType":"YulFunctionCall","src":"256:12:21"},"nodeType":"YulExpressionStatement","src":"256:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:21","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:21"},"nodeType":"YulFunctionCall","src":"230:20:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:21"},"nodeType":"YulFunctionCall","src":"219:32:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:21"},"nodeType":"YulFunctionCall","src":"209:43:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:21"},"nodeType":"YulFunctionCall","src":"202:51:21"},"nodeType":"YulIf","src":"199:71:21"},{"nodeType":"YulAssignment","src":"279:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:21"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:21","type":""}],"src":"14:286:21"},{"body":{"nodeType":"YulBlock","src":"400:92:21","statements":[{"nodeType":"YulAssignment","src":"410:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:21"},"nodeType":"YulFunctionCall","src":"418:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:21"},"nodeType":"YulFunctionCall","src":"470:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:21"},"nodeType":"YulFunctionCall","src":"463:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:21"},"nodeType":"YulFunctionCall","src":"445:41:21"},"nodeType":"YulExpressionStatement","src":"445:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:21","type":""}],"src":"305:187:21"},{"body":{"nodeType":"YulBlock","src":"550:205:21","statements":[{"nodeType":"YulVariableDeclaration","src":"560:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"569:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"564:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"629:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"654:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"659:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"650:3:21"},"nodeType":"YulFunctionCall","src":"650:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"673:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"678:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"669:3:21"},"nodeType":"YulFunctionCall","src":"669:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"663:5:21"},"nodeType":"YulFunctionCall","src":"663:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"643:6:21"},"nodeType":"YulFunctionCall","src":"643:39:21"},"nodeType":"YulExpressionStatement","src":"643:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"590:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"593:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"587:2:21"},"nodeType":"YulFunctionCall","src":"587:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"601:19:21","statements":[{"nodeType":"YulAssignment","src":"603:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"612:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"615:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"608:3:21"},"nodeType":"YulFunctionCall","src":"608:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"603:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"583:3:21","statements":[]},"src":"579:113:21"},{"body":{"nodeType":"YulBlock","src":"718:31:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"731:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"736:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"727:3:21"},"nodeType":"YulFunctionCall","src":"727:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"745:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"720:6:21"},"nodeType":"YulFunctionCall","src":"720:27:21"},"nodeType":"YulExpressionStatement","src":"720:27:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"707:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"710:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"704:2:21"},"nodeType":"YulFunctionCall","src":"704:13:21"},"nodeType":"YulIf","src":"701:48:21"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"528:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"533:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"538:6:21","type":""}],"src":"497:258:21"},{"body":{"nodeType":"YulBlock","src":"881:262:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"898:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"909:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"891:6:21"},"nodeType":"YulFunctionCall","src":"891:21:21"},"nodeType":"YulExpressionStatement","src":"891:21:21"},{"nodeType":"YulVariableDeclaration","src":"921:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"941:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"935:5:21"},"nodeType":"YulFunctionCall","src":"935:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"925:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"968:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"979:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"964:3:21"},"nodeType":"YulFunctionCall","src":"964:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"984:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"957:6:21"},"nodeType":"YulFunctionCall","src":"957:34:21"},"nodeType":"YulExpressionStatement","src":"957:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1026:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1034:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1022:3:21"},"nodeType":"YulFunctionCall","src":"1022:15:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1043:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1054:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1039:3:21"},"nodeType":"YulFunctionCall","src":"1039:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"1059:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"1000:21:21"},"nodeType":"YulFunctionCall","src":"1000:66:21"},"nodeType":"YulExpressionStatement","src":"1000:66:21"},{"nodeType":"YulAssignment","src":"1075:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1091:9:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1110:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1118:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1106:3:21"},"nodeType":"YulFunctionCall","src":"1106:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1127:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1123:3:21"},"nodeType":"YulFunctionCall","src":"1123:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1102:3:21"},"nodeType":"YulFunctionCall","src":"1102:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1087:3:21"},"nodeType":"YulFunctionCall","src":"1087:45:21"},{"kind":"number","nodeType":"YulLiteral","src":"1134:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1083:3:21"},"nodeType":"YulFunctionCall","src":"1083:54:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1075:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"850:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"861:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"872:4:21","type":""}],"src":"760:383:21"},{"body":{"nodeType":"YulBlock","src":"1197:124:21","statements":[{"nodeType":"YulAssignment","src":"1207:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1229:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1216:12:21"},"nodeType":"YulFunctionCall","src":"1216:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1207:5:21"}]},{"body":{"nodeType":"YulBlock","src":"1299:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1308:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1311:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1301:6:21"},"nodeType":"YulFunctionCall","src":"1301:12:21"},"nodeType":"YulExpressionStatement","src":"1301:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1258:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1269:5:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1284:3:21","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1289:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1280:3:21"},"nodeType":"YulFunctionCall","src":"1280:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"1293:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1276:3:21"},"nodeType":"YulFunctionCall","src":"1276:19:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1265:3:21"},"nodeType":"YulFunctionCall","src":"1265:31:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1255:2:21"},"nodeType":"YulFunctionCall","src":"1255:42:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1248:6:21"},"nodeType":"YulFunctionCall","src":"1248:50:21"},"nodeType":"YulIf","src":"1245:70:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1176:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1187:5:21","type":""}],"src":"1148:173:21"},{"body":{"nodeType":"YulBlock","src":"1413:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"1459:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1471:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1461:6:21"},"nodeType":"YulFunctionCall","src":"1461:12:21"},"nodeType":"YulExpressionStatement","src":"1461:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1434:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1430:3:21"},"nodeType":"YulFunctionCall","src":"1430:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1455:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1426:3:21"},"nodeType":"YulFunctionCall","src":"1426:32:21"},"nodeType":"YulIf","src":"1423:52:21"},{"nodeType":"YulAssignment","src":"1484:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1513:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1494:18:21"},"nodeType":"YulFunctionCall","src":"1494:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1484:6:21"}]},{"nodeType":"YulAssignment","src":"1532:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1559:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1570:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1555:3:21"},"nodeType":"YulFunctionCall","src":"1555:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1542:12:21"},"nodeType":"YulFunctionCall","src":"1542:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1532:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1371:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1382:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1394:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1402:6:21","type":""}],"src":"1326:254:21"},{"body":{"nodeType":"YulBlock","src":"1655:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:21"},"nodeType":"YulFunctionCall","src":"1703:12:21"},"nodeType":"YulExpressionStatement","src":"1703:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1676:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1685:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1672:3:21"},"nodeType":"YulFunctionCall","src":"1672:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1697:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1668:3:21"},"nodeType":"YulFunctionCall","src":"1668:32:21"},"nodeType":"YulIf","src":"1665:52:21"},{"nodeType":"YulAssignment","src":"1726:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1755:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1736:18:21"},"nodeType":"YulFunctionCall","src":"1736:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1726:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1621:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1632:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1644:6:21","type":""}],"src":"1585:186:21"},{"body":{"nodeType":"YulBlock","src":"1877:76:21","statements":[{"nodeType":"YulAssignment","src":"1887:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1899:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1910:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1895:3:21"},"nodeType":"YulFunctionCall","src":"1895:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1887:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1929:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"1940:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1922:6:21"},"nodeType":"YulFunctionCall","src":"1922:25:21"},"nodeType":"YulExpressionStatement","src":"1922:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1846:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1857:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1868:4:21","type":""}],"src":"1776:177:21"},{"body":{"nodeType":"YulBlock","src":"2079:270:21","statements":[{"body":{"nodeType":"YulBlock","src":"2126:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2135:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2138:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2128:6:21"},"nodeType":"YulFunctionCall","src":"2128:12:21"},"nodeType":"YulExpressionStatement","src":"2128:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2100:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2109:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2096:3:21"},"nodeType":"YulFunctionCall","src":"2096:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2121:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2092:3:21"},"nodeType":"YulFunctionCall","src":"2092:33:21"},"nodeType":"YulIf","src":"2089:53:21"},{"nodeType":"YulAssignment","src":"2151:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2174:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2161:12:21"},"nodeType":"YulFunctionCall","src":"2161:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2151:6:21"}]},{"nodeType":"YulAssignment","src":"2193:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2220:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2231:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2216:3:21"},"nodeType":"YulFunctionCall","src":"2216:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2203:12:21"},"nodeType":"YulFunctionCall","src":"2203:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2193:6:21"}]},{"nodeType":"YulAssignment","src":"2244:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2271:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2282:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2267:3:21"},"nodeType":"YulFunctionCall","src":"2267:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2254:12:21"},"nodeType":"YulFunctionCall","src":"2254:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2244:6:21"}]},{"nodeType":"YulAssignment","src":"2295:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2328:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2339:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2324:3:21"},"nodeType":"YulFunctionCall","src":"2324:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2305:18:21"},"nodeType":"YulFunctionCall","src":"2305:38:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2295:6:21"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2021:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2032:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2044:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2052:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2060:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2068:6:21","type":""}],"src":"1958:391:21"},{"body":{"nodeType":"YulBlock","src":"2458:224:21","statements":[{"body":{"nodeType":"YulBlock","src":"2504:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2513:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2516:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2506:6:21"},"nodeType":"YulFunctionCall","src":"2506:12:21"},"nodeType":"YulExpressionStatement","src":"2506:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2479:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2488:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2475:3:21"},"nodeType":"YulFunctionCall","src":"2475:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2500:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2471:3:21"},"nodeType":"YulFunctionCall","src":"2471:32:21"},"nodeType":"YulIf","src":"2468:52:21"},{"nodeType":"YulAssignment","src":"2529:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2558:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2539:18:21"},"nodeType":"YulFunctionCall","src":"2539:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2529:6:21"}]},{"nodeType":"YulAssignment","src":"2577:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2610:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2621:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:21"},"nodeType":"YulFunctionCall","src":"2606:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2587:18:21"},"nodeType":"YulFunctionCall","src":"2587:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2577:6:21"}]},{"nodeType":"YulAssignment","src":"2634:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2661:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2672:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2657:3:21"},"nodeType":"YulFunctionCall","src":"2657:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2644:12:21"},"nodeType":"YulFunctionCall","src":"2644:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2634:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2408:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2419:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2431:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2439:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2447:6:21","type":""}],"src":"2354:328:21"},{"body":{"nodeType":"YulBlock","src":"2757:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"2803:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2812:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2815:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2805:6:21"},"nodeType":"YulFunctionCall","src":"2805:12:21"},"nodeType":"YulExpressionStatement","src":"2805:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2778:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2787:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2774:3:21"},"nodeType":"YulFunctionCall","src":"2774:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2799:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2770:3:21"},"nodeType":"YulFunctionCall","src":"2770:32:21"},"nodeType":"YulIf","src":"2767:52:21"},{"nodeType":"YulAssignment","src":"2828:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2851:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2838:12:21"},"nodeType":"YulFunctionCall","src":"2838:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2828:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2723:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2734:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2746:6:21","type":""}],"src":"2687:180:21"},{"body":{"nodeType":"YulBlock","src":"2973:76:21","statements":[{"nodeType":"YulAssignment","src":"2983:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2995:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3006:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2991:3:21"},"nodeType":"YulFunctionCall","src":"2991:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2983:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3025:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"3036:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3018:6:21"},"nodeType":"YulFunctionCall","src":"3018:25:21"},"nodeType":"YulExpressionStatement","src":"3018:25:21"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2942:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2953:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2964:4:21","type":""}],"src":"2872:177:21"},{"body":{"nodeType":"YulBlock","src":"3141:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"3187:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3196:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3199:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3189:6:21"},"nodeType":"YulFunctionCall","src":"3189:12:21"},"nodeType":"YulExpressionStatement","src":"3189:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3162:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3171:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3158:3:21"},"nodeType":"YulFunctionCall","src":"3158:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3183:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3154:3:21"},"nodeType":"YulFunctionCall","src":"3154:32:21"},"nodeType":"YulIf","src":"3151:52:21"},{"nodeType":"YulAssignment","src":"3212:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3235:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3222:12:21"},"nodeType":"YulFunctionCall","src":"3222:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3212:6:21"}]},{"nodeType":"YulAssignment","src":"3254:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3287:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3298:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3283:3:21"},"nodeType":"YulFunctionCall","src":"3283:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3264:18:21"},"nodeType":"YulFunctionCall","src":"3264:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3254:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3099:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3110:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3122:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3130:6:21","type":""}],"src":"3054:254:21"},{"body":{"nodeType":"YulBlock","src":"3410:87:21","statements":[{"nodeType":"YulAssignment","src":"3420:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3432:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3443:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3428:3:21"},"nodeType":"YulFunctionCall","src":"3428:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3420:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3462:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3477:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3485:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3473:3:21"},"nodeType":"YulFunctionCall","src":"3473:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3455:6:21"},"nodeType":"YulFunctionCall","src":"3455:36:21"},"nodeType":"YulExpressionStatement","src":"3455:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3379:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3390:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3401:4:21","type":""}],"src":"3313:184:21"},{"body":{"nodeType":"YulBlock","src":"3572:110:21","statements":[{"body":{"nodeType":"YulBlock","src":"3618:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3627:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3630:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3620:6:21"},"nodeType":"YulFunctionCall","src":"3620:12:21"},"nodeType":"YulExpressionStatement","src":"3620:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3593:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3602:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3589:3:21"},"nodeType":"YulFunctionCall","src":"3589:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3614:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3585:3:21"},"nodeType":"YulFunctionCall","src":"3585:32:21"},"nodeType":"YulIf","src":"3582:52:21"},{"nodeType":"YulAssignment","src":"3643:33:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3666:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3653:12:21"},"nodeType":"YulFunctionCall","src":"3653:23:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3643:6:21"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3538:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3549:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3561:6:21","type":""}],"src":"3502:180:21"},{"body":{"nodeType":"YulBlock","src":"3719:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3736:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3743:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3748:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3739:3:21"},"nodeType":"YulFunctionCall","src":"3739:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3729:6:21"},"nodeType":"YulFunctionCall","src":"3729:31:21"},"nodeType":"YulExpressionStatement","src":"3729:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3776:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3779:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3769:6:21"},"nodeType":"YulFunctionCall","src":"3769:15:21"},"nodeType":"YulExpressionStatement","src":"3769:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3800:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3803:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3793:6:21"},"nodeType":"YulFunctionCall","src":"3793:15:21"},"nodeType":"YulExpressionStatement","src":"3793:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3687:127:21"},{"body":{"nodeType":"YulBlock","src":"3915:899:21","statements":[{"body":{"nodeType":"YulBlock","src":"3961:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3970:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3973:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3963:6:21"},"nodeType":"YulFunctionCall","src":"3963:12:21"},"nodeType":"YulExpressionStatement","src":"3963:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3936:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3945:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3932:3:21"},"nodeType":"YulFunctionCall","src":"3932:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3957:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3928:3:21"},"nodeType":"YulFunctionCall","src":"3928:32:21"},"nodeType":"YulIf","src":"3925:52:21"},{"nodeType":"YulAssignment","src":"3986:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4015:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3996:18:21"},"nodeType":"YulFunctionCall","src":"3996:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3986:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4034:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4065:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4076:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4061:3:21"},"nodeType":"YulFunctionCall","src":"4061:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4048:12:21"},"nodeType":"YulFunctionCall","src":"4048:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4038:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4089:28:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4099:18:21","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4093:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4144:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4153:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4156:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4146:6:21"},"nodeType":"YulFunctionCall","src":"4146:12:21"},"nodeType":"YulExpressionStatement","src":"4146:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4132:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4140:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4129:2:21"},"nodeType":"YulFunctionCall","src":"4129:14:21"},"nodeType":"YulIf","src":"4126:34:21"},{"nodeType":"YulVariableDeclaration","src":"4169:32:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4183:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4194:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4179:3:21"},"nodeType":"YulFunctionCall","src":"4179:22:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4173:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4249:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4258:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4261:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4251:6:21"},"nodeType":"YulFunctionCall","src":"4251:12:21"},"nodeType":"YulExpressionStatement","src":"4251:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4228:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"4232:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4224:3:21"},"nodeType":"YulFunctionCall","src":"4224:13:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4239:7:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4220:3:21"},"nodeType":"YulFunctionCall","src":"4220:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4213:6:21"},"nodeType":"YulFunctionCall","src":"4213:35:21"},"nodeType":"YulIf","src":"4210:55:21"},{"nodeType":"YulVariableDeclaration","src":"4274:26:21","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4297:2:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4284:12:21"},"nodeType":"YulFunctionCall","src":"4284:16:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4278:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4323:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4325:16:21"},"nodeType":"YulFunctionCall","src":"4325:18:21"},"nodeType":"YulExpressionStatement","src":"4325:18:21"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4315:2:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4319:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4312:2:21"},"nodeType":"YulFunctionCall","src":"4312:10:21"},"nodeType":"YulIf","src":"4309:36:21"},{"nodeType":"YulVariableDeclaration","src":"4354:17:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4368:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4364:3:21"},"nodeType":"YulFunctionCall","src":"4364:7:21"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4358:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4380:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4400:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4394:5:21"},"nodeType":"YulFunctionCall","src":"4394:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4384:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4412:71:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4434:6:21"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4458:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"4462:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4454:3:21"},"nodeType":"YulFunctionCall","src":"4454:13:21"},{"name":"_4","nodeType":"YulIdentifier","src":"4469:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4450:3:21"},"nodeType":"YulFunctionCall","src":"4450:22:21"},{"kind":"number","nodeType":"YulLiteral","src":"4474:2:21","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4446:3:21"},"nodeType":"YulFunctionCall","src":"4446:31:21"},{"name":"_4","nodeType":"YulIdentifier","src":"4479:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4442:3:21"},"nodeType":"YulFunctionCall","src":"4442:40:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4430:3:21"},"nodeType":"YulFunctionCall","src":"4430:53:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4416:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4542:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4544:16:21"},"nodeType":"YulFunctionCall","src":"4544:18:21"},"nodeType":"YulExpressionStatement","src":"4544:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4501:10:21"},{"name":"_1","nodeType":"YulIdentifier","src":"4513:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4498:2:21"},"nodeType":"YulFunctionCall","src":"4498:18:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4521:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4533:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4518:2:21"},"nodeType":"YulFunctionCall","src":"4518:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4495:2:21"},"nodeType":"YulFunctionCall","src":"4495:46:21"},"nodeType":"YulIf","src":"4492:72:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4580:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4584:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4573:6:21"},"nodeType":"YulFunctionCall","src":"4573:22:21"},"nodeType":"YulExpressionStatement","src":"4573:22:21"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4611:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"4619:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4604:6:21"},"nodeType":"YulFunctionCall","src":"4604:18:21"},"nodeType":"YulExpressionStatement","src":"4604:18:21"},{"body":{"nodeType":"YulBlock","src":"4668:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4677:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4680:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4670:6:21"},"nodeType":"YulFunctionCall","src":"4670:12:21"},"nodeType":"YulExpressionStatement","src":"4670:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4645:2:21"},{"name":"_3","nodeType":"YulIdentifier","src":"4649:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4641:3:21"},"nodeType":"YulFunctionCall","src":"4641:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"4654:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4637:3:21"},"nodeType":"YulFunctionCall","src":"4637:20:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4659:7:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4634:2:21"},"nodeType":"YulFunctionCall","src":"4634:33:21"},"nodeType":"YulIf","src":"4631:53:21"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4710:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4718:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4706:3:21"},"nodeType":"YulFunctionCall","src":"4706:15:21"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4727:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"4731:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4723:3:21"},"nodeType":"YulFunctionCall","src":"4723:11:21"},{"name":"_3","nodeType":"YulIdentifier","src":"4736:2:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4693:12:21"},"nodeType":"YulFunctionCall","src":"4693:46:21"},"nodeType":"YulExpressionStatement","src":"4693:46:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4763:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"4771:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4759:3:21"},"nodeType":"YulFunctionCall","src":"4759:15:21"},{"kind":"number","nodeType":"YulLiteral","src":"4776:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:21"},"nodeType":"YulFunctionCall","src":"4755:24:21"},{"kind":"number","nodeType":"YulLiteral","src":"4781:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4748:6:21"},"nodeType":"YulFunctionCall","src":"4748:35:21"},"nodeType":"YulExpressionStatement","src":"4748:35:21"},{"nodeType":"YulAssignment","src":"4792:16:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4802:6:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4792:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3873:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3884:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3896:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3904:6:21","type":""}],"src":"3819:995:21"},{"body":{"nodeType":"YulBlock","src":"4920:102:21","statements":[{"nodeType":"YulAssignment","src":"4930:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4942:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4953:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4938:3:21"},"nodeType":"YulFunctionCall","src":"4938:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4930:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4972:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4987:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5003:3:21","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5008:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4999:3:21"},"nodeType":"YulFunctionCall","src":"4999:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"5012:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4995:3:21"},"nodeType":"YulFunctionCall","src":"4995:19:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4983:3:21"},"nodeType":"YulFunctionCall","src":"4983:32:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4965:6:21"},"nodeType":"YulFunctionCall","src":"4965:51:21"},"nodeType":"YulExpressionStatement","src":"4965:51:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4900:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4911:4:21","type":""}],"src":"4819:203:21"},{"body":{"nodeType":"YulBlock","src":"5114:173:21","statements":[{"body":{"nodeType":"YulBlock","src":"5160:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5169:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5172:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5162:6:21"},"nodeType":"YulFunctionCall","src":"5162:12:21"},"nodeType":"YulExpressionStatement","src":"5162:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5135:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5144:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5131:3:21"},"nodeType":"YulFunctionCall","src":"5131:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5156:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5127:3:21"},"nodeType":"YulFunctionCall","src":"5127:32:21"},"nodeType":"YulIf","src":"5124:52:21"},{"nodeType":"YulAssignment","src":"5185:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5214:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5195:18:21"},"nodeType":"YulFunctionCall","src":"5195:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5185:6:21"}]},{"nodeType":"YulAssignment","src":"5233:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5266:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5277:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5262:3:21"},"nodeType":"YulFunctionCall","src":"5262:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5243:18:21"},"nodeType":"YulFunctionCall","src":"5243:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5233:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5072:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5083:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5095:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5103:6:21","type":""}],"src":"5027:260:21"},{"body":{"nodeType":"YulBlock","src":"5347:325:21","statements":[{"nodeType":"YulAssignment","src":"5357:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5371:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"5374:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5367:3:21"},"nodeType":"YulFunctionCall","src":"5367:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5357:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"5388:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5418:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"5424:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5414:3:21"},"nodeType":"YulFunctionCall","src":"5414:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5392:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5465:31:21","statements":[{"nodeType":"YulAssignment","src":"5467:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5481:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5489:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5477:3:21"},"nodeType":"YulFunctionCall","src":"5477:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5467:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5445:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5438:6:21"},"nodeType":"YulFunctionCall","src":"5438:26:21"},"nodeType":"YulIf","src":"5435:61:21"},{"body":{"nodeType":"YulBlock","src":"5555:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5576:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5583:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5588:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5579:3:21"},"nodeType":"YulFunctionCall","src":"5579:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5569:6:21"},"nodeType":"YulFunctionCall","src":"5569:31:21"},"nodeType":"YulExpressionStatement","src":"5569:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5620:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5623:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5613:6:21"},"nodeType":"YulFunctionCall","src":"5613:15:21"},"nodeType":"YulExpressionStatement","src":"5613:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5648:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5651:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5641:6:21"},"nodeType":"YulFunctionCall","src":"5641:15:21"},"nodeType":"YulExpressionStatement","src":"5641:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5511:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5534:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5542:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5531:2:21"},"nodeType":"YulFunctionCall","src":"5531:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5508:2:21"},"nodeType":"YulFunctionCall","src":"5508:38:21"},"nodeType":"YulIf","src":"5505:161:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5327:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5336:6:21","type":""}],"src":"5292:380:21"},{"body":{"nodeType":"YulBlock","src":"5851:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5868:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5879:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5861:6:21"},"nodeType":"YulFunctionCall","src":"5861:21:21"},"nodeType":"YulExpressionStatement","src":"5861:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5902:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5913:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5898:3:21"},"nodeType":"YulFunctionCall","src":"5898:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5918:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5891:6:21"},"nodeType":"YulFunctionCall","src":"5891:30:21"},"nodeType":"YulExpressionStatement","src":"5891:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5941:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5952:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5937:3:21"},"nodeType":"YulFunctionCall","src":"5937:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"5957:34:21","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5930:6:21"},"nodeType":"YulFunctionCall","src":"5930:62:21"},"nodeType":"YulExpressionStatement","src":"5930:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6012:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6023:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6008:3:21"},"nodeType":"YulFunctionCall","src":"6008:18:21"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"6028:16:21","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6001:6:21"},"nodeType":"YulFunctionCall","src":"6001:44:21"},"nodeType":"YulExpressionStatement","src":"6001:44:21"},{"nodeType":"YulAssignment","src":"6054:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6066:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6077:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6062:3:21"},"nodeType":"YulFunctionCall","src":"6062:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6054:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5828:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5842:4:21","type":""}],"src":"5677:410:21"},{"body":{"nodeType":"YulBlock","src":"6266:164:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6283:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6294:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6276:6:21"},"nodeType":"YulFunctionCall","src":"6276:21:21"},"nodeType":"YulExpressionStatement","src":"6276:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6317:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6328:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6313:3:21"},"nodeType":"YulFunctionCall","src":"6313:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"6333:2:21","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6306:6:21"},"nodeType":"YulFunctionCall","src":"6306:30:21"},"nodeType":"YulExpressionStatement","src":"6306:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6356:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6367:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6352:3:21"},"nodeType":"YulFunctionCall","src":"6352:18:21"},{"hexValue":"696e76616c696420616d6f756e74","kind":"string","nodeType":"YulLiteral","src":"6372:16:21","type":"","value":"invalid amount"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6345:6:21"},"nodeType":"YulFunctionCall","src":"6345:44:21"},"nodeType":"YulExpressionStatement","src":"6345:44:21"},{"nodeType":"YulAssignment","src":"6398:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6410:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6421:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6406:3:21"},"nodeType":"YulFunctionCall","src":"6406:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6398:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6243:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6257:4:21","type":""}],"src":"6092:338:21"},{"body":{"nodeType":"YulBlock","src":"6609:171:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6626:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6637:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6619:6:21"},"nodeType":"YulFunctionCall","src":"6619:21:21"},"nodeType":"YulExpressionStatement","src":"6619:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6660:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6671:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6656:3:21"},"nodeType":"YulFunctionCall","src":"6656:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"6676:2:21","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6649:6:21"},"nodeType":"YulFunctionCall","src":"6649:30:21"},"nodeType":"YulExpressionStatement","src":"6649:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6699:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6710:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6695:3:21"},"nodeType":"YulFunctionCall","src":"6695:18:21"},{"hexValue":"696e76616c69642066656520636f6c6c6563746f72","kind":"string","nodeType":"YulLiteral","src":"6715:23:21","type":"","value":"invalid fee collector"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6688:6:21"},"nodeType":"YulFunctionCall","src":"6688:51:21"},"nodeType":"YulExpressionStatement","src":"6688:51:21"},{"nodeType":"YulAssignment","src":"6748:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6760:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6771:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6756:3:21"},"nodeType":"YulFunctionCall","src":"6756:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6748:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_75de82bf50b05703e664848a18e5dd7964da8935417af3c2493472728fa0a272__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6586:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6600:4:21","type":""}],"src":"6435:345:21"},{"body":{"nodeType":"YulBlock","src":"6892:87:21","statements":[{"nodeType":"YulAssignment","src":"6902:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6914:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6925:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6910:3:21"},"nodeType":"YulFunctionCall","src":"6910:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6902:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6944:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6959:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6967:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6955:3:21"},"nodeType":"YulFunctionCall","src":"6955:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6937:6:21"},"nodeType":"YulFunctionCall","src":"6937:36:21"},"nodeType":"YulExpressionStatement","src":"6937:36:21"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6861:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6872:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6883:4:21","type":""}],"src":"6785:194:21"},{"body":{"nodeType":"YulBlock","src":"7016:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7033:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7040:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7045:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7036:3:21"},"nodeType":"YulFunctionCall","src":"7036:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7026:6:21"},"nodeType":"YulFunctionCall","src":"7026:31:21"},"nodeType":"YulExpressionStatement","src":"7026:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7073:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7076:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7066:6:21"},"nodeType":"YulFunctionCall","src":"7066:15:21"},"nodeType":"YulExpressionStatement","src":"7066:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7097:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7100:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7090:6:21"},"nodeType":"YulFunctionCall","src":"7090:15:21"},"nodeType":"YulExpressionStatement","src":"7090:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6984:127:21"},{"body":{"nodeType":"YulBlock","src":"7165:76:21","statements":[{"body":{"nodeType":"YulBlock","src":"7187:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7189:16:21"},"nodeType":"YulFunctionCall","src":"7189:18:21"},"nodeType":"YulExpressionStatement","src":"7189:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7181:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"7184:1:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7178:2:21"},"nodeType":"YulFunctionCall","src":"7178:8:21"},"nodeType":"YulIf","src":"7175:34:21"},{"nodeType":"YulAssignment","src":"7218:17:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7230:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"7233:1:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7226:3:21"},"nodeType":"YulFunctionCall","src":"7226:9:21"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"7218:4:21"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7147:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"7150:1:21","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"7156:4:21","type":""}],"src":"7116:125:21"},{"body":{"nodeType":"YulBlock","src":"7420:237:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7437:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7448:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7430:6:21"},"nodeType":"YulFunctionCall","src":"7430:21:21"},"nodeType":"YulExpressionStatement","src":"7430:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7471:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7482:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7467:3:21"},"nodeType":"YulFunctionCall","src":"7467:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"7487:2:21","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7460:6:21"},"nodeType":"YulFunctionCall","src":"7460:30:21"},"nodeType":"YulExpressionStatement","src":"7460:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7510:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7521:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7506:3:21"},"nodeType":"YulFunctionCall","src":"7506:18:21"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"7526:34:21","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7499:6:21"},"nodeType":"YulFunctionCall","src":"7499:62:21"},"nodeType":"YulExpressionStatement","src":"7499:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7581:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7592:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7577:3:21"},"nodeType":"YulFunctionCall","src":"7577:18:21"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"7597:17:21","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7570:6:21"},"nodeType":"YulFunctionCall","src":"7570:45:21"},"nodeType":"YulExpressionStatement","src":"7570:45:21"},{"nodeType":"YulAssignment","src":"7624:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7636:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7647:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7632:3:21"},"nodeType":"YulFunctionCall","src":"7632:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7624:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7397:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7411:4:21","type":""}],"src":"7246:411:21"},{"body":{"nodeType":"YulBlock","src":"7836:234:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7853:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7864:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7846:6:21"},"nodeType":"YulFunctionCall","src":"7846:21:21"},"nodeType":"YulExpressionStatement","src":"7846:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7887:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7898:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7883:3:21"},"nodeType":"YulFunctionCall","src":"7883:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"7903:2:21","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7876:6:21"},"nodeType":"YulFunctionCall","src":"7876:30:21"},"nodeType":"YulExpressionStatement","src":"7876:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7926:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7937:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7922:3:21"},"nodeType":"YulFunctionCall","src":"7922:18:21"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"7942:34:21","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7915:6:21"},"nodeType":"YulFunctionCall","src":"7915:62:21"},"nodeType":"YulExpressionStatement","src":"7915:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7997:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8008:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7993:3:21"},"nodeType":"YulFunctionCall","src":"7993:18:21"},{"hexValue":"64656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"8013:14:21","type":"","value":"delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7986:6:21"},"nodeType":"YulFunctionCall","src":"7986:42:21"},"nodeType":"YulExpressionStatement","src":"7986:42:21"},{"nodeType":"YulAssignment","src":"8037:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8049:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8060:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8045:3:21"},"nodeType":"YulFunctionCall","src":"8045:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8037:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7813:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7827:4:21","type":""}],"src":"7662:408:21"},{"body":{"nodeType":"YulBlock","src":"8249:234:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8266:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8277:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8259:6:21"},"nodeType":"YulFunctionCall","src":"8259:21:21"},"nodeType":"YulExpressionStatement","src":"8259:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8300:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8311:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8296:3:21"},"nodeType":"YulFunctionCall","src":"8296:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"8316:2:21","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8289:6:21"},"nodeType":"YulFunctionCall","src":"8289:30:21"},"nodeType":"YulExpressionStatement","src":"8289:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8339:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8350:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8335:3:21"},"nodeType":"YulFunctionCall","src":"8335:18:21"},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820","kind":"string","nodeType":"YulLiteral","src":"8355:34:21","type":"","value":"Function must be called through "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8328:6:21"},"nodeType":"YulFunctionCall","src":"8328:62:21"},"nodeType":"YulExpressionStatement","src":"8328:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8410:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8421:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8406:3:21"},"nodeType":"YulFunctionCall","src":"8406:18:21"},{"hexValue":"6163746976652070726f7879","kind":"string","nodeType":"YulLiteral","src":"8426:14:21","type":"","value":"active proxy"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8399:6:21"},"nodeType":"YulFunctionCall","src":"8399:42:21"},"nodeType":"YulExpressionStatement","src":"8399:42:21"},{"nodeType":"YulAssignment","src":"8450:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8462:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8473:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8458:3:21"},"nodeType":"YulFunctionCall","src":"8458:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8450:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8226:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8240:4:21","type":""}],"src":"8075:408:21"},{"body":{"nodeType":"YulBlock","src":"8536:80:21","statements":[{"body":{"nodeType":"YulBlock","src":"8563:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8565:16:21"},"nodeType":"YulFunctionCall","src":"8565:18:21"},"nodeType":"YulExpressionStatement","src":"8565:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8552:1:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8559:1:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8555:3:21"},"nodeType":"YulFunctionCall","src":"8555:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8549:2:21"},"nodeType":"YulFunctionCall","src":"8549:13:21"},"nodeType":"YulIf","src":"8546:39:21"},{"nodeType":"YulAssignment","src":"8594:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8605:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"8608:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8601:3:21"},"nodeType":"YulFunctionCall","src":"8601:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"8594:3:21"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8519:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"8522:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"8528:3:21","type":""}],"src":"8488:128:21"},{"body":{"nodeType":"YulBlock","src":"8795:246:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8812:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8823:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8805:6:21"},"nodeType":"YulFunctionCall","src":"8805:21:21"},"nodeType":"YulExpressionStatement","src":"8805:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8846:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8857:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8842:3:21"},"nodeType":"YulFunctionCall","src":"8842:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"8862:2:21","type":"","value":"56"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8835:6:21"},"nodeType":"YulFunctionCall","src":"8835:30:21"},"nodeType":"YulExpressionStatement","src":"8835:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8885:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8896:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8881:3:21"},"nodeType":"YulFunctionCall","src":"8881:18:21"},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c","kind":"string","nodeType":"YulLiteral","src":"8901:34:21","type":"","value":"UUPSUpgradeable: must not be cal"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8874:6:21"},"nodeType":"YulFunctionCall","src":"8874:62:21"},"nodeType":"YulExpressionStatement","src":"8874:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8956:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8967:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8952:3:21"},"nodeType":"YulFunctionCall","src":"8952:18:21"},{"hexValue":"6c6564207468726f7567682064656c656761746563616c6c","kind":"string","nodeType":"YulLiteral","src":"8972:26:21","type":"","value":"led through delegatecall"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8945:6:21"},"nodeType":"YulFunctionCall","src":"8945:54:21"},"nodeType":"YulExpressionStatement","src":"8945:54:21"},{"nodeType":"YulAssignment","src":"9008:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9020:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9031:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9016:3:21"},"nodeType":"YulFunctionCall","src":"9016:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9008:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8772:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8786:4:21","type":""}],"src":"8621:420:21"},{"body":{"nodeType":"YulBlock","src":"9220:165:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9237:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9248:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9230:6:21"},"nodeType":"YulFunctionCall","src":"9230:21:21"},"nodeType":"YulExpressionStatement","src":"9230:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9271:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9282:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9267:3:21"},"nodeType":"YulFunctionCall","src":"9267:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9287:2:21","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9260:6:21"},"nodeType":"YulFunctionCall","src":"9260:30:21"},"nodeType":"YulExpressionStatement","src":"9260:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9310:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9321:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9306:3:21"},"nodeType":"YulFunctionCall","src":"9306:18:21"},{"hexValue":"696e76616c6964206163636f756e74","kind":"string","nodeType":"YulLiteral","src":"9326:17:21","type":"","value":"invalid account"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9299:6:21"},"nodeType":"YulFunctionCall","src":"9299:45:21"},"nodeType":"YulExpressionStatement","src":"9299:45:21"},{"nodeType":"YulAssignment","src":"9353:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9365:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9376:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9361:3:21"},"nodeType":"YulFunctionCall","src":"9361:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9353:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9197:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9211:4:21","type":""}],"src":"9046:339:21"},{"body":{"nodeType":"YulBlock","src":"9564:174:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9581:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9592:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9574:6:21"},"nodeType":"YulFunctionCall","src":"9574:21:21"},"nodeType":"YulExpressionStatement","src":"9574:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9615:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9626:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9611:3:21"},"nodeType":"YulFunctionCall","src":"9611:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9631:2:21","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9604:6:21"},"nodeType":"YulFunctionCall","src":"9604:30:21"},"nodeType":"YulExpressionStatement","src":"9604:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9654:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9665:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9650:3:21"},"nodeType":"YulFunctionCall","src":"9650:18:21"},{"hexValue":"6163636f756e74206973206e6f742077686974656c697374","kind":"string","nodeType":"YulLiteral","src":"9670:26:21","type":"","value":"account is not whitelist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9643:6:21"},"nodeType":"YulFunctionCall","src":"9643:54:21"},"nodeType":"YulExpressionStatement","src":"9643:54:21"},{"nodeType":"YulAssignment","src":"9706:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9718:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9729:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9714:3:21"},"nodeType":"YulFunctionCall","src":"9714:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9706:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_debc7eb6730b2b24e54313ab6eed030e231c0ceea33c10e18fbd589b5a03dbf6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9541:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9555:4:21","type":""}],"src":"9390:348:21"},{"body":{"nodeType":"YulBlock","src":"9917:170:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9934:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9945:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9927:6:21"},"nodeType":"YulFunctionCall","src":"9927:21:21"},"nodeType":"YulExpressionStatement","src":"9927:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9968:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9979:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9964:3:21"},"nodeType":"YulFunctionCall","src":"9964:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9984:2:21","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9957:6:21"},"nodeType":"YulFunctionCall","src":"9957:30:21"},"nodeType":"YulExpressionStatement","src":"9957:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10007:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10018:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10003:3:21"},"nodeType":"YulFunctionCall","src":"10003:18:21"},{"hexValue":"6163636f756e7420697320626c61636b6c697374","kind":"string","nodeType":"YulLiteral","src":"10023:22:21","type":"","value":"account is blacklist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9996:6:21"},"nodeType":"YulFunctionCall","src":"9996:50:21"},"nodeType":"YulExpressionStatement","src":"9996:50:21"},{"nodeType":"YulAssignment","src":"10055:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10067:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10078:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10063:3:21"},"nodeType":"YulFunctionCall","src":"10063:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10055:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_290f357bdfb105b49810905e93f861548504e8146e3245a390401d62a88aafea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9894:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9908:4:21","type":""}],"src":"9743:344:21"},{"body":{"nodeType":"YulBlock","src":"10266:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10283:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10294:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10276:6:21"},"nodeType":"YulFunctionCall","src":"10276:21:21"},"nodeType":"YulExpressionStatement","src":"10276:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10317:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10328:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10313:3:21"},"nodeType":"YulFunctionCall","src":"10313:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10333:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10306:6:21"},"nodeType":"YulFunctionCall","src":"10306:30:21"},"nodeType":"YulExpressionStatement","src":"10306:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10356:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10367:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10352:3:21"},"nodeType":"YulFunctionCall","src":"10352:18:21"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"10372:34:21","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10345:6:21"},"nodeType":"YulFunctionCall","src":"10345:62:21"},"nodeType":"YulExpressionStatement","src":"10345:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10427:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10438:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10423:3:21"},"nodeType":"YulFunctionCall","src":"10423:18:21"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"10443:7:21","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10416:6:21"},"nodeType":"YulFunctionCall","src":"10416:35:21"},"nodeType":"YulExpressionStatement","src":"10416:35:21"},{"nodeType":"YulAssignment","src":"10460:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10472:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10483:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10468:3:21"},"nodeType":"YulFunctionCall","src":"10468:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10460:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10243:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10257:4:21","type":""}],"src":"10092:401:21"},{"body":{"nodeType":"YulBlock","src":"10672:174:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10689:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10700:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10682:6:21"},"nodeType":"YulFunctionCall","src":"10682:21:21"},"nodeType":"YulExpressionStatement","src":"10682:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10723:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10734:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10719:3:21"},"nodeType":"YulFunctionCall","src":"10719:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10739:2:21","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10712:6:21"},"nodeType":"YulFunctionCall","src":"10712:30:21"},"nodeType":"YulExpressionStatement","src":"10712:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10762:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10773:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10758:3:21"},"nodeType":"YulFunctionCall","src":"10758:18:21"},{"hexValue":"6163636f756e74206973206e6f7420626c61636b6c697374","kind":"string","nodeType":"YulLiteral","src":"10778:26:21","type":"","value":"account is not blacklist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10751:6:21"},"nodeType":"YulFunctionCall","src":"10751:54:21"},"nodeType":"YulExpressionStatement","src":"10751:54:21"},{"nodeType":"YulAssignment","src":"10814:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10826:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10837:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10822:3:21"},"nodeType":"YulFunctionCall","src":"10822:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10814:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0b7c118edc538726ccbd59152e97c083b4206ea63293b28a0b77cb7081e31d2d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10649:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10663:4:21","type":""}],"src":"10498:348:21"},{"body":{"nodeType":"YulBlock","src":"11025:170:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11042:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11053:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11035:6:21"},"nodeType":"YulFunctionCall","src":"11035:21:21"},"nodeType":"YulExpressionStatement","src":"11035:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11076:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11087:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11072:3:21"},"nodeType":"YulFunctionCall","src":"11072:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11092:2:21","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11065:6:21"},"nodeType":"YulFunctionCall","src":"11065:30:21"},"nodeType":"YulExpressionStatement","src":"11065:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11115:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11126:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11111:3:21"},"nodeType":"YulFunctionCall","src":"11111:18:21"},{"hexValue":"6163636f756e742069732077686974656c697374","kind":"string","nodeType":"YulLiteral","src":"11131:22:21","type":"","value":"account is whitelist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11104:6:21"},"nodeType":"YulFunctionCall","src":"11104:50:21"},"nodeType":"YulExpressionStatement","src":"11104:50:21"},{"nodeType":"YulAssignment","src":"11163:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11175:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11186:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11171:3:21"},"nodeType":"YulFunctionCall","src":"11171:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11163:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0221073b04a195f41ceec19e14ed481d06218ff24b4f3832a83178764d94077a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11002:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11016:4:21","type":""}],"src":"10851:344:21"},{"body":{"nodeType":"YulBlock","src":"11374:226:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11391:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11402:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11384:6:21"},"nodeType":"YulFunctionCall","src":"11384:21:21"},"nodeType":"YulExpressionStatement","src":"11384:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11425:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11436:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11421:3:21"},"nodeType":"YulFunctionCall","src":"11421:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11441:2:21","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11414:6:21"},"nodeType":"YulFunctionCall","src":"11414:30:21"},"nodeType":"YulExpressionStatement","src":"11414:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11464:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11475:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11460:3:21"},"nodeType":"YulFunctionCall","src":"11460:18:21"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"11480:34:21","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11453:6:21"},"nodeType":"YulFunctionCall","src":"11453:62:21"},"nodeType":"YulExpressionStatement","src":"11453:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11535:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11546:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11531:3:21"},"nodeType":"YulFunctionCall","src":"11531:18:21"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"11551:6:21","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11524:6:21"},"nodeType":"YulFunctionCall","src":"11524:34:21"},"nodeType":"YulExpressionStatement","src":"11524:34:21"},{"nodeType":"YulAssignment","src":"11567:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11579:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11590:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11575:3:21"},"nodeType":"YulFunctionCall","src":"11575:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11567:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11351:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11365:4:21","type":""}],"src":"11200:400:21"},{"body":{"nodeType":"YulBlock","src":"11779:224:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11796:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11807:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11789:6:21"},"nodeType":"YulFunctionCall","src":"11789:21:21"},"nodeType":"YulExpressionStatement","src":"11789:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11830:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11841:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11826:3:21"},"nodeType":"YulFunctionCall","src":"11826:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"11846:2:21","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11819:6:21"},"nodeType":"YulFunctionCall","src":"11819:30:21"},"nodeType":"YulExpressionStatement","src":"11819:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11869:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11880:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11865:3:21"},"nodeType":"YulFunctionCall","src":"11865:18:21"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"11885:34:21","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11858:6:21"},"nodeType":"YulFunctionCall","src":"11858:62:21"},"nodeType":"YulExpressionStatement","src":"11858:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11940:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11951:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11936:3:21"},"nodeType":"YulFunctionCall","src":"11936:18:21"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"11956:4:21","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11929:6:21"},"nodeType":"YulFunctionCall","src":"11929:32:21"},"nodeType":"YulExpressionStatement","src":"11929:32:21"},{"nodeType":"YulAssignment","src":"11970:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11982:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11993:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11978:3:21"},"nodeType":"YulFunctionCall","src":"11978:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11970:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11756:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11770:4:21","type":""}],"src":"11605:398:21"},{"body":{"nodeType":"YulBlock","src":"12182:233:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12199:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12210:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12192:6:21"},"nodeType":"YulFunctionCall","src":"12192:21:21"},"nodeType":"YulExpressionStatement","src":"12192:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12233:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12244:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12229:3:21"},"nodeType":"YulFunctionCall","src":"12229:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12249:2:21","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12222:6:21"},"nodeType":"YulFunctionCall","src":"12222:30:21"},"nodeType":"YulExpressionStatement","src":"12222:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12272:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12283:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12268:3:21"},"nodeType":"YulFunctionCall","src":"12268:18:21"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"12288:34:21","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12261:6:21"},"nodeType":"YulFunctionCall","src":"12261:62:21"},"nodeType":"YulExpressionStatement","src":"12261:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12343:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12354:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12339:3:21"},"nodeType":"YulFunctionCall","src":"12339:18:21"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"12359:13:21","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12332:6:21"},"nodeType":"YulFunctionCall","src":"12332:41:21"},"nodeType":"YulExpressionStatement","src":"12332:41:21"},{"nodeType":"YulAssignment","src":"12382:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12394:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12405:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12390:3:21"},"nodeType":"YulFunctionCall","src":"12390:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12382:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12159:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12173:4:21","type":""}],"src":"12008:407:21"},{"body":{"nodeType":"YulBlock","src":"12594:179:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12611:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12622:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12604:6:21"},"nodeType":"YulFunctionCall","src":"12604:21:21"},"nodeType":"YulExpressionStatement","src":"12604:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12645:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12656:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12641:3:21"},"nodeType":"YulFunctionCall","src":"12641:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12661:2:21","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12634:6:21"},"nodeType":"YulFunctionCall","src":"12634:30:21"},"nodeType":"YulExpressionStatement","src":"12634:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12684:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12695:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12680:3:21"},"nodeType":"YulFunctionCall","src":"12680:18:21"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"12700:31:21","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12673:6:21"},"nodeType":"YulFunctionCall","src":"12673:59:21"},"nodeType":"YulExpressionStatement","src":"12673:59:21"},{"nodeType":"YulAssignment","src":"12741:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12753:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12764:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12749:3:21"},"nodeType":"YulFunctionCall","src":"12749:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12741:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12571:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12585:4:21","type":""}],"src":"12420:353:21"},{"body":{"nodeType":"YulBlock","src":"12830:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"12889:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12891:16:21"},"nodeType":"YulFunctionCall","src":"12891:18:21"},"nodeType":"YulExpressionStatement","src":"12891:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12861:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12854:6:21"},"nodeType":"YulFunctionCall","src":"12854:9:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12847:6:21"},"nodeType":"YulFunctionCall","src":"12847:17:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12869:1:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12880:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12876:3:21"},"nodeType":"YulFunctionCall","src":"12876:6:21"},{"name":"x","nodeType":"YulIdentifier","src":"12884:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12872:3:21"},"nodeType":"YulFunctionCall","src":"12872:14:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12866:2:21"},"nodeType":"YulFunctionCall","src":"12866:21:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12843:3:21"},"nodeType":"YulFunctionCall","src":"12843:45:21"},"nodeType":"YulIf","src":"12840:71:21"},{"nodeType":"YulAssignment","src":"12920:20:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12935:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"12938:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12931:3:21"},"nodeType":"YulFunctionCall","src":"12931:9:21"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"12920:7:21"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12809:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"12812:1:21","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"12818:7:21","type":""}],"src":"12778:168:21"},{"body":{"nodeType":"YulBlock","src":"12997:171:21","statements":[{"body":{"nodeType":"YulBlock","src":"13028:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13049:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13056:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13061:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13052:3:21"},"nodeType":"YulFunctionCall","src":"13052:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13042:6:21"},"nodeType":"YulFunctionCall","src":"13042:31:21"},"nodeType":"YulExpressionStatement","src":"13042:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13093:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13096:4:21","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13086:6:21"},"nodeType":"YulFunctionCall","src":"13086:15:21"},"nodeType":"YulExpressionStatement","src":"13086:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13121:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13124:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13114:6:21"},"nodeType":"YulFunctionCall","src":"13114:15:21"},"nodeType":"YulExpressionStatement","src":"13114:15:21"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"13017:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13010:6:21"},"nodeType":"YulFunctionCall","src":"13010:9:21"},"nodeType":"YulIf","src":"13007:132:21"},{"nodeType":"YulAssignment","src":"13148:14:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13157:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"13160:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"13153:3:21"},"nodeType":"YulFunctionCall","src":"13153:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"13148:1:21"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12982:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"12985:1:21","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"12991:1:21","type":""}],"src":"12951:217:21"},{"body":{"nodeType":"YulBlock","src":"13347:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13364:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13375:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13357:6:21"},"nodeType":"YulFunctionCall","src":"13357:21:21"},"nodeType":"YulExpressionStatement","src":"13357:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13398:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13409:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13394:3:21"},"nodeType":"YulFunctionCall","src":"13394:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13414:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13387:6:21"},"nodeType":"YulFunctionCall","src":"13387:30:21"},"nodeType":"YulExpressionStatement","src":"13387:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13437:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13448:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13433:3:21"},"nodeType":"YulFunctionCall","src":"13433:18:21"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"13453:34:21","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13426:6:21"},"nodeType":"YulFunctionCall","src":"13426:62:21"},"nodeType":"YulExpressionStatement","src":"13426:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13508:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13519:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13504:3:21"},"nodeType":"YulFunctionCall","src":"13504:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"13524:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13497:6:21"},"nodeType":"YulFunctionCall","src":"13497:35:21"},"nodeType":"YulExpressionStatement","src":"13497:35:21"},{"nodeType":"YulAssignment","src":"13541:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13553:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13564:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13549:3:21"},"nodeType":"YulFunctionCall","src":"13549:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13541:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13324:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13338:4:21","type":""}],"src":"13173:401:21"},{"body":{"nodeType":"YulBlock","src":"13753:225:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13770:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13781:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13763:6:21"},"nodeType":"YulFunctionCall","src":"13763:21:21"},"nodeType":"YulExpressionStatement","src":"13763:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13804:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13815:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13800:3:21"},"nodeType":"YulFunctionCall","src":"13800:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"13820:2:21","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13793:6:21"},"nodeType":"YulFunctionCall","src":"13793:30:21"},"nodeType":"YulExpressionStatement","src":"13793:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13843:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13854:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13839:3:21"},"nodeType":"YulFunctionCall","src":"13839:18:21"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"13859:34:21","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13832:6:21"},"nodeType":"YulFunctionCall","src":"13832:62:21"},"nodeType":"YulExpressionStatement","src":"13832:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13914:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13925:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13910:3:21"},"nodeType":"YulFunctionCall","src":"13910:18:21"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"13930:5:21","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13903:6:21"},"nodeType":"YulFunctionCall","src":"13903:33:21"},"nodeType":"YulExpressionStatement","src":"13903:33:21"},{"nodeType":"YulAssignment","src":"13945:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13957:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13968:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13953:3:21"},"nodeType":"YulFunctionCall","src":"13953:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13945:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13730:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13744:4:21","type":""}],"src":"13579:399:21"},{"body":{"nodeType":"YulBlock","src":"14157:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14174:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14185:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14167:6:21"},"nodeType":"YulFunctionCall","src":"14167:21:21"},"nodeType":"YulExpressionStatement","src":"14167:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14208:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14219:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14204:3:21"},"nodeType":"YulFunctionCall","src":"14204:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14224:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14197:6:21"},"nodeType":"YulFunctionCall","src":"14197:30:21"},"nodeType":"YulExpressionStatement","src":"14197:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14247:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14258:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14243:3:21"},"nodeType":"YulFunctionCall","src":"14243:18:21"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"14263:34:21","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14236:6:21"},"nodeType":"YulFunctionCall","src":"14236:62:21"},"nodeType":"YulExpressionStatement","src":"14236:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14318:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14329:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14314:3:21"},"nodeType":"YulFunctionCall","src":"14314:18:21"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"14334:8:21","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14307:6:21"},"nodeType":"YulFunctionCall","src":"14307:36:21"},"nodeType":"YulExpressionStatement","src":"14307:36:21"},{"nodeType":"YulAssignment","src":"14352:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14364:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14375:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14360:3:21"},"nodeType":"YulFunctionCall","src":"14360:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14352:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14134:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14148:4:21","type":""}],"src":"13983:402:21"},{"body":{"nodeType":"YulBlock","src":"14471:103:21","statements":[{"body":{"nodeType":"YulBlock","src":"14517:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14526:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14529:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14519:6:21"},"nodeType":"YulFunctionCall","src":"14519:12:21"},"nodeType":"YulExpressionStatement","src":"14519:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14492:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14501:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14488:3:21"},"nodeType":"YulFunctionCall","src":"14488:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"14513:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14484:3:21"},"nodeType":"YulFunctionCall","src":"14484:32:21"},"nodeType":"YulIf","src":"14481:52:21"},{"nodeType":"YulAssignment","src":"14542:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14558:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14552:5:21"},"nodeType":"YulFunctionCall","src":"14552:16:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14542:6:21"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14437:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14448:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14460:6:21","type":""}],"src":"14390:184:21"},{"body":{"nodeType":"YulBlock","src":"14753:236:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14770:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14781:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14763:6:21"},"nodeType":"YulFunctionCall","src":"14763:21:21"},"nodeType":"YulExpressionStatement","src":"14763:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14804:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14815:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14800:3:21"},"nodeType":"YulFunctionCall","src":"14800:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14820:2:21","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14793:6:21"},"nodeType":"YulFunctionCall","src":"14793:30:21"},"nodeType":"YulExpressionStatement","src":"14793:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14843:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14854:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:21"},"nodeType":"YulFunctionCall","src":"14839:18:21"},{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e74617469","kind":"string","nodeType":"YulLiteral","src":"14859:34:21","type":"","value":"ERC1967Upgrade: new implementati"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14832:6:21"},"nodeType":"YulFunctionCall","src":"14832:62:21"},"nodeType":"YulExpressionStatement","src":"14832:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14914:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14925:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14910:3:21"},"nodeType":"YulFunctionCall","src":"14910:18:21"},{"hexValue":"6f6e206973206e6f742055555053","kind":"string","nodeType":"YulLiteral","src":"14930:16:21","type":"","value":"on is not UUPS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14903:6:21"},"nodeType":"YulFunctionCall","src":"14903:44:21"},"nodeType":"YulExpressionStatement","src":"14903:44:21"},{"nodeType":"YulAssignment","src":"14956:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14968:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14979:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14964:3:21"},"nodeType":"YulFunctionCall","src":"14964:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14956:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14730:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14744:4:21","type":""}],"src":"14579:410:21"},{"body":{"nodeType":"YulBlock","src":"15168:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15185:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15196:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15178:6:21"},"nodeType":"YulFunctionCall","src":"15178:21:21"},"nodeType":"YulExpressionStatement","src":"15178:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15219:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15230:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15215:3:21"},"nodeType":"YulFunctionCall","src":"15215:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15235:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15208:6:21"},"nodeType":"YulFunctionCall","src":"15208:30:21"},"nodeType":"YulExpressionStatement","src":"15208:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15258:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15269:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15254:3:21"},"nodeType":"YulFunctionCall","src":"15254:18:21"},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f78","kind":"string","nodeType":"YulLiteral","src":"15274:34:21","type":"","value":"ERC1967Upgrade: unsupported prox"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15247:6:21"},"nodeType":"YulFunctionCall","src":"15247:62:21"},"nodeType":"YulExpressionStatement","src":"15247:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15329:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15340:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15325:3:21"},"nodeType":"YulFunctionCall","src":"15325:18:21"},{"hexValue":"6961626c6555554944","kind":"string","nodeType":"YulLiteral","src":"15345:11:21","type":"","value":"iableUUID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15318:6:21"},"nodeType":"YulFunctionCall","src":"15318:39:21"},"nodeType":"YulExpressionStatement","src":"15318:39:21"},{"nodeType":"YulAssignment","src":"15366:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15378:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15389:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15374:3:21"},"nodeType":"YulFunctionCall","src":"15374:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15366:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15145:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15159:4:21","type":""}],"src":"14994:405:21"},{"body":{"nodeType":"YulBlock","src":"15578:181:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15595:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15606:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15588:6:21"},"nodeType":"YulFunctionCall","src":"15588:21:21"},"nodeType":"YulExpressionStatement","src":"15588:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15629:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15640:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15625:3:21"},"nodeType":"YulFunctionCall","src":"15625:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15645:2:21","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15618:6:21"},"nodeType":"YulFunctionCall","src":"15618:30:21"},"nodeType":"YulExpressionStatement","src":"15618:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15668:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15679:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15664:3:21"},"nodeType":"YulFunctionCall","src":"15664:18:21"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"15684:33:21","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15657:6:21"},"nodeType":"YulFunctionCall","src":"15657:61:21"},"nodeType":"YulExpressionStatement","src":"15657:61:21"},{"nodeType":"YulAssignment","src":"15727:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15739:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15750:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15735:3:21"},"nodeType":"YulFunctionCall","src":"15735:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15727:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15555:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15569:4:21","type":""}],"src":"15404:355:21"},{"body":{"nodeType":"YulBlock","src":"15938:223:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15955:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15966:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15948:6:21"},"nodeType":"YulFunctionCall","src":"15948:21:21"},"nodeType":"YulExpressionStatement","src":"15948:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15989:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16000:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15985:3:21"},"nodeType":"YulFunctionCall","src":"15985:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16005:2:21","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15978:6:21"},"nodeType":"YulFunctionCall","src":"15978:30:21"},"nodeType":"YulExpressionStatement","src":"15978:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16028:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16039:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16024:3:21"},"nodeType":"YulFunctionCall","src":"16024:18:21"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"16044:34:21","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16017:6:21"},"nodeType":"YulFunctionCall","src":"16017:62:21"},"nodeType":"YulExpressionStatement","src":"16017:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16099:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16110:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16095:3:21"},"nodeType":"YulFunctionCall","src":"16095:18:21"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"16115:3:21","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16088:6:21"},"nodeType":"YulFunctionCall","src":"16088:31:21"},"nodeType":"YulExpressionStatement","src":"16088:31:21"},{"nodeType":"YulAssignment","src":"16128:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16140:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16151:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16136:3:21"},"nodeType":"YulFunctionCall","src":"16136:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16128:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15915:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15929:4:21","type":""}],"src":"15764:397:21"},{"body":{"nodeType":"YulBlock","src":"16340:224:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16357:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16368:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16350:6:21"},"nodeType":"YulFunctionCall","src":"16350:21:21"},"nodeType":"YulExpressionStatement","src":"16350:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16391:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16402:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16387:3:21"},"nodeType":"YulFunctionCall","src":"16387:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16407:2:21","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16380:6:21"},"nodeType":"YulFunctionCall","src":"16380:30:21"},"nodeType":"YulExpressionStatement","src":"16380:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16430:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16441:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16426:3:21"},"nodeType":"YulFunctionCall","src":"16426:18:21"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"16446:34:21","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16419:6:21"},"nodeType":"YulFunctionCall","src":"16419:62:21"},"nodeType":"YulExpressionStatement","src":"16419:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16501:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16512:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16497:3:21"},"nodeType":"YulFunctionCall","src":"16497:18:21"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"16517:4:21","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16490:6:21"},"nodeType":"YulFunctionCall","src":"16490:32:21"},"nodeType":"YulExpressionStatement","src":"16490:32:21"},{"nodeType":"YulAssignment","src":"16531:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16543:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16554:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16539:3:21"},"nodeType":"YulFunctionCall","src":"16539:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16531:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16317:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16331:4:21","type":""}],"src":"16166:398:21"},{"body":{"nodeType":"YulBlock","src":"16743:231:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16760:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16771:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16753:6:21"},"nodeType":"YulFunctionCall","src":"16753:21:21"},"nodeType":"YulExpressionStatement","src":"16753:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16794:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16805:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16790:3:21"},"nodeType":"YulFunctionCall","src":"16790:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16810:2:21","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16783:6:21"},"nodeType":"YulFunctionCall","src":"16783:30:21"},"nodeType":"YulExpressionStatement","src":"16783:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16833:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16844:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16829:3:21"},"nodeType":"YulFunctionCall","src":"16829:18:21"},{"hexValue":"626c61636b6c6973746564206163636f756e742063616e6e6f74207472616e73","kind":"string","nodeType":"YulLiteral","src":"16849:34:21","type":"","value":"blacklisted account cannot trans"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16822:6:21"},"nodeType":"YulFunctionCall","src":"16822:62:21"},"nodeType":"YulExpressionStatement","src":"16822:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16904:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16915:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16900:3:21"},"nodeType":"YulFunctionCall","src":"16900:18:21"},{"hexValue":"66657220746f6b656e","kind":"string","nodeType":"YulLiteral","src":"16920:11:21","type":"","value":"fer token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16893:6:21"},"nodeType":"YulFunctionCall","src":"16893:39:21"},"nodeType":"YulExpressionStatement","src":"16893:39:21"},{"nodeType":"YulAssignment","src":"16941:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16953:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16964:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16949:3:21"},"nodeType":"YulFunctionCall","src":"16949:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16941:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_69b03c7d7a99ff16bc6d3ef408ae162cb1ea1fc4ad31bbcb181add4e650e48c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16720:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16734:4:21","type":""}],"src":"16569:405:21"},{"body":{"nodeType":"YulBlock","src":"17368:397:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17385:3:21"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"17390:25:21","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17378:6:21"},"nodeType":"YulFunctionCall","src":"17378:38:21"},"nodeType":"YulExpressionStatement","src":"17378:38:21"},{"nodeType":"YulVariableDeclaration","src":"17425:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17445:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17439:5:21"},"nodeType":"YulFunctionCall","src":"17439:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17429:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17487:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17495:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17483:3:21"},"nodeType":"YulFunctionCall","src":"17483:17:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17506:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"17511:2:21","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17502:3:21"},"nodeType":"YulFunctionCall","src":"17502:12:21"},{"name":"length","nodeType":"YulIdentifier","src":"17516:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"17461:21:21"},"nodeType":"YulFunctionCall","src":"17461:62:21"},"nodeType":"YulExpressionStatement","src":"17461:62:21"},{"nodeType":"YulVariableDeclaration","src":"17532:26:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17546:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"17551:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17542:3:21"},"nodeType":"YulFunctionCall","src":"17542:16:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17536:2:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17578:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"17582:2:21","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17574:3:21"},"nodeType":"YulFunctionCall","src":"17574:11:21"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"17587:19:21","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17567:6:21"},"nodeType":"YulFunctionCall","src":"17567:40:21"},"nodeType":"YulExpressionStatement","src":"17567:40:21"},{"nodeType":"YulVariableDeclaration","src":"17616:29:21","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17638:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17632:5:21"},"nodeType":"YulFunctionCall","src":"17632:13:21"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"17620:8:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17680:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17688:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17676:3:21"},"nodeType":"YulFunctionCall","src":"17676:17:21"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17699:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"17703:2:21","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17695:3:21"},"nodeType":"YulFunctionCall","src":"17695:11:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"17708:8:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"17654:21:21"},"nodeType":"YulFunctionCall","src":"17654:63:21"},"nodeType":"YulExpressionStatement","src":"17654:63:21"},{"nodeType":"YulAssignment","src":"17726:33:21","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17741:2:21"},{"name":"length_1","nodeType":"YulIdentifier","src":"17745:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17737:3:21"},"nodeType":"YulFunctionCall","src":"17737:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"17756:2:21","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17733:3:21"},"nodeType":"YulFunctionCall","src":"17733:26:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17726:3:21"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17336:3:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17341:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17349:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17360:3:21","type":""}],"src":"16979:786:21"},{"body":{"nodeType":"YulBlock","src":"17944:235:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17961:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17972:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17954:6:21"},"nodeType":"YulFunctionCall","src":"17954:21:21"},"nodeType":"YulExpressionStatement","src":"17954:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17995:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18006:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17991:3:21"},"nodeType":"YulFunctionCall","src":"17991:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"18011:2:21","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17984:6:21"},"nodeType":"YulFunctionCall","src":"17984:30:21"},"nodeType":"YulExpressionStatement","src":"17984:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18034:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18045:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18030:3:21"},"nodeType":"YulFunctionCall","src":"18030:18:21"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"18050:34:21","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18023:6:21"},"nodeType":"YulFunctionCall","src":"18023:62:21"},"nodeType":"YulExpressionStatement","src":"18023:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18105:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18116:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18101:3:21"},"nodeType":"YulFunctionCall","src":"18101:18:21"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"18121:15:21","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18094:6:21"},"nodeType":"YulFunctionCall","src":"18094:43:21"},"nodeType":"YulExpressionStatement","src":"18094:43:21"},{"nodeType":"YulAssignment","src":"18146:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18158:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18169:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18154:3:21"},"nodeType":"YulFunctionCall","src":"18154:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18146:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17921:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17935:4:21","type":""}],"src":"17770:409:21"},{"body":{"nodeType":"YulBlock","src":"18358:170:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18375:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18386:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18368:6:21"},"nodeType":"YulFunctionCall","src":"18368:21:21"},"nodeType":"YulExpressionStatement","src":"18368:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18409:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18420:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18405:3:21"},"nodeType":"YulFunctionCall","src":"18405:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"18425:2:21","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18398:6:21"},"nodeType":"YulFunctionCall","src":"18398:30:21"},"nodeType":"YulExpressionStatement","src":"18398:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18448:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18459:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18444:3:21"},"nodeType":"YulFunctionCall","src":"18444:18:21"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"18464:22:21","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18437:6:21"},"nodeType":"YulFunctionCall","src":"18437:50:21"},"nodeType":"YulExpressionStatement","src":"18437:50:21"},{"nodeType":"YulAssignment","src":"18496:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18508:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18519:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18504:3:21"},"nodeType":"YulFunctionCall","src":"18504:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18496:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18335:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18349:4:21","type":""}],"src":"18184:344:21"},{"body":{"nodeType":"YulBlock","src":"18707:166:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18724:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18735:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18717:6:21"},"nodeType":"YulFunctionCall","src":"18717:21:21"},"nodeType":"YulExpressionStatement","src":"18717:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18758:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18769:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18754:3:21"},"nodeType":"YulFunctionCall","src":"18754:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"18774:2:21","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18747:6:21"},"nodeType":"YulFunctionCall","src":"18747:30:21"},"nodeType":"YulExpressionStatement","src":"18747:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18797:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18808:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18793:3:21"},"nodeType":"YulFunctionCall","src":"18793:18:21"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"18813:18:21","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18786:6:21"},"nodeType":"YulFunctionCall","src":"18786:46:21"},"nodeType":"YulExpressionStatement","src":"18786:46:21"},{"nodeType":"YulAssignment","src":"18841:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18853:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"18864:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18849:3:21"},"nodeType":"YulFunctionCall","src":"18849:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18841:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18684:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18698:4:21","type":""}],"src":"18533:340:21"},{"body":{"nodeType":"YulBlock","src":"18910:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18927:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18934:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18939:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18930:3:21"},"nodeType":"YulFunctionCall","src":"18930:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18920:6:21"},"nodeType":"YulFunctionCall","src":"18920:31:21"},"nodeType":"YulExpressionStatement","src":"18920:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18967:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18970:4:21","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18960:6:21"},"nodeType":"YulFunctionCall","src":"18960:15:21"},"nodeType":"YulExpressionStatement","src":"18960:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18991:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18994:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18984:6:21"},"nodeType":"YulFunctionCall","src":"18984:15:21"},"nodeType":"YulExpressionStatement","src":"18984:15:21"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"18878:127:21"},{"body":{"nodeType":"YulBlock","src":"19057:89:21","statements":[{"body":{"nodeType":"YulBlock","src":"19084:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19086:16:21"},"nodeType":"YulFunctionCall","src":"19086:18:21"},"nodeType":"YulExpressionStatement","src":"19086:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19077:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19070:6:21"},"nodeType":"YulFunctionCall","src":"19070:13:21"},"nodeType":"YulIf","src":"19067:39:21"},{"nodeType":"YulAssignment","src":"19115:25:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19126:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19137:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19133:3:21"},"nodeType":"YulFunctionCall","src":"19133:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19122:3:21"},"nodeType":"YulFunctionCall","src":"19122:18:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19115:3:21"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19039:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19049:3:21","type":""}],"src":"19010:136:21"},{"body":{"nodeType":"YulBlock","src":"19325:182:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19342:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19353:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19335:6:21"},"nodeType":"YulFunctionCall","src":"19335:21:21"},"nodeType":"YulExpressionStatement","src":"19335:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19376:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19387:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19372:3:21"},"nodeType":"YulFunctionCall","src":"19372:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"19392:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19365:6:21"},"nodeType":"YulFunctionCall","src":"19365:30:21"},"nodeType":"YulExpressionStatement","src":"19365:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19415:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19426:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19411:3:21"},"nodeType":"YulFunctionCall","src":"19411:18:21"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"19431:34:21","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19404:6:21"},"nodeType":"YulFunctionCall","src":"19404:62:21"},"nodeType":"YulExpressionStatement","src":"19404:62:21"},{"nodeType":"YulAssignment","src":"19475:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19487:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19498:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19483:3:21"},"nodeType":"YulFunctionCall","src":"19483:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19475:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19302:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19316:4:21","type":""}],"src":"19151:356:21"},{"body":{"nodeType":"YulBlock","src":"19686:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19703:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19714:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19696:6:21"},"nodeType":"YulFunctionCall","src":"19696:21:21"},"nodeType":"YulExpressionStatement","src":"19696:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19737:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19748:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19733:3:21"},"nodeType":"YulFunctionCall","src":"19733:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"19753:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19726:6:21"},"nodeType":"YulFunctionCall","src":"19726:30:21"},"nodeType":"YulExpressionStatement","src":"19726:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19776:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19787:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19772:3:21"},"nodeType":"YulFunctionCall","src":"19772:18:21"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"19792:34:21","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19765:6:21"},"nodeType":"YulFunctionCall","src":"19765:62:21"},"nodeType":"YulExpressionStatement","src":"19765:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19847:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19858:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19843:3:21"},"nodeType":"YulFunctionCall","src":"19843:18:21"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"19863:8:21","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19836:6:21"},"nodeType":"YulFunctionCall","src":"19836:36:21"},"nodeType":"YulExpressionStatement","src":"19836:36:21"},{"nodeType":"YulAssignment","src":"19881:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19893:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"19904:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19889:3:21"},"nodeType":"YulFunctionCall","src":"19889:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19881:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19663:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19677:4:21","type":""}],"src":"19512:402:21"},{"body":{"nodeType":"YulBlock","src":"20056:137:21","statements":[{"nodeType":"YulVariableDeclaration","src":"20066:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20086:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20080:5:21"},"nodeType":"YulFunctionCall","src":"20080:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"20070:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20128:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"20136:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20124:3:21"},"nodeType":"YulFunctionCall","src":"20124:17:21"},{"name":"pos","nodeType":"YulIdentifier","src":"20143:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"20148:6:21"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"20102:21:21"},"nodeType":"YulFunctionCall","src":"20102:53:21"},"nodeType":"YulExpressionStatement","src":"20102:53:21"},{"nodeType":"YulAssignment","src":"20164:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20175:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"20180:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20171:3:21"},"nodeType":"YulFunctionCall","src":"20171:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20164:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20032:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20037:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20048:3:21","type":""}],"src":"19919:274:21"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_address(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_428d2b45bb1c86227a8688f1c30f1c359824c9298dfce034ebf8ca193afdf5e7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"invalid amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_75de82bf50b05703e664848a18e5dd7964da8935417af3c2493472728fa0a272__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"invalid fee collector\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d90a07aebca820f5ab8b30e947058a0c797639b66651be5f42963899002b481c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"invalid account\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_debc7eb6730b2b24e54313ab6eed030e231c0ceea33c10e18fbd589b5a03dbf6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"account is not whitelist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_290f357bdfb105b49810905e93f861548504e8146e3245a390401d62a88aafea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"account is blacklist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0b7c118edc538726ccbd59152e97c083b4206ea63293b28a0b77cb7081e31d2d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"account is not blacklist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0221073b04a195f41ceec19e14ed481d06218ff24b4f3832a83178764d94077a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"account is whitelist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_69b03c7d7a99ff16bc6d3ef408ae162cb1ea1fc4ad31bbcb181add4e650e48c4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"blacklisted account cannot trans\")\n        mstore(add(headStart, 96), \"fer token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1004":[{"length":32,"start":3361},{"length":32,"start":3425},{"length":32,"start":3831},{"length":32,"start":3895},{"length":32,"start":4038}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x27D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x14F JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x7A4 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x7C4 JUMPI DUP1 PUSH4 0xEB91E651 EQ PUSH2 0x7E6 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x806 JUMPI DUP1 PUSH4 0xF72C0D8B EQ PUSH2 0x828 JUMPI DUP1 PUSH4 0xF80F5DD5 EQ PUSH2 0x85C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x6C0 JUMPI DUP1 PUSH4 0xBD102280 EQ PUSH2 0x6E0 JUMPI DUP1 PUSH4 0xC415B95C EQ PUSH2 0x6F7 JUMPI DUP1 PUSH4 0xCBE351CA EQ PUSH2 0x730 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x750 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x61F JUMPI DUP1 PUSH4 0x978BBDB9 EQ PUSH2 0x634 JUMPI DUP1 PUSH4 0x9CFE42DA EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x66B JUMPI DUP1 PUSH4 0xA42DCE80 EQ PUSH2 0x680 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x6A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0x833F97BE EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x5CA JUMPI DUP1 PUSH4 0x897B0637 EQ PUSH2 0x5DF JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE GT PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x45596E2E GT PUSH2 0x1AC JUMPI DUP1 PUSH4 0x45596E2E EQ PUSH2 0x4DD JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x78C8CDA7 EQ PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x36568ABE EQ PUSH2 0x428 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E7BE210 GT PUSH2 0x245 JUMPI DUP1 PUSH4 0x1E7BE210 EQ PUSH2 0x349 JUMPI DUP1 PUSH4 0x1F8D519D EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x40C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x16C02129 EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x32A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x272F JUMP JUMPDEST PUSH2 0x87C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CC PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AE SWAP2 SWAP1 PUSH2 0x2785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x364 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x2819 JUMP JUMPDEST PUSH2 0x95D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2858 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x3D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x407 CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0xC6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x443 CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0xC98 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0xD16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0xDF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0xE18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x4B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0xE38 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x4D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0xE76 JUMP JUMPDEST PUSH2 0x39A PUSH2 0x50B CALLDATASIZE PUSH1 0x4 PUSH2 0x28EF JUMP JUMPDEST PUSH2 0xEEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0xFB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x531 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x2A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x106C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x5AE CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x1165 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x191 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x117A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x5FA CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0x119A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x61A CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x1208 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CC PUSH2 0x1233 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x193 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x666 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x1242 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x69B CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x1336 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x6BB CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x13C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A2 PUSH2 0x6DB CALLDATASIZE PUSH1 0x4 PUSH2 0x27D4 JUMP JUMPDEST PUSH2 0x1449 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x192 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x703 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x194 SLOAD PUSH2 0x718 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x74B CALLDATASIZE PUSH1 0x4 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0x1496 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x79F CALLDATASIZE PUSH1 0x4 PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x1504 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0x7BF CALLDATASIZE PUSH1 0x4 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1529 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x801 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x1554 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x812 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH2 0x877 CALLDATASIZE PUSH1 0x4 PUSH2 0x27FE JUMP JUMPDEST PUSH2 0x164D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x8AD JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x8C2 SWAP1 PUSH2 0x29DB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8EE SWAP1 PUSH2 0x29DB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x93B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x910 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x93B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x91E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x953 DUP2 DUP6 DUP6 PUSH2 0x1741 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x97D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x997 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x997 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x9FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA6A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0x21A72CA3902A37B5B2B7 PUSH1 0xB1 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x434E5947 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH2 0x1865 JUMP JUMPDEST PUSH2 0xA72 PUSH2 0x1896 JUMP JUMPDEST PUSH2 0xA7A PUSH2 0x18BF JUMP JUMPDEST PUSH2 0xA82 PUSH2 0x1896 JUMP JUMPDEST PUSH2 0xA8A PUSH2 0x1896 JUMP JUMPDEST PUSH2 0xA95 PUSH1 0x0 CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xAAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xAC5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xAEF PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xB19 PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 CALLER PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x191 DUP6 SWAP1 SSTORE PUSH2 0x192 DUP5 SWAP1 SSTORE PUSH1 0x64 DUP4 LT PUSH2 0xB45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x193 DUP4 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x34B73B30B634B2103332B29031B7B63632B1BA37B9 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x194 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xBFB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xC10 DUP6 DUP3 DUP6 PUSH2 0x1974 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1C DUP7 DUP6 PUSH2 0x19EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xC33 JUMPI PUSH2 0xC2E DUP7 DUP7 DUP7 PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0xC60 JUMP JUMPDEST PUSH2 0xC47 DUP7 DUP7 PUSH2 0xC42 DUP5 DUP9 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x194 SLOAD PUSH2 0xC60 SWAP1 DUP8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1A61 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xC89 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xC93 DUP4 DUP4 PUSH2 0x18EE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xD08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH2 0x1C21 JUMP JUMPDEST POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0xD5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A6B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDA8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDCE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2AB7 JUMP JUMPDEST PUSH2 0xDD7 DUP2 PUSH2 0x1C88 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xDF3 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x1CB2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x953 DUP2 DUP6 DUP6 PUSH2 0xE09 DUP4 DUP4 PUSH2 0x1529 JUMP JUMPDEST PUSH2 0xE13 SWAP2 SWAP1 PUSH2 0x2B03 JUMP JUMPDEST PUSH2 0x1741 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xE30 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xDF3 PUSH2 0x1E2C JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH2 0xE62 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xC93 DUP4 DUP4 PUSH2 0x1E7E JUMP JUMPDEST PUSH2 0xDF3 CALLER DUP3 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xE8E DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x64 DUP3 LT PUSH2 0xEAE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x193 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x74E4A578032013599764BAC4C025EC6D6C6B24A5C2417C5100C13A04516EB971 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ ISZERO PUSH2 0xF35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A6B JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF7E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2AB7 JUMP JUMPDEST PUSH2 0xFAD DUP3 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH1 0x1 PUSH2 0x1CB2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x1059 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1084 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1113 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E74206973206E6F742077686974656C6973740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA6667E187C57C5B0FA4E1122A695ED0754287513BCB4901FA6C1F44BA22C0187 SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x1170 DUP3 CALLER DUP4 PUSH2 0x1974 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1192 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xDF3 PUSH2 0x208B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x11B2 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x11D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x191 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x82006E1B22DF9000831FA2FE95E4B46F3DE4F6D8EF57B5B5FF7AB6C9A68B5BA SWAP1 PUSH1 0x20 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x8C2 SWAP1 PUSH2 0x29DB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x125A DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1280 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x12E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1858D8DBDD5B9D081A5CC8189B1858DADB1A5CDD PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7E239E822FA537514CC6B38D8350BDE5CE06A8F9282C77161B926FC077A81026 SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x134E DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1374 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH2 0x194 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xFA62AD95255DB03DB5EAABED7A43B93F377948B56CEA8E12A747B6565582ED5E SWAP1 PUSH1 0x20 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x13D1 DUP3 DUP7 PUSH2 0x1529 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x143E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x1741 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1457 DUP3 DUP6 PUSH2 0x19EE JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x146E JUMPI PUSH2 0x1469 DUP3 DUP7 DUP7 PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x143E JUMP JUMPDEST PUSH2 0x147D DUP3 DUP7 PUSH2 0xC42 DUP5 DUP9 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x194 SLOAD PUSH2 0x143E SWAP1 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1A61 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x14AE DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x14CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2A16 JUMP JUMPDEST PUSH2 0x192 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xA026E5F510BD032E066C1F6D3212FC9E972AE22A77F2E29DB5BE3F6FCE02308 SWAP1 PUSH1 0x20 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x151F DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH2 0xC93 DUP4 DUP4 PUSH2 0x1C21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x156C DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1592 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E74206973206E6F7420626C61636B6C6973740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x54646B2D47B5332DEB93B310542F2C11BC9351E59950CDFB3BA518AF28F13D29 SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CC8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1665 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x168B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x16EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1858D8DBDD5B9D081A5CC81DDA1A5D195B1A5CDD PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xE463FA6BDECB16F96F58191D902152633214E760EA443684105A7EEF1AD16B9D SWAP2 ADD PUSH2 0xEE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x17A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1804 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x188C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH2 0xD12 DUP3 DUP3 PUSH2 0x20C8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x18BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x18E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH2 0x18BD PUSH2 0x2116 JUMP JUMPDEST PUSH2 0x18F8 DUP3 DUP3 PUSH2 0x1208 JUMP JUMPDEST PUSH2 0xD12 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1930 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1980 DUP5 DUP5 PUSH2 0x1529 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x19E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x19DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x19E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x1741 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x195 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1A1C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x8AD JUMP JUMPDEST PUSH2 0x191 SLOAD DUP4 LT PUSH2 0xC67 JUMPI PUSH2 0x2710 PUSH2 0x193 SLOAD DUP5 PUSH2 0x1A38 SWAP2 SWAP1 PUSH2 0x2B8F JUMP JUMPDEST PUSH2 0x1A42 SWAP2 SWAP1 PUSH2 0x2BAE JUMP JUMPDEST SWAP1 POP PUSH2 0x192 SLOAD DUP2 GT PUSH2 0x1A54 JUMPI DUP1 PUSH2 0x1A59 JUMP JUMPDEST PUSH2 0x192 SLOAD JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1AC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1B27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x1B32 DUP4 DUP4 DUP4 PUSH2 0x2149 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1BAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1C0A SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x19E8 JUMP JUMPDEST PUSH2 0xDF3 DUP2 CALLER PUSH2 0x21CD JUMP JUMPDEST PUSH2 0x1C2B DUP3 DUP3 PUSH2 0x1208 JUMP JUMPDEST ISZERO PUSH2 0xD12 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH32 0x189AB7A9244DF0848122154315AF71FE140F3DB0FE014031783B0946B8C9D2E3 PUSH2 0xD12 DUP2 PUSH2 0x1C17 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1CE5 JUMPI PUSH2 0xC93 DUP4 PUSH2 0x2226 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1D4E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1D4B SWAP2 DUP2 ADD SWAP1 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1DB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1E20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST POP PUSH2 0xC93 DUP4 DUP4 DUP4 PUSH2 0x22C2 JUMP JUMPDEST PUSH2 0x1E34 PUSH2 0x22E7 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1ED4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x1EE0 PUSH1 0x0 DUP4 DUP4 PUSH2 0x2149 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1EF2 SWAP2 SWAP1 PUSH2 0x2B03 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1FAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x1FB7 DUP3 PUSH1 0x0 DUP4 PUSH2 0x2149 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x202B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2093 PUSH2 0x2330 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1E61 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2102 SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x2696 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0xC93 SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2696 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x213D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2151 PUSH2 0x2330 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x196 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x626C61636B6C6973746564206163636F756E742063616E6E6F74207472616E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3332B9103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x21D7 DUP3 DUP3 PUSH2 0x1208 JUMP JUMPDEST PUSH2 0xD12 JUMPI PUSH2 0x21E4 DUP2 PUSH2 0x2376 JUMP JUMPDEST PUSH2 0x21EF DUP4 PUSH1 0x20 PUSH2 0x2388 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2200 SWAP3 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x9F6 SWAP2 PUSH1 0x4 ADD PUSH2 0x2785 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x2293 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2CA8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x22CB DUP4 PUSH2 0x2524 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x22D8 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xC93 JUMPI PUSH2 0x19E8 DUP4 DUP4 PUSH2 0x2564 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x18BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x18BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x8AD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2397 DUP4 PUSH1 0x2 PUSH2 0x2B8F JUMP JUMPDEST PUSH2 0x23A2 SWAP1 PUSH1 0x2 PUSH2 0x2B03 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23BA JUMPI PUSH2 0x23BA PUSH2 0x28D9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x23E4 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x23FF JUMPI PUSH2 0x23FF PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x242E JUMPI PUSH2 0x242E PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2452 DUP5 PUSH1 0x2 PUSH2 0x2B8F JUMP JUMPDEST PUSH2 0x245D SWAP1 PUSH1 0x1 PUSH2 0x2B03 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x24D5 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2491 JUMPI PUSH2 0x2491 PUSH2 0x2C5E JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x24A7 JUMPI PUSH2 0x24A7 PUSH2 0x2C5E JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x24CE DUP2 PUSH2 0x2C74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2460 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xC67 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH2 0x252D DUP2 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x25CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x25E7 SWAP2 SWAP1 PUSH2 0x2C8B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2622 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2627 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x264F DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D08 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2658 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2667 JUMPI POP DUP2 PUSH2 0xC67 JUMP JUMPDEST PUSH2 0xC67 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x267C JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F6 SWAP2 SWAP1 PUSH2 0x2785 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x26A2 SWAP1 PUSH2 0x29DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x26C4 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x270A JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x26DD JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x270A JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x270A JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x270A JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x26EF JUMP JUMPDEST POP PUSH2 0x2716 SWAP3 SWAP2 POP PUSH2 0x271A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2716 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x271B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2741 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xC67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2774 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x275C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x19E8 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x27A4 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2759 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27F0 DUP4 PUSH2 0x27B8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2810 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC67 DUP3 PUSH2 0x27B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x282F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH2 0x284D PUSH1 0x60 DUP7 ADD PUSH2 0x27B8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x286D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2876 DUP5 PUSH2 0x27B8 JUMP JUMPDEST SWAP3 POP PUSH2 0x2884 PUSH1 0x20 DUP6 ADD PUSH2 0x27B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x28D0 PUSH1 0x20 DUP5 ADD PUSH2 0x27B8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2902 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x290B DUP4 PUSH2 0x27B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2928 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x293C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x294E JUMPI PUSH2 0x294E PUSH2 0x28D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2976 JUMPI PUSH2 0x2976 PUSH2 0x28D9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x298F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29CD DUP4 PUSH2 0x27B8 JUMP JUMPDEST SWAP2 POP PUSH2 0x28D0 PUSH1 0x20 DUP5 ADD PUSH2 0x27B8 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x29EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2A10 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1A5B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2A66 JUMPI PUSH2 0x2A66 PUSH2 0x2A3E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2B16 JUMPI PUSH2 0x2B16 PUSH2 0x2A3E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1A5B9D985B1A59081858D8DBDD5B9D PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2BA9 JUMPI PUSH2 0x2BA9 PUSH2 0x2A3E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2BCB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2C21 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2759 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2C52 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2759 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2C83 JUMPI PUSH2 0x2C83 PUSH2 0x2A3E JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C9D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2759 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC97667070C54EF182B0F585 DUP12 SUB 0x4B 0xEA 0xC1 0xB6 RETURN ADDMOD SWAP11 LOG2 0xD3 XOR DUP12 0xB1 0xE8 SWAP3 SWAP16 0x4F 0xA9 0xB9 0x29 PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A416464 PUSH19 0x6573733A206C6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220344F3F PUSH13 0x11F0C2C3F69ED82F8C230D7625 CALLDATASIZE CALLDATACOPY 0xC4 BALANCE REVERT PUSH9 0x5CBEFA0BA7F98600B6 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"550:6590:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;-1:-1:-1;2903:213:0;;;;;:::i;:::-;;:::i;:::-;;;470:14:21;;463:22;445:41;;433:2;418:18;2903:213:0;;;;;;;;2491:98:9;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4768:197::-;;;;;;;;;;-1:-1:-1;4768:197:9;;;;;:::i;:::-;;:::i;1344:42:20:-;;;;;;;;;;-1:-1:-1;1344:42:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;3579:106:9;;;;;;;;;;-1:-1:-1;3666:12:9;;3579:106;;;1922:25:21;;;1910:2;1895:18;3579:106:9;1776:177:21;1255:42:20;;;;;;;;;;-1:-1:-1;1255:42:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;1849:829;;;;;;;;;;-1:-1:-1;1849:829:20;;;;;:::i;:::-;;:::i;:::-;;6688:450;;;;;;;;;;-1:-1:-1;6688:450:20;;;;;:::i;:::-;;:::i;4708:129:0:-;;;;;;;;;;-1:-1:-1;4708:129:0;;;;;:::i;:::-;4782:7;4808:12;;;:6;:12;;;;;:22;;;;4708:129;5133:145;;;;;;;;;;-1:-1:-1;5133:145:0;;;;;:::i;:::-;;:::i;5761:82:20:-;;;;;;;;;;-1:-1:-1;5761:82:20;;5835:1;3455:36:21;;3443:2;3428:18;5761:82:20;3313:184:21;6242:214:0;;;;;;;;;;-1:-1:-1;6242:214:0;;;;;:::i;:::-;;:::i;3317:197:7:-;;;;;;;;;;-1:-1:-1;3317:197:7;;;;;:::i;:::-;;:::i;6208:234:9:-;;;;;;;;;;-1:-1:-1;6208:234:9;;;;;:::i;:::-;;:::i;5169:75:20:-;;;;;;;;;;;;;:::i;5250:105::-;;;;;;;;;;-1:-1:-1;5250:105:20;;;;;:::i;:::-;;:::i;848:89:11:-;;;;;;;;;;-1:-1:-1;848:89:11;;;;;:::i;:::-;;:::i;3247:201:20:-;;;;;;;;;;-1:-1:-1;3247:201:20;;;;;:::i;:::-;;:::i;3763:222:7:-;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;1858:84:8:-;;;;;;;;;;-1:-1:-1;1928:7:8;;;;1858:84;;3743:125:9;;;;;;;;;;-1:-1:-1;3743:125:9;;;;;:::i;:::-;-1:-1:-1;;;;;3843:18:9;3817:7;3843:18;;;:9;:18;;;;;;;3743:125;4123:288:20;;;;;;;;;;-1:-1:-1;4123:288:20;;;;;:::i;:::-;;:::i;1243:161:11:-;;;;;;;;;;-1:-1:-1;1243:161:11;;;;;:::i;:::-;;:::i;1025:29:20:-;;;;;;;;;;;;;;;;5092:71;;;;;;;;;;;;;:::i;2737:199::-;;;;;;;;;;-1:-1:-1;2737:199:20;;;;;:::i;:::-;;:::i;3203:145:0:-;;;;;;;;;;-1:-1:-1;3203:145:0;;;;;:::i;:::-;;:::i;2702:102:9:-;;;;;;;;;;;;;:::i;1120:22:20:-;;;;;;;;;;;;;;;;4481:278;;;;;;;;;;-1:-1:-1;4481:278:20;;;;;:::i;:::-;;:::i;2324:49:0:-;;;;;;;;;;-1:-1:-1;2324:49:0;2369:4;2324:49;;3502:213:20;;;;;;;;;;-1:-1:-1;3502:213:20;;;;;:::i;:::-;;:::i;6929:427:9:-;;;;;;;;;;-1:-1:-1;6929:427:9;;;;;:::i;:::-;;:::i;6272:386:20:-;;;;;;;;;;-1:-1:-1;6272:386:20;;;;;:::i;:::-;;:::i;1074:27::-;;;;;;;;;;;;;;;;1157;;;;;;;;;;-1:-1:-1;1157:27:20;;;;-1:-1:-1;;;;;1157:27:20;;;;;;-1:-1:-1;;;;;4983:32:21;;;4965:51;;4953:2;4938:18;1157:27:20;4819:203:21;2999:198:20;;;;;;;;;;-1:-1:-1;2999:198:20;;;;;:::i;:::-;;:::i;792:62::-;;;;;;;;;;;;830:24;792:62;;5558:147:0;;;;;;;;;;-1:-1:-1;5558:147:0;;;;;:::i;:::-;;:::i;4311:149:9:-;;;;;;;;;;-1:-1:-1;4311:149:9;;;;;:::i;:::-;;:::i;724:62:20:-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;724:62:20;;4798:288;;;;;;;;;;-1:-1:-1;4798:288:20;;;;;:::i;:::-;;:::i;860:66::-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;860:66:20;;932;;;;;;;;;;;;972:26;932:66;;3791:278;;;;;;;;;;-1:-1:-1;3791:278:20;;;;;:::i;:::-;;:::i;2903:213:0:-;2988:4;-1:-1:-1;;;;;;3011:58:0;;-1:-1:-1;;;3011:58:0;;:98;;-1:-1:-1;;;;;;;;;;1168:51:17;;;3073:36:0;3004:105;2903:213;-1:-1:-1;;2903:213:0:o;2491:98:9:-;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;929:10:14;4905:32:9;929:10:14;4921:7:9;4930:6;4905:8;:32::i;:::-;-1:-1:-1;4954:4:9;;4768:197;-1:-1:-1;;;4768:197:9:o;1849:829:20:-;3268:19:6;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:6;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:6;1476:19:13;:23;;;3376:66:6;;-1:-1:-1;3425:12:6;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:6;;5879:2:21;3314:201:6;;;5861:21:21;5918:2;5898:18;;;5891:30;5957:34;5937:18;;;5930:62;-1:-1:-1;;;6008:18:21;;;6001:44;6062:19;;3314:201:6;;;;;;;;;3525:12;:16;;-1:-1:-1;;3525:16:6;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:6;;;;;3551:65;1987:34:20::1;;;;;;;;;;;;;;-1:-1:-1::0;;;1987:34:20::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;1987:34:20::1;;::::0;:12:::1;:34::i;:::-;2031:22;:20;:22::i;:::-;2063:17;:15;:17::i;:::-;2090:22;:20;:22::i;:::-;2122:24;:22;:24::i;:::-;2157:42;2369:4:0;2188:10:20;2157;:42::i;:::-;2209:35;-1:-1:-1::0;;;;;;;;;;;2233:10:20::1;2209;:35::i;:::-;2254:37;-1:-1:-1::0;;;;;;;;;;;2280:10:20::1;2254;:37::i;:::-;2301:35;830:24;2325:10;2301;:35::i;:::-;2346:37;972:26;2372:10;2346;:37::i;:::-;2394:14;:32:::0;;;2436:12:::1;:28:::0;;;2511:3:::1;2500:8;:14;2475:58;;;;-1:-1:-1::0;;;2475:58:20::1;;;;;;;:::i;:::-;2543:7;:18:::0;;;-1:-1:-1;;;;;2580:27:20;::::1;2572:61;;;::::0;-1:-1:-1;;;2572:61:20;;6637:2:21;2572:61:20::1;::::0;::::1;6619:21:21::0;6676:2;6656:18;;;6649:30;-1:-1:-1;;;6695:18:21;;;6688:51;6756:18;;2572:61:20::1;6435:345:21::0;2572:61:20::1;2643:12;:28:::0;;-1:-1:-1;;;;;;2643:28:20::1;-1:-1:-1::0;;;;;2643:28:20;::::1;;::::0;;3636:99:6;;;;3686:5;3670:21;;-1:-1:-1;;3670:21:6;;;3710:14;;-1:-1:-1;3455:36:21;;3710:14:6;;3443:2:21;3428:18;3710:14:6;;;;;;;3636:99;3258:483;1849:829:20;;;;:::o;6688:450::-;6777:4;929:10:14;6833:38:20;6849:4;929:10:14;6864:6:20;6833:15;:38::i;:::-;6882:12;6897:22;6906:4;6912:6;6897:8;:22::i;:::-;6882:37;-1:-1:-1;6933:9:20;6929:181;;6958:27;6968:4;6974:2;6978:6;6958:9;:27::i;:::-;6929:181;;;7016:34;7026:4;7032:2;7036:13;7045:4;7036:6;:13;:::i;:::-;7016:9;:34::i;:::-;7080:12;;7064:35;;7074:4;;-1:-1:-1;;;;;7080:12:20;7094:4;7064:9;:35::i;:::-;7127:4;7120:11;;;;6688:450;;;;;;:::o;5133:145:0:-;4782:7;4808:12;;;:6;:12;;;;;:22;;;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;-1:-1:-1;;;;;6337:23:0;;929:10:14;6337:23:0;6329:83;;;;-1:-1:-1;;;6329:83:0;;7448:2:21;6329:83:0;;;7430:21:21;7487:2;7467:18;;;7460:30;7526:34;7506:18;;;7499:62;-1:-1:-1;;;7577:18:21;;;7570:45;7632:19;;6329:83:0;7246:411:21;6329:83:0;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;3317:197:7:-;1889:4;-1:-1:-1;;;;;1898:6:7;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:7;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:7;:20;-1:-1:-1;;;;;;;;;;;1588:65:4;-1:-1:-1;;;;;1588:65:4;;1509:151;1971:20:7;-1:-1:-1;;;;;1971:30:7;;1963:87;;;;-1:-1:-1;;;1963:87:7;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;6208:234:9:-;6296:4;929:10:14;6350:64:9;929:10:14;6366:7:9;6403:10;6375:25;929:10:14;6366:7:9;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;5169:75:20:-;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;5227:10:20::1;:8;:10::i;5250:105::-:0;830:24;2802:16:0;2813:4;2802:10;:16::i;:::-;5331:17:20::1;5337:2;5341:6;5331:5;:17::i;848:89:11:-:0;903:27;929:10:14;923:6:11;903:5;:27::i;3247:201:20:-;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;3361:3:20::1;3351:7;:13;3327:56;;;;-1:-1:-1::0;;;3327:56:20::1;;;;;;;:::i;:::-;3393:7;:17:::0;;;3425:16:::1;::::0;1922:25:21;;;3425:16:20::1;::::0;1910:2:21;1895:18;3425:16:20::1;;;;;;;;3247:201:::0;;:::o;3763:222:7:-;1889:4;-1:-1:-1;;;;;1898:6:7;1881:23;;;1873:80;;;;-1:-1:-1;;;1873:80:7;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:7;:20;-1:-1:-1;;;;;;;;;;;1588:65:4;-1:-1:-1;;;;;1588:65:4;;1509:151;1971:20:7;-1:-1:-1;;;;;1971:30:7;;1963:87;;;;-1:-1:-1;;;1963:87:7;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;3006:131::-:0;3084:7;2324:4;-1:-1:-1;;;;;2333:6:7;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:7;;8823:2:21;2308:92:7;;;8805:21:21;8862:2;8842:18;;;8835:30;8901:34;8881:18;;;8874:62;8972:26;8952:18;;;8945:54;9016:19;;2308:92:7;8621:420:21;2308:92:7;-1:-1:-1;;;;;;;;;;;;3006:131:7;:::o;4123:288:20:-;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;-1:-1:-1;;;;;4217:22:20;::::1;4209:50;;;;-1:-1:-1::0;;;4209:50:20::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;4277:20:20;::::1;;::::0;;;:10:::1;:20;::::0;;;;;::::1;;4269:57;;;::::0;-1:-1:-1;;;4269:57:20;;9592:2:21;4269:57:20::1;::::0;::::1;9574:21:21::0;9631:2;9611:18;;;9604:30;9670:26;9650:18;;;9643:54;9714:18;;4269:57:20::1;9390:348:21::0;4269:57:20::1;-1:-1:-1::0;;;;;4336:20:20;::::1;4359:5;4336:20:::0;;;:10:::1;:20;::::0;;;;;;;;:28;;-1:-1:-1;;4336:28:20::1;::::0;;4379:25;;4965:51:21;;;4379:25:20::1;::::0;4938:18:21;4379:25:20::1;4819:203:21::0;1243:161:11;1319:46;1335:7;929:10:14;1358:6:11;1319:15;:46::i;:::-;1375:22;1381:7;1390:6;1375:5;:22::i;5092:71:20:-;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;5148:8:20::1;:6;:8::i;2737:199::-:0;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;2837:1:20::1;2827:7;:11;2819:38;;;;-1:-1:-1::0;;;2819:38:20::1;;;;;;;:::i;:::-;2867:14;:24:::0;;;2906:23:::1;::::0;1922:25:21;;;2906:23:20::1;::::0;1910:2:21;1895:18;2906:23:20::1;1776:177:21::0;3203:145:0;3289:4;3312:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3312:29:0;;;;;;;;;;;;;;;3203:145::o;2702:102:9:-;2758:13;2790:7;2783:14;;;;;:::i;4481:278:20:-;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;-1:-1:-1;;;;;4572:22:20;::::1;4564:50;;;;-1:-1:-1::0;;;4564:50:20::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;4633:20:20;::::1;;::::0;;;:10:::1;:20;::::0;;;;;::::1;;4632:21;4624:54;;;::::0;-1:-1:-1;;;4624:54:20;;9945:2:21;4624:54:20::1;::::0;::::1;9927:21:21::0;9984:2;9964:18;;;9957:30;-1:-1:-1;;;10003:18:21;;;9996:50;10063:18;;4624:54:20::1;9743:344:21::0;4624:54:20::1;-1:-1:-1::0;;;;;4688:20:20;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;;:27;;-1:-1:-1;;4688:27:20::1;4711:4;4688:27;::::0;;4730:22;;4965:51:21;;;4730:22:20::1;::::0;4938:18:21;4730:22:20::1;4819:203:21::0;3502:213:20;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;-1:-1:-1;;;;;3596:22:20;::::1;3588:50;;;;-1:-1:-1::0;;;3588:50:20::1;;;;;;;:::i;:::-;3648:12;:23:::0;;-1:-1:-1;;;;;;3648:23:20::1;-1:-1:-1::0;;;;;3648:23:20;::::1;::::0;;::::1;::::0;;;3686:22:::1;::::0;4965:51:21;;;3686:22:20::1;::::0;4953:2:21;4938:18;3686:22:20::1;4819:203:21::0;6929:427:9;7022:4;929:10:14;7022:4:9;7103:25;929:10:14;7120:7:9;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;-1:-1:-1;;;7138:85:9;;10294:2:21;7138:85:9;;;10276:21:21;10333:2;10313:18;;;10306:30;10372:34;10352:18;;;10345:62;-1:-1:-1;;;10423:18:21;;;10416:35;10468:19;;7138:85:9;10092:401:21;7138:85:9;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;-1:-1:-1;7345:4:9;;6929:427;-1:-1:-1;;;;6929:427:9:o;6272:386:20:-;6343:4;929:10:14;6343:4:20;6413:23;929:10:14;6429:6:20;6413:8;:23::i;:::-;6398:38;-1:-1:-1;6450:9:20;6446:184;;6475:28;6485:5;6492:2;6496:6;6475:9;:28::i;:::-;6446:184;;;6534:35;6544:5;6551:2;6555:13;6564:4;6555:6;:13;:::i;6534:35::-;6600:12;;6583:36;;6593:5;;-1:-1:-1;;;;;6600:12:20;6614:4;6583:9;:36::i;2999:198::-;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;3102:1:20::1;3092:7;:11;3084:38;;;;-1:-1:-1::0;;;3084:38:20::1;;;;;;;:::i;:::-;3132:12;:22:::0;;;3169:21:::1;::::0;1922:25:21;;;3169:21:20::1;::::0;1910:2:21;1895:18;3169:21:20::1;1776:177:21::0;5558:147:0;4782:7;4808:12;;;:6;:12;;;;;:22;;;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;4311:149:9:-:0;-1:-1:-1;;;;;4426:18:9;;;4400:7;4426:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4311:149::o;4798:288:20:-;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;-1:-1:-1;;;;;4892:22:20;::::1;4884:50;;;;-1:-1:-1::0;;;4884:50:20::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;4952:20:20;::::1;;::::0;;;:10:::1;:20;::::0;;;;;::::1;;4944:57;;;::::0;-1:-1:-1;;;4944:57:20;;10700:2:21;4944:57:20::1;::::0;::::1;10682:21:21::0;10739:2;10719:18;;;10712:30;10778:26;10758:18;;;10751:54;10822:18;;4944:57:20::1;10498:348:21::0;4944:57:20::1;-1:-1:-1::0;;;;;5011:20:20;::::1;5034:5;5011:20:::0;;;:10:::1;:20;::::0;;;;;;;;:28;;-1:-1:-1;;5011:28:20::1;::::0;;5054:25;;4965:51:21;;;5054:25:20::1;::::0;4938:18:21;5054:25:20::1;4819:203:21::0;3791:278:20;-1:-1:-1;;;;;;;;;;;2802:16:0;2813:4;2802:10;:16::i;:::-;-1:-1:-1;;;;;3882:22:20;::::1;3874:50;;;;-1:-1:-1::0;;;3874:50:20::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;3943:20:20;::::1;;::::0;;;:10:::1;:20;::::0;;;;;::::1;;3942:21;3934:54;;;::::0;-1:-1:-1;;;3934:54:20;;11053:2:21;3934:54:20::1;::::0;::::1;11035:21:21::0;11092:2;11072:18;;;11065:30;-1:-1:-1;;;11111:18:21;;;11104:50;11171:18;;3934:54:20::1;10851:344:21::0;3934:54:20::1;-1:-1:-1::0;;;;;3998:20:20;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;;:27;;-1:-1:-1;;3998:27:20::1;4021:4;3998:27;::::0;;4040:22;;4965:51:21;;;4040:22:20::1;::::0;4938:18:21;4040:22:20::1;4819:203:21::0;10841:370:9;-1:-1:-1;;;;;10972:19:9;;10964:68;;;;-1:-1:-1;;;10964:68:9;;11402:2:21;10964:68:9;;;11384:21:21;11441:2;11421:18;;;11414:30;11480:34;11460:18;;;11453:62;-1:-1:-1;;;11531:18:21;;;11524:34;11575:19;;10964:68:9;11200:400:21;10964:68:9;-1:-1:-1;;;;;11050:21:9;;11042:68;;;;-1:-1:-1;;;11042:68:9;;11807:2:21;11042:68:9;;;11789:21:21;11846:2;11826:18;;;11819:30;11885:34;11865:18;;;11858:62;-1:-1:-1;;;11936:18:21;;;11929:32;11978:19;;11042:68:9;11605:398:21;11042:68:9;-1:-1:-1;;;;;11121:18:9;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11172:32;;1922:25:21;;;11172:32:9;;1895:18:21;11172:32:9;;;;;;;10841:370;;;:::o;2114:147::-;5363:13:6;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:6;;;;;;;:::i;:::-;2216:38:9::1;2239:5;2246:7;2216:22;:38::i;594:65:11:-:0;5363:13:6;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:6;;;;;;;:::i;:::-;594:65:11:o;1063:97:8:-;5363:13:6;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:6;;;;;;;:::i;:::-;1126:27:8::1;:25;:27::i;7791:233:0:-:0;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7912:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7912:29:0;;;;;;;;;:36;;-1:-1:-1;;7912:36:0;7944:4;7912:36;;;7994:12;929:10:14;;850:96;7994:12:0;-1:-1:-1;;;;;7967:40:0;7985:7;-1:-1:-1;;;;;7967:40:0;7979:4;7967:40;;;;;;;;;;7791:233;;:::o;11492:441:9:-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;-1:-1:-1;;11688:16:9;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;-1:-1:-1;;;11741:68:9;;12622:2:21;11741:68:9;;;12604:21:21;12661:2;12641:18;;;12634:30;12700:31;12680:18;;;12673:59;12749:18;;11741:68:9;12420:353:21;11741:68:9;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11612:321;11492:441;;;:::o;5879:363:20:-;-1:-1:-1;;;;;5999:20:20;;5954:7;5999:20;;;:10;:20;;;;;;5954:7;;5999:20;;5995:59;;;6042:1;6035:8;;;;;5995:59;6078:14;;6067:7;:25;6063:152;;6137:5;6126:7;;6116;:17;;;;:::i;:::-;6115:27;;;;:::i;:::-;6108:34;;6170:12;;6163:4;:19;:41;;6200:4;6163:41;;;6185:12;;6163:41;6156:48;6231:4;-1:-1:-1;;;;5879:363:20:o;7810:818:9:-;-1:-1:-1;;;;;7936:18:9;;7928:68;;;;-1:-1:-1;;;7928:68:9;;13375:2:21;7928:68:9;;;13357:21:21;13414:2;13394:18;;;13387:30;13453:34;13433:18;;;13426:62;-1:-1:-1;;;13504:18:21;;;13497:35;13549:19;;7928:68:9;13173:401:21;7928:68:9;-1:-1:-1;;;;;8014:16:9;;8006:64;;;;-1:-1:-1;;;8006:64:9;;13781:2:21;8006:64:9;;;13763:21:21;13820:2;13800:18;;;13793:30;13859:34;13839:18;;;13832:62;-1:-1:-1;;;13910:18:21;;;13903:33;13953:19;;8006:64:9;13579:399:21;8006:64:9;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;-1:-1:-1;;;;;8152:15:9;;8130:19;8152:15;;;:9;:15;;;;;;8185:21;;;;8177:72;;;;-1:-1:-1;;;8177:72:9;;14185:2:21;8177:72:9;;;14167:21:21;14224:2;14204:18;;;14197:30;14263:34;14243:18;;;14236:62;-1:-1:-1;;;14314:18:21;;;14307:36;14360:19;;8177:72:9;13983:402:21;8177:72:9;-1:-1:-1;;;;;8283:15:9;;;;;;;:9;:15;;;;;;8301:20;;;8283:38;;8498:13;;;;;;;;;;:23;;;;;;8547:26;;;;;;8315:6;1922:25:21;;1910:2;1895:18;;1776:177;8547:26:9;;;;;;;;8584:37;5133:145:0;3642:103;3708:30;3719:4;929:10:14;3708::0;:30::i;8195:234::-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8316:29:0;;;;;;;;;;:37;;-1:-1:-1;;8316:37:0;;;8372:40;929:10:14;;8316:12:0;;8372:40;;8348:5;8372:40;8195:234;;:::o;5657:98:20:-;972:26;2802:16:0;2813:4;2802:10;:16::i;2884:974:4:-;1023:66;3330:59;;;3326:526;;;3405:37;3424:17;3405:18;:37::i;3326:526::-;3506:17;-1:-1:-1;;;;;3477:61:4;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3477:63:4;;;;;;;;-1:-1:-1;;3477:63:4;;;;;;;;;;;;:::i;:::-;;;3473:302;;3704:56;;-1:-1:-1;;;3704:56:4;;14781:2:21;3704:56:4;;;14763:21:21;14820:2;14800:18;;;14793:30;14859:34;14839:18;;;14832:62;-1:-1:-1;;;14910:18:21;;;14903:44;14964:19;;3704:56:4;14579:410:21;3473:302:4;-1:-1:-1;;;;;;;;;;;3590:28:4;;3582:82;;;;-1:-1:-1;;;3582:82:4;;15196:2:21;3582:82:4;;;15178:21:21;15235:2;15215:18;;;15208:30;15274:34;15254:18;;;15247:62;-1:-1:-1;;;15325:18:21;;;15318:39;15374:19;;3582:82:4;14994:405:21;3582:82:4;3541:138;3788:53;3806:17;3825:4;3831:9;3788:17;:53::i;2676:117:8:-;1729:16;:14;:16::i;:::-;2734:7:::1;:15:::0;;-1:-1:-1;;2734:15:8::1;::::0;;2764:22:::1;929:10:14::0;2773:12:8::1;2764:22;::::0;-1:-1:-1;;;;;4983:32:21;;;4965:51;;4953:2;4938:18;2764:22:8::1;;;;;;;2676:117::o:0;8904:535:9:-;-1:-1:-1;;;;;8987:21:9;;8979:65;;;;-1:-1:-1;;;8979:65:9;;15606:2:21;8979:65:9;;;15588:21:21;15645:2;15625:18;;;15618:30;15684:33;15664:18;;;15657:61;15735:18;;8979:65:9;15404:355:21;8979:65:9;9055:49;9084:1;9088:7;9097:6;9055:20;:49::i;:::-;9131:6;9115:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9283:18:9;;;;;;:9;:18;;;;;;;;:28;;;;;;9336:37;1922:25:21;;;9336:37:9;;1895:18:21;9336:37:9;;;;;;;6242:214:0;;:::o;9759:659:9:-;-1:-1:-1;;;;;9842:21:9;;9834:67;;;;-1:-1:-1;;;9834:67:9;;15966:2:21;9834:67:9;;;15948:21:21;16005:2;15985:18;;;15978:30;16044:34;16024:18;;;16017:62;-1:-1:-1;;;16095:18:21;;;16088:31;16136:19;;9834:67:9;15764:397:21;9834:67:9;9912:49;9933:7;9950:1;9954:6;9912:20;:49::i;:::-;-1:-1:-1;;;;;9997:18:9;;9972:22;9997:18;;;:9;:18;;;;;;10033:24;;;;10025:71;;;;-1:-1:-1;;;10025:71:9;;16368:2:21;10025:71:9;;;16350:21:21;16407:2;16387:18;;;16380:30;16446:34;16426:18;;;16419:62;-1:-1:-1;;;16497:18:21;;;16490:32;16539:19;;10025:71:9;16166:398:21;10025:71:9;-1:-1:-1;;;;;10130:18:9;;;;;;:9;:18;;;;;;;;10151:23;;;10130:44;;10267:12;:22;;;;;;;10315:37;1922:25:21;;;10130:18:9;;;10315:37;;1895:18:21;10315:37:9;;;;;;;5133:145:0;;;:::o;2429:115:8:-;1482:19;:17;:19::i;:::-;2488:7:::1;:14:::0;;-1:-1:-1;;2488:14:8::1;2498:4;2488:14;::::0;;2517:20:::1;2524:12;929:10:14::0;;850:96;2267:159:9;5363:13:6;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:6;;;;;;;:::i;:::-;2379:13:9;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2402:17:9;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;1166:95:8:-:0;5363:13:6;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:6;;;;;;;:::i;:::-;1239:7:8::1;:15:::0;;-1:-1:-1;;1239:15:8::1;::::0;;1166:95::o;5361:290:20:-;1482:19:8;:17;:19::i;:::-;-1:-1:-1;;;;;5582:16:20;::::1;;::::0;;;:10:::1;:16;::::0;;;;;::::1;;5581:17;5573:71;;;::::0;-1:-1:-1;;;5573:71:20;;16771:2:21;5573:71:20::1;::::0;::::1;16753:21:21::0;16810:2;16790:18;;;16783:30;16849:34;16829:18;;;16822:62;-1:-1:-1;;;16900:18:21;;;16893:39;16949:19;;5573:71:20::1;16569:405:21::0;4026:501:0;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4204:274:0;;;;;;;;;;-1:-1:-1;;;4152:358:0;;;;;;;:::i;1751:281:4:-;-1:-1:-1;;;;;1476:19:13;;;1824:106:4;;;;-1:-1:-1;;;1824:106:4;;17972:2:21;1824:106:4;;;17954:21:21;18011:2;17991:18;;;17984:30;18050:34;18030:18;;;18023:62;-1:-1:-1;;;18101:18:21;;;18094:43;18154:19;;1824:106:4;17770:409:21;1824:106:4;-1:-1:-1;;;;;;;;;;;1940:85:4;;-1:-1:-1;;;;;;1940:85:4;-1:-1:-1;;;;;1940:85:4;;;;;;;;;;1751:281::o;2424:288::-;2562:29;2573:17;2562:10;:29::i;:::-;2619:1;2605:4;:11;:15;:28;;;;2624:9;2605:28;2601:105;;;2649:46;2671:17;2690:4;2649:21;:46::i;2188:106:8:-;1928:7;;;;2246:41;;;;-1:-1:-1;;;2246:41:8;;18386:2:21;2246:41:8;;;18368:21:21;18425:2;18405:18;;;18398:30;-1:-1:-1;;;18444:18:21;;;18437:50;18504:18;;2246:41:8;18184:344:21;2010:106:8;1928:7;;;;2079:9;2071:38;;;;-1:-1:-1;;;2071:38:8;;18735:2:21;2071:38:8;;;18717:21:21;18774:2;18754:18;;;18747:30;-1:-1:-1;;;18793:18:21;;;18786:46;18849:18;;2071:38:8;18533:340:21;2146:149:16;2204:13;2236:52;-1:-1:-1;;;;;2248:22:16;;333:2;1557:437;1632:13;1657:19;1689:10;1693:6;1689:1;:10;:::i;:::-;:14;;1702:1;1689:14;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1679:25:16;;1657:47;;-1:-1:-1;;;1714:6:16;1721:1;1714:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1714:15:16;;;;;;;;;-1:-1:-1;;;1739:6:16;1746:1;1739:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1739:15:16;;;;;;;;-1:-1:-1;1769:9:16;1781:10;1785:6;1781:1;:10;:::i;:::-;:14;;1794:1;1781:14;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;-1:-1:-1;;;1844:5:16;1852:3;1844:11;1835:21;;;;;;;:::i;:::-;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1823:33:16;;;;;;;;-1:-1:-1;1880:1:16;1870:11;;;;;1804:3;;;:::i;:::-;;;1764:128;;;-1:-1:-1;1909:10:16;;1901:55;;;;-1:-1:-1;;;1901:55:16;;19353:2:21;1901:55:16;;;19335:21:21;;;19372:18;;;19365:30;19431:34;19411:18;;;19404:62;19483:18;;1901:55:16;19151:356:21;2138:152:4;2204:37;2223:17;2204:18;:37::i;:::-;2256:27;;-1:-1:-1;;;;;2256:27:4;;;;;;;;2138:152;:::o;6780:455::-;6863:12;-1:-1:-1;;;;;1476:19:13;;;6887:88:4;;;;-1:-1:-1;;;6887:88:4;;19714:2:21;6887:88:4;;;19696:21:21;19753:2;19733:18;;;19726:30;19792:34;19772:18;;;19765:62;-1:-1:-1;;;19843:18:21;;;19836:36;19889:19;;6887:88:4;19512:402:21;6887:88:4;7046:12;7060:23;7087:6;-1:-1:-1;;;;;7087:19:4;7107:4;7087:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7045:67;;;;7129:99;7165:7;7174:10;7129:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7122:106;6780:455;-1:-1:-1;;;;;6780:455:4:o;7438:295:13:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:13;7635:17;;7608:119;7683:33;7691:10;7703:12;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:13;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:286:21;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:21;;209:43;;199:71;;266:1;263;256:12;497:258;569:1;579:113;593:6;590:1;587:13;579:113;;;669:11;;;663:18;650:11;;;643:39;615:2;608:10;579:113;;;710:6;707:1;704:13;701:48;;;-1:-1:-1;;745:1:21;727:16;;720:27;497:258::o;760:383::-;909:2;898:9;891:21;872:4;941:6;935:13;984:6;979:2;968:9;964:18;957:34;1000:66;1059:6;1054:2;1043:9;1039:18;1034:2;1026:6;1022:15;1000:66;:::i;:::-;1127:2;1106:15;-1:-1:-1;;1102:29:21;1087:45;;;;1134:2;1083:54;;760:383;-1:-1:-1;;760:383:21:o;1148:173::-;1216:20;;-1:-1:-1;;;;;1265:31:21;;1255:42;;1245:70;;1311:1;1308;1301:12;1245:70;1148:173;;;:::o;1326:254::-;1394:6;1402;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;1494:29;1513:9;1494:29;:::i;:::-;1484:39;1570:2;1555:18;;;;1542:32;;-1:-1:-1;;;1326:254:21:o;1585:186::-;1644:6;1697:2;1685:9;1676:7;1672:23;1668:32;1665:52;;;1713:1;1710;1703:12;1665:52;1736:29;1755:9;1736:29;:::i;1958:391::-;2044:6;2052;2060;2068;2121:3;2109:9;2100:7;2096:23;2092:33;2089:53;;;2138:1;2135;2128:12;2089:53;2174:9;2161:23;2151:33;;2231:2;2220:9;2216:18;2203:32;2193:42;;2282:2;2271:9;2267:18;2254:32;2244:42;;2305:38;2339:2;2328:9;2324:18;2305:38;:::i;:::-;2295:48;;1958:391;;;;;;;:::o;2354:328::-;2431:6;2439;2447;2500:2;2488:9;2479:7;2475:23;2471:32;2468:52;;;2516:1;2513;2506:12;2468:52;2539:29;2558:9;2539:29;:::i;:::-;2529:39;;2587:38;2621:2;2610:9;2606:18;2587:38;:::i;:::-;2577:48;;2672:2;2661:9;2657:18;2644:32;2634:42;;2354:328;;;;;:::o;2687:180::-;2746:6;2799:2;2787:9;2778:7;2774:23;2770:32;2767:52;;;2815:1;2812;2805:12;2767:52;-1:-1:-1;2838:23:21;;2687:180;-1:-1:-1;2687:180:21:o;3054:254::-;3122:6;3130;3183:2;3171:9;3162:7;3158:23;3154:32;3151:52;;;3199:1;3196;3189:12;3151:52;3235:9;3222:23;3212:33;;3264:38;3298:2;3287:9;3283:18;3264:38;:::i;:::-;3254:48;;3054:254;;;;;:::o;3687:127::-;3748:10;3743:3;3739:20;3736:1;3729:31;3779:4;3776:1;3769:15;3803:4;3800:1;3793:15;3819:995;3896:6;3904;3957:2;3945:9;3936:7;3932:23;3928:32;3925:52;;;3973:1;3970;3963:12;3925:52;3996:29;4015:9;3996:29;:::i;:::-;3986:39;;4076:2;4065:9;4061:18;4048:32;4099:18;4140:2;4132:6;4129:14;4126:34;;;4156:1;4153;4146:12;4126:34;4194:6;4183:9;4179:22;4169:32;;4239:7;4232:4;4228:2;4224:13;4220:27;4210:55;;4261:1;4258;4251:12;4210:55;4297:2;4284:16;4319:2;4315;4312:10;4309:36;;;4325:18;;:::i;:::-;4400:2;4394:9;4368:2;4454:13;;-1:-1:-1;;4450:22:21;;;4474:2;4446:31;4442:40;4430:53;;;4498:18;;;4518:22;;;4495:46;4492:72;;;4544:18;;:::i;:::-;4584:10;4580:2;4573:22;4619:2;4611:6;4604:18;4659:7;4654:2;4649;4645;4641:11;4637:20;4634:33;4631:53;;;4680:1;4677;4670:12;4631:53;4736:2;4731;4727;4723:11;4718:2;4710:6;4706:15;4693:46;4781:1;4776:2;4771;4763:6;4759:15;4755:24;4748:35;4802:6;4792:16;;;;;;;3819:995;;;;;:::o;5027:260::-;5095:6;5103;5156:2;5144:9;5135:7;5131:23;5127:32;5124:52;;;5172:1;5169;5162:12;5124:52;5195:29;5214:9;5195:29;:::i;:::-;5185:39;;5243:38;5277:2;5266:9;5262:18;5243:38;:::i;5292:380::-;5371:1;5367:12;;;;5414;;;5435:61;;5489:4;5481:6;5477:17;5467:27;;5435:61;5542:2;5534:6;5531:14;5511:18;5508:38;5505:161;;;5588:10;5583:3;5579:20;5576:1;5569:31;5623:4;5620:1;5613:15;5651:4;5648:1;5641:15;5505:161;;5292:380;;;:::o;6092:338::-;6294:2;6276:21;;;6333:2;6313:18;;;6306:30;-1:-1:-1;;;6367:2:21;6352:18;;6345:44;6421:2;6406:18;;6092:338::o;6984:127::-;7045:10;7040:3;7036:20;7033:1;7026:31;7076:4;7073:1;7066:15;7100:4;7097:1;7090:15;7116:125;7156:4;7184:1;7181;7178:8;7175:34;;;7189:18;;:::i;:::-;-1:-1:-1;7226:9:21;;7116:125::o;7662:408::-;7864:2;7846:21;;;7903:2;7883:18;;;7876:30;7942:34;7937:2;7922:18;;7915:62;-1:-1:-1;;;8008:2:21;7993:18;;7986:42;8060:3;8045:19;;7662:408::o;8075:::-;8277:2;8259:21;;;8316:2;8296:18;;;8289:30;8355:34;8350:2;8335:18;;8328:62;-1:-1:-1;;;8421:2:21;8406:18;;8399:42;8473:3;8458:19;;8075:408::o;8488:128::-;8528:3;8559:1;8555:6;8552:1;8549:13;8546:39;;;8565:18;;:::i;:::-;-1:-1:-1;8601:9:21;;8488:128::o;9046:339::-;9248:2;9230:21;;;9287:2;9267:18;;;9260:30;-1:-1:-1;;;9321:2:21;9306:18;;9299:45;9376:2;9361:18;;9046:339::o;12008:407::-;12210:2;12192:21;;;12249:2;12229:18;;;12222:30;12288:34;12283:2;12268:18;;12261:62;-1:-1:-1;;;12354:2:21;12339:18;;12332:41;12405:3;12390:19;;12008:407::o;12778:168::-;12818:7;12884:1;12880;12876:6;12872:14;12869:1;12866:21;12861:1;12854:9;12847:17;12843:45;12840:71;;;12891:18;;:::i;:::-;-1:-1:-1;12931:9:21;;12778:168::o;12951:217::-;12991:1;13017;13007:132;;13061:10;13056:3;13052:20;13049:1;13042:31;13096:4;13093:1;13086:15;13124:4;13121:1;13114:15;13007:132;-1:-1:-1;13153:9:21;;12951:217::o;14390:184::-;14460:6;14513:2;14501:9;14492:7;14488:23;14484:32;14481:52;;;14529:1;14526;14519:12;14481:52;-1:-1:-1;14552:16:21;;14390:184;-1:-1:-1;14390:184:21:o;16979:786::-;17390:25;17385:3;17378:38;17360:3;17445:6;17439:13;17461:62;17516:6;17511:2;17506:3;17502:12;17495:4;17487:6;17483:17;17461:62;:::i;:::-;-1:-1:-1;;;17582:2:21;17542:16;;;17574:11;;;17567:40;17632:13;;17654:63;17632:13;17703:2;17695:11;;17688:4;17676:17;;17654:63;:::i;:::-;17737:17;17756:2;17733:26;;16979:786;-1:-1:-1;;;;16979:786:21:o;18878:127::-;18939:10;18934:3;18930:20;18927:1;18920:31;18970:4;18967:1;18960:15;18994:4;18991:1;18984:15;19010:136;19049:3;19077:5;19067:39;;19086:18;;:::i;:::-;-1:-1:-1;;;19122:18:21;;19010:136::o;19919:274::-;20048:3;20086:6;20080:13;20102:53;20148:6;20143:3;20136:4;20128:6;20124:17;20102:53;:::i;:::-;20171:16;;;;;19919:274;-1:-1:-1;;19919:274:21:o"},"gasEstimates":{"creation":{"codeDepositCost":"2324000","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"306","MINTER_ROLE()":"328","OPERATOR_ROLE()":"infinite","PAUSER_ROLE()":"infinite","UPGRADER_ROLE()":"327","addBlacklist(address)":"infinite","addWhitelist(address)":"infinite","allowance(address,address)":"infinite","approve(address,uint256)":"24681","balanceOf(address)":"2670","blacklists(address)":"2633","burn(uint256)":"55306","burnFrom(address,uint256)":"81906","decimals()":"333","decreaseAllowance(address,uint256)":"27094","feeCollector()":"2426","feeMaxAmount()":"2362","feeRate()":"2362","feeStartAmount()":"2363","getRoleAdmin(bytes32)":"2556","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2788","increaseAllowance(address,uint256)":"27057","initialize(uint256,uint256,uint256,address)":"infinite","mint(address,uint256)":"infinite","name()":"infinite","pause()":"infinite","paused()":"2404","proxiableUUID()":"infinite","removeBlacklist(address)":"infinite","removeWhitelist(address)":"infinite","renounceRole(bytes32,address)":"29047","revokeRole(bytes32,address)":"infinite","setFeeCollector(address)":"infinite","setFeeMaxAmount(uint256)":"infinite","setFeeRate(uint256)":"infinite","setMinAmount(uint256)":"infinite","supportsInterface(bytes4)":"473","symbol()":"infinite","totalSupply()":"2416","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","unpause()":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","whitelists(address)":"2566"},"internal":{"_authorizeUpgrade(address)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_calcFee(address,uint256)":"10863"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","OPERATOR_ROLE()":"f5b541a6","PAUSER_ROLE()":"e63ab1e9","UPGRADER_ROLE()":"f72c0d8b","addBlacklist(address)":"9cfe42da","addWhitelist(address)":"f80f5dd5","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","blacklists(address)":"16c02129","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","feeCollector()":"c415b95c","feeMaxAmount()":"bd102280","feeRate()":"978bbdb9","feeStartAmount()":"833f97be","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","increaseAllowance(address,uint256)":"39509351","initialize(uint256,uint256,uint256,address)":"1f8d519d","mint(address,uint256)":"40c10f19","name()":"06fdde03","pause()":"8456cb59","paused()":"5c975abb","proxiableUUID()":"52d1902d","removeBlacklist(address)":"eb91e651","removeWhitelist(address)":"78c8cda7","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setFeeCollector(address)":"a42dce80","setFeeMaxAmount(uint256)":"cbe351ca","setFeeRate(uint256)":"45596e2e","setMinAmount(uint256)":"897b0637","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","unpause()":"3f4ba83a","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","whitelists(address)":"1e7be210"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeMaxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeStartAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStartAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeStartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setFeeMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"FeeStartAmount(uint256)\":{\"notice\":\"event\"}},\"kind\":\"user\",\"methods\":{\"feeStartAmount()\":{\"notice\":\"config item\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20CNYG.sol\":\"ERC20CNYG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/ERC20CNYG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract ERC20CNYG is\\n    Initializable,\\n    ERC20Upgradeable,\\n    ERC20BurnableUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n    /// config item\\n    uint256 public feeStartAmount; // 100 * 1e6;\\n    uint256 public feeMaxAmount; // 50 * 1e6;\\n    uint256 public feeRate; // 0.05%\\n    address public feeCollector; // fee account address\\n\\n    // whitelist account address => bool\\n    mapping(address => bool) public whitelists;\\n    // blacklist account address => bool\\n    mapping(address => bool) public blacklists;\\n\\n    /// event\\n    event FeeStartAmount(uint256 amount);\\n    event FeeMaxAmount(uint256 amount);\\n    event FeeRate(uint256 amount);\\n    event FeeCollector(address account);\\n\\n    event AddWhitelist(address account);\\n    event RemoveWhitelist(address account);\\n    event AddBlacklist(address account);\\n    event RemoveBlacklist(address account);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(uint256 _feeStartAmount, uint256 _feeMaxAmount, uint256 _feeRate, address _feeCollector) public initializer {\\n        __ERC20_init(\\\"CNYG Token\\\", \\\"CNYG\\\");\\n        __ERC20Burnable_init();\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n\\n        feeStartAmount = _feeStartAmount;\\n        feeMaxAmount = _feeMaxAmount;\\n\\n        require(_feeRate >= 0 && _feeRate < 100, \\\"invalid amount\\\");\\n        feeRate = _feeRate;\\n\\n        require(_feeCollector != address(0), \\\"invalid fee collector\\\");\\n        feeCollector = _feeCollector;\\n    }\\n\\n    // only operator: set minimum amount of transfer\\n    function setMinAmount(uint256 _amount) external onlyRole(OPERATOR_ROLE) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n        feeStartAmount = _amount;\\n        emit FeeStartAmount(_amount);\\n    }\\n\\n    // only operator: set maximum amount of transfer fee\\n    function setFeeMaxAmount(uint256 _amount) external onlyRole(OPERATOR_ROLE) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n        feeMaxAmount = _amount;\\n        emit FeeMaxAmount(_amount);\\n    }\\n\\n    // only operator: set transfer fee rate\\n    function setFeeRate(uint256 _amount) external onlyRole(OPERATOR_ROLE) {\\n        require(_amount >= 0 && _amount < 100, \\\"invalid amount\\\");\\n        feeRate = _amount;\\n        emit FeeRate(_amount);\\n    }\\n\\n    // only operator: set fee collector account\\n    function setFeeCollector(address _account) external onlyRole(OPERATOR_ROLE) {\\n        require(_account != address(0), \\\"invalid account\\\");\\n        feeCollector = _account;\\n        emit FeeCollector(_account);\\n    }\\n\\n    // only operator: account add whitelists\\n    // transfer zero fee\\n    function addWhitelist(address _account) external onlyRole(OPERATOR_ROLE) {\\n        require(_account != address(0), \\\"invalid account\\\");\\n        require(!whitelists[_account], \\\"account is whitelist\\\");\\n        whitelists[_account] = true;\\n        emit AddWhitelist(_account);\\n    }\\n\\n    // only operator: account remove whitelists\\n    function removeWhitelist(address _account) external onlyRole(OPERATOR_ROLE) {\\n        require(_account != address(0), \\\"invalid account\\\");\\n        require(whitelists[_account], \\\"account is not whitelist\\\");\\n        whitelists[_account] = false;\\n        emit RemoveWhitelist(_account);\\n    }\\n\\n    // only operator: account add blacklists\\n    // no transfer\\n    function addBlacklist(address _account) external onlyRole(OPERATOR_ROLE) {\\n        require(_account != address(0), \\\"invalid account\\\");\\n        require(!blacklists[_account], \\\"account is blacklist\\\");\\n        blacklists[_account] = true;\\n        emit AddBlacklist(_account);\\n    }\\n\\n    // account remove blacklists\\n    function removeBlacklist(address _account) external onlyRole(OPERATOR_ROLE) {\\n        require(_account != address(0), \\\"invalid account\\\");\\n        require(blacklists[_account], \\\"account is not blacklist\\\");\\n        blacklists[_account] = false;\\n        emit RemoveBlacklist(_account);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n        // check account is cannot transfer\\n        require(!blacklists[from], \\\"blacklisted account cannot transfer token\\\");\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n    // calculate transfer fee\\n    function _calcFee(address _account, uint256 _amount) private view returns (uint256) {\\n        uint256 _fee;\\n        if (whitelists[_account]) {\\n            return 0;\\n        }\\n        if (_amount >= feeStartAmount) {\\n            _fee = (_amount * feeRate) / 10000;\\n            _fee = _fee > feeMaxAmount ? feeMaxAmount : _fee;\\n        }\\n        return _fee;\\n    }\\n\\n    // account transfer\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        address owner = _msgSender();\\n\\n        uint256 _fee = _calcFee(owner, amount);\\n        if (_fee == 0) {\\n            _transfer(owner, to, amount);\\n        } else {\\n            _transfer(owner, to, amount - _fee);\\n            _transfer(owner, feeCollector, _fee);\\n        }\\n\\n        return true;\\n    }\\n\\n    // account transfer\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n\\n        uint256 _fee = _calcFee(from, amount);\\n        if (_fee == 0) {\\n            _transfer(from, to, amount);\\n        } else {\\n            _transfer(from, to, amount - _fee);\\n            _transfer(from, feeCollector, _fee);\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x887bce8bd0236a8a473a76e044b31c03db0b588db76c46f7b2389e8a313fd975\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":811,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":814,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2340,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1255,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":1261,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1263,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":1265,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":1267,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1847,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":1989,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":1130,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_paused","offset":0,"slot":"151","type":"t_bool"},{"astId":1235,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":2619,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"201","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"_roles","offset":0,"slot":"251","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"252","type":"t_array(t_uint256)49_storage"},{"astId":793,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"301","type":"t_array(t_uint256)50_storage"},{"astId":1108,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"__gap","offset":0,"slot":"351","type":"t_array(t_uint256)50_storage"},{"astId":3540,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"feeStartAmount","offset":0,"slot":"401","type":"t_uint256"},{"astId":3542,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"feeMaxAmount","offset":0,"slot":"402","type":"t_uint256"},{"astId":3544,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"feeRate","offset":0,"slot":"403","type":"t_uint256"},{"astId":3546,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"feeCollector","offset":0,"slot":"404","type":"t_address"},{"astId":3550,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"whitelists","offset":0,"slot":"405","type":"t_mapping(t_address,t_bool)"},{"astId":3554,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"blacklists","offset":0,"slot":"406","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/ERC20CNYG.sol:ERC20CNYG","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"events":{"FeeStartAmount(uint256)":{"notice":"event"}},"kind":"user","methods":{"feeStartAmount()":{"notice":"config item"}},"version":1}}}}}}